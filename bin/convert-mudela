#!/usr/bin/perl -w


use Getopt::Long;
sub 
    version_string_conv
{
    my ($from_version, $to_version) = @_;
    s/\version \"0.0.$from_version\"/\version \"0.0.$to_version\"/g;
}

################################################################

sub
    conv_pl0_0_50_pl0_0_52
{
 
}
sub conv_pl52_pl53
{

    s/include \"/$1\\include \"/g;
}


###############################################################





sub
    usage
{
    print STDERR "Usage: convert-mudela\n";
    print STDERR "other options: --edit --output=FILE --show-rules\n";
    exit 2;
}
    
my %minor_conversions = (50 => \&no_conv,
			 52 => \&conv_pl0_0_50_pl0_0_52,
			 53 => \&conv_pl52_pl53
			 );
sub versions 
{
    return  (sort keys %minor_conversions);
}
    

sub
    show_rules
{
    print "Rules: ", join(", ", sort keys %minor_conversions), "\n";
    
}

sub 
    do_conversion
{
    my ($from,$to) = @_;

    my @applicable_conversion;
    my @mudela_levels;
    
    die "This is too old  to convert " if $from < 50;
    my @v = versions;
    foreach $a (@v) {
	if ($a > $from && $a <= $to ){ 
	    push @applicable_conversion, $minor_conversions{$a};
	    push @mudela_levels, $a;
	}
    }
    
    print STDERR "Applying following rules: ", join(", ", @mudela_levels) , "\n";

    while (<INLY>) {
	foreach $subroutine (@applicable_conversion) {
	
	    &$subroutine;
	    
	}
	version_string_conv $from, $to;
	print OUTLY;
    }
}
sub set_auto_from
{
    my ($fn)=@_;
    my ($ver);
    open INLY, $fn || die "Can't open";

    while (<INLY>) {
	s/^.*\\version \"([^\"]*)\".*$//;
	if (defined ($1)) {
	    print STDERR "Guessing version: ", $1, ".. ";
	    $ver = $1;
	    last;
	}
    }
    die "can't determine mudela version." unless (defined($ver));
    $ver =~ s/0\.0\.// ;
    close INLY;
    return $ver;
}   

sub  set_files 
{
    $infile = "-";
    $outfile = "-";
    $outfile = $opt_output if (defined($opt_output));

    if ($ARGV [0])  {
	$infile = $ARGV[0];
    } 
    if (( ! -f $infile) && (! $infile =~ /\\.ly$/s ) ){
	$infile .= ".ly";
	print STDERR "trying $infile";

    }
    if ($opt_edit && $infile ne "-") {
	$opt_edit = 1;
	$outfile = "$infile.NEW";
	$infile = "$infile";
    }
}

GetOptions ("output=s", "from=i", "to=i", "minor=i", "edit", "show-rules");

if ($opt_show_rules) { 
    show_rules ;
    $opt_show_rules = 0;	# to extinguish typo check.
    exit 0;
}

local ( $infile,$outfile);
set_files;


($opt_from = set_auto_from $infile) unless defined($opt_from);

my @v = versions;
($opt_to =  pop @v) unless (defined($opt_to));


die "can't open \`$infile\'" unless open INLY,$infile ;
die "can't open \`$outfile\'" unless open OUTLY, ">$outfile";

do_conversion $opt_from, $opt_to;
close INLY;
close OUTLY;

if ($opt_edit) {
    rename $infile, "$infile~";
    rename $outfile, "$infile";
}

