# Makefile.in generated automatically by automake 1.2f from Makefile.am

# Copyright (C) 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

# Generated automatically by wild-perl 0.1
# project  LilyPond -- the musical typesetter # title	   makefile for lilypond
# file	   lily/Makefile.am.wild
#
# Copyright (c) 1997 by
#   	Jan Nieuwenhuizen <jan@digicash.com>
#	Han-Wen Nienhuys <hanwen@stack.nl>
#


SHELL = /bin/sh

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = ..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_alias = @host_alias@
host_triplet = @host@
AGE = @AGE@
AUTOGENERATE = @AUTOGENERATE@
BISON = @BISON@
CC = @CC@
COMPILEINFO = @COMPILEINFO@
CPPFLAGS = @CPPFLAGS@
CURRENT = @CURRENT@
CXX = @CXX@
CXXFLAGS = @CXXFLAGS@
DIR_DATADIR = @DIR_DATADIR@
EXTRA_LIBES = @EXTRA_LIBES@
FIND = @FIND@
FLEX = @FLEX@
ICFLAGS = @ICFLAGS@
ILDFLAGS = @ILDFLAGS@
LD = @LD@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LIBTOOL = @LIBTOOL@
LN = @LN@
LN_S = @LN_S@
MAKE = @MAKE@
MAKEINFO = @MAKEINFO@
MFDIR = @MFDIR@
NM = @NM@
PACKAGE = @PACKAGE@
PERL = @PERL@
POD2HTML = @POD2HTML@
POD2MAN = @POD2MAN@
PYTHON = @PYTHON@
RANLIB = @RANLIB@
REVISION = @REVISION@
TAR = @TAR@
TEXDIR = @TEXDIR@
TEXPREFIX = @TEXPREFIX@
VERSION = @VERSION@
YACC = @YACC@
ZIP = @ZIP@
absolute_builddir = @absolute_builddir@

SUBDIRS = include

bin_PROGRAMS = lilypond

# ignoring wildcards for `lexer.cc'
IGNORE_WILDCARDS=lexer.cc parser.cc# ignoring wildcards for `parser.cc'
IGNORE_WILDCARDS=lexer.cc parser.cc
lilypond_SOURCES = abbrev.cc abbreviation-beam-engraver.cc abbreviation-beam.cc atom.cc audio-column.cc audio-element.cc audio-item.cc audio-staff.cc axis-group-administration.cc axis-group-element.cc axis-group-item.cc axis-group-spanner.cc axis.cc bar-column-grav.cc bar-column.cc bar-grav.cc bar-number-grav.cc bar.cc beam-grav.cc beam-swallow-trans.cc beam.cc bow.cc boxes.cc break-align-item.cc break.cc change-iterator.cc change-translator.cc chord-iterator.cc clef-grav.cc clef-item.cc col-info.cc colhpos.cc collision-grav.cc collision.cc command-request.cc crescendo.cc debug.cc dimen.cc directional-spanner.cc dot-column-grav.cc dot-column.cc dots.cc dynamic-grav.cc engraver-group.cc engraver.cc general-script-def.cc global-translator.cc gourlay-breaking.cc graphical-element.cc grouping.cc head-grav.cc header.cc horizontal-align-item.cc horizontal-group-elem.cc horizontal-group-item.cc horizontal-vertical-group-elem.cc horizontal-vertical-group-item.cc idealspacing.cc identifier.cc ineq-constrained-qp.cc item.cc key-grav.cc key-item.cc key-performer.cc key.cc keyword.cc leastsquares.cc lexerinit.cc lily-version.cc line-group-grav.cc line-spacer.cc linear-programming.cc local-key-grav.cc local-key-item.cc lookup.cc lyric-grav.cc lyric-performer.cc main.cc meter-grav.cc meter-performer.cc meter.cc midi-def.cc midi-item.cc midi-stream.cc midi-walker.cc misc.cc molecule.cc music-iterator.cc music-list.cc music-output-def.cc music.cc musical-request.cc my-lily-lexer.cc my-lily-parser.cc note-column.cc note-head.cc note-performer.cc note.cc notename-table.cc offset.cc outputter.cc p-col.cc p-score.cc paper-def.cc performance.cc performer-group-performer.cc performer.cc pitch-squash-grav.cc plet-engraver.cc plet-spanner.cc plet-swallow-engraver.cc priority-halign-grav.cc property-iterator.cc ps-plet.cc qlp.cc qlpsolve.cc request-iterator.cc request.cc rest-collision-grav.cc rest-collision.cc rest-grav.cc rest.cc rhythmic-column-grav.cc rhythmic-head.cc rod.cc score-bar.cc score-column.cc score-elem-info.cc score-elem.cc score-grav.cc score-performer.cc score-priority-grav.cc score.cc scoreline.cc scores.cc script-column.cc script-def.cc script-grav.cc script.cc separating-group-spanner.cc separating-line-group-grav.cc single-malt-grouping-item.cc slur-grav.cc slur.cc span-bar-grav.cc span-bar.cc span-score-bar-grav.cc span-score-bar.cc spanner.cc spring-spacer.cc staff-info.cc staff-performer.cc staff-side.cc staff-sym-grav.cc staff-sym.cc stem-grav.cc stem-info.cc stem.cc super-elem.cc swallow-grav.cc swallow-perf.cc symtable.cc template1.cc template2.cc template3.cc template4.cc template5.cc template6.cc template7.cc template8.cc tex-beam.cc tex-slur.cc tex-stream.cc tex.cc text-def.cc text-item.cc text-spanner.cc tie-grav.cc tie.cc time-description.cc timing-grav.cc timing-translator.cc translation-property.cc translator-ctors.cc translator-group.cc translator.cc type-swallow-trans.cc version.cc vertical-align-elem.cc vertical-align-grav.cc vertical-align-spanner.cc vertical-group-elem.cc vertical-group-spanner.cc voice-iterator.cc warn.cc word-wrap.cc lexer.ll parser.yy

# howto do this? info is not all that clear...
# OMIT_DEPENDENCIES = lexer.cc parser.cc
# lilypond_OMIT_DEPENDENCIES = lexer.cc parser.cc
# lilypondOMIT_DEPENDENCIES = lexer.cc parser.cc

noinst_HEADERS = parser.hh

#lilypond_LDADD = -llily -lflower @LEXLIB@
lilypond_LDADD = $(top_builddir)/lib/liblily.la $(top_builddir)/flower/libflower.la @LEXLIB@

lilypond_LDFLAGS = -L$(absolute_builddir)/lib/.libs -L$(absolute_builddir)/flower/.libs

INCLUDES =  -I$(top_srcdir)/lily/include -I$(top_srcdir)/lib/include -I$(top_srcdir)/flower/include 

EXTRA_DIST = Makefile.am.wild GNUmakefile Stable.make VERSION
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = ../flower/config.hh
CONFIG_CLEAN_FILES = 
PROGRAMS =  $(bin_PROGRAMS)


DEFS = @DEFS@ -I. -I$(srcdir) -I../flower
LIBS = @LIBS@
lilypond_OBJECTS =  abbrev.o abbreviation-beam-engraver.o \
abbreviation-beam.o atom.o audio-column.o audio-element.o audio-item.o \
audio-staff.o axis-group-administration.o axis-group-element.o \
axis-group-item.o axis-group-spanner.o axis.o bar-column-grav.o \
bar-column.o bar-grav.o bar-number-grav.o bar.o beam-grav.o \
beam-swallow-trans.o beam.o bow.o boxes.o break-align-item.o break.o \
change-iterator.o change-translator.o chord-iterator.o clef-grav.o \
clef-item.o col-info.o colhpos.o collision-grav.o collision.o \
command-request.o crescendo.o debug.o dimen.o directional-spanner.o \
dot-column-grav.o dot-column.o dots.o dynamic-grav.o engraver-group.o \
engraver.o general-script-def.o global-translator.o gourlay-breaking.o \
graphical-element.o grouping.o head-grav.o header.o \
horizontal-align-item.o horizontal-group-elem.o horizontal-group-item.o \
horizontal-vertical-group-elem.o horizontal-vertical-group-item.o \
idealspacing.o identifier.o ineq-constrained-qp.o item.o key-grav.o \
key-item.o key-performer.o key.o keyword.o leastsquares.o lexerinit.o \
lily-version.o line-group-grav.o line-spacer.o linear-programming.o \
local-key-grav.o local-key-item.o lookup.o lyric-grav.o \
lyric-performer.o main.o meter-grav.o meter-performer.o meter.o \
midi-def.o midi-item.o midi-stream.o midi-walker.o misc.o molecule.o \
music-iterator.o music-list.o music-output-def.o music.o \
musical-request.o my-lily-lexer.o my-lily-parser.o note-column.o \
note-head.o note-performer.o note.o notename-table.o offset.o \
outputter.o p-col.o p-score.o paper-def.o performance.o \
performer-group-performer.o performer.o pitch-squash-grav.o \
plet-engraver.o plet-spanner.o plet-swallow-engraver.o \
priority-halign-grav.o property-iterator.o ps-plet.o qlp.o qlpsolve.o \
request-iterator.o request.o rest-collision-grav.o rest-collision.o \
rest-grav.o rest.o rhythmic-column-grav.o rhythmic-head.o rod.o \
score-bar.o score-column.o score-elem-info.o score-elem.o score-grav.o \
score-performer.o score-priority-grav.o score.o scoreline.o scores.o \
script-column.o script-def.o script-grav.o script.o \
separating-group-spanner.o separating-line-group-grav.o \
single-malt-grouping-item.o slur-grav.o slur.o span-bar-grav.o \
span-bar.o span-score-bar-grav.o span-score-bar.o spanner.o \
spring-spacer.o staff-info.o staff-performer.o staff-side.o \
staff-sym-grav.o staff-sym.o stem-grav.o stem-info.o stem.o \
super-elem.o swallow-grav.o swallow-perf.o symtable.o template1.o \
template2.o template3.o template4.o template5.o template6.o template7.o \
template8.o tex-beam.o tex-slur.o tex-stream.o tex.o text-def.o \
text-item.o text-spanner.o tie-grav.o tie.o time-description.o \
timing-grav.o timing-translator.o translation-property.o \
translator-ctors.o translator-group.o translator.o type-swallow-trans.o \
version.o vertical-align-elem.o vertical-align-grav.o \
vertical-align-spanner.o vertical-group-elem.o vertical-group-spanner.o \
voice-iterator.o warn.o word-wrap.o lexer.o parser.o
lilypond_DEPENDENCIES =  $(top_builddir)/lib/liblily.la \
$(top_builddir)/flower/libflower.la
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LEXLIB = @LEXLIB@
CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS)
CXXLINK = $(LIBTOOL) --mode=link $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
LINK = $(LIBTOOL) --mode=link $(CC) $(CFLAGS) $(LDFLAGS) -o $@
HEADERS =  $(noinst_HEADERS)

DIST_COMMON =  Makefile.am Makefile.in lexer.cc parser.cc


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

GZIP = --best
SOURCES = $(lilypond_SOURCES)
OBJECTS = $(lilypond_OBJECTS)

default: all

.SUFFIXES:
.SUFFIXES: .S .c .cc .ll .lo .o .s .yy
$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOMAKE) --gnu --include-deps lily/Makefile

Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-binPROGRAMS:

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

distclean-binPROGRAMS:

maintainer-clean-binPROGRAMS:

install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(bindir)/`echo $$p|sed '$(transform)'`"; \
	    $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(bindir)/`echo $$p|sed '$(transform)'`; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	list='$(bin_PROGRAMS)'; for p in $$list; do \
	  rm -f $(bindir)/`echo $$p|sed '$(transform)'`; \
	done

.c.o:
	$(COMPILE) -c $<

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.c.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

lilypond: $(lilypond_OBJECTS) $(lilypond_DEPENDENCIES)
	@rm -f lilypond
	$(CXXLINK) $(lilypond_LDFLAGS) $(lilypond_OBJECTS) $(lilypond_LDADD) $(LIBS)
.yy.cc:
	$(YACC) $(YFLAGS) $< && mv y.tab.c $*.cc
	if test -f y.tab.h; then \
	if cmp -s y.tab.h $*.h; then rm -f y.tab.h; else mv y.tab.h $*.h; fi; \
	else :; fi
parser.hh: parser.cc

.ll.cc:
	$(LEX) $(LFLAGS) $< && mv $(LEX_OUTPUT_ROOT).c $@
.cc.o:
	$(CXXCOMPILE) -c $<
.cc.lo:
	$(LTCXXCOMPILE) -c $<

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.

@SET_MAKE@

all-recursive install-data-recursive install-exec-recursive \
installdirs-recursive install-recursive uninstall-recursive  \
check-recursive installcheck-recursive info-recursive dvi-recursive:
	@set fnord $(MAKEFLAGS); amf=$$2; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  target=`echo $@ | sed s/-recursive//`; \
	  echo "Making $$target in $$subdir"; \
	  (cd $$subdir && $(MAKE) $$target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@set fnord $(MAKEFLAGS); amf=$$2; \
	rev=''; list='$(SUBDIRS)'; for subdir in $$list; do \
	  rev="$$subdir $$rev"; \
	done; \
	for subdir in $$rev; do \
	  target=`echo $@ | sed s/-recursive//`; \
	  echo "Making $$target in $$subdir"; \
	  (cd $$subdir && $(MAKE) $$target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  (cd $$subdir && $(MAKE) tags); \
	done

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $(SOURCES) $(HEADERS) $(LISP)

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test -f $$subdir/TAGS && tags="$$tags -i $$here/$$subdir/TAGS"; \
	done; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = lily

distdir: $(DISTFILES)
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  test -f $(distdir)/$$file \
	  || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	  || cp -p $$d/$$file $(distdir)/$$file; \
	done
	for subdir in $(SUBDIRS); do \
	  test -d $(distdir)/$$subdir \
	  || mkdir $(distdir)/$$subdir \
	  || exit 1; \
	  chmod 777 $(distdir)/$$subdir; \
	  (cd $$subdir && $(MAKE) top_distdir=../$(top_distdir) distdir=../$(distdir)/$$subdir distdir) \
	    || exit 1; \
	done
local-key-grav.o: local-key-grav.cc include/musical-request.hh \
	include/lily-proto.hh ../lib/include/proto.hh \
	../flower/include/fproto.hh ../flower/include/real.hh \
	include/request.hh ../flower/include/string.hh \
	../flower/include/arithmetic-operator.hh \
	../flower/include/string-handle.hh \
	../flower/include/international.hh ../flower/include/compare.hh \
	../lib/include/moment.hh ../flower/include/rational.hh \
	../flower/include/virtual-methods.hh ../lib/include/input.hh \
	include/music.hh include/minterval.hh \
	../flower/include/interval.hh include/direction.hh \
	../lib/include/duration.hh ../lib/include/plet.hh \
	include/command-request.hh ../flower/include/varray.hh \
	include/local-key-grav.hh include/engraver.hh \
	include/score-elem-info.hh ../flower/include/scalar.hh \
	include/staff-info.hh include/translator.hh \
	../flower/include/dictionary.hh ../flower/include/assoc.hh \
	../flower/include/parray.hh include/key.hh \
	include/local-key-item.hh include/item.hh include/boxes.hh \
	include/offset.hh include/axes.hh include/score-elem.hh \
	../flower/include/directed-graph.hh \
	include/graphical-element.hh include/drul-array.hh \
	include/key-grav.hh include/debug.hh \
	../flower/include/dstream.hh ../lib/include/warn.hh \
	include/key-item.hh include/tie.hh include/bow.hh \
	include/directional-spanner.hh include/spanner.hh \
	include/rod.hh include/note-head.hh include/rhythmic-head.hh \
	include/time-description.hh include/engraver-group.hh \
	../flower/include/plist.hh ../flower/include/list.hh \
	../flower/include/list.icc ../flower/include/cursor.hh \
	../flower/include/link.hh ../flower/include/link.icc \
	../flower/include/pcursor.hh ../flower/include/cursor.icc \
	../flower/include/iterate.hh ../flower/include/plist.icc \
	include/translator-group.hh
meter-grav.o: meter-grav.cc include/meter-grav.hh include/engraver.hh \
	include/lily-proto.hh ../lib/include/proto.hh \
	../flower/include/fproto.hh ../flower/include/real.hh \
	../flower/include/varray.hh include/request.hh \
	../flower/include/string.hh \
	../flower/include/arithmetic-operator.hh \
	../flower/include/string-handle.hh \
	../flower/include/international.hh ../flower/include/compare.hh \
	../lib/include/moment.hh ../flower/include/rational.hh \
	../flower/include/virtual-methods.hh ../lib/include/input.hh \
	include/music.hh include/minterval.hh \
	../flower/include/interval.hh include/direction.hh \
	include/score-elem-info.hh ../flower/include/scalar.hh \
	include/staff-info.hh include/translator.hh \
	../flower/include/dictionary.hh ../flower/include/assoc.hh \
	../flower/include/parray.hh include/time-description.hh \
	include/grouping.hh include/meter.hh include/item.hh \
	include/boxes.hh include/offset.hh include/axes.hh \
	include/score-elem.hh ../flower/include/directed-graph.hh \
	include/graphical-element.hh include/drul-array.hh \
	include/command-request.hh ../lib/include/duration.hh \
	../lib/include/plet.hh include/timing-grav.hh \
	include/timing-translator.hh include/engraver-group.hh \
	../flower/include/plist.hh ../flower/include/list.hh \
	../flower/include/list.icc ../flower/include/cursor.hh \
	../flower/include/link.hh ../flower/include/link.icc \
	../flower/include/pcursor.hh ../flower/include/cursor.icc \
	../flower/include/iterate.hh ../flower/include/plist.icc \
	include/translator-group.hh
spring-spacer.o: spring-spacer.cc include/spring-spacer.hh \
	include/line-spacer.hh include/lily-proto.hh \
	../lib/include/proto.hh ../flower/include/fproto.hh \
	../flower/include/real.hh ../flower/include/varray.hh \
	../flower/include/vector.hh ../flower/include/interval.hh \
	../flower/include/compare.hh ../flower/include/plist.hh \
	../flower/include/list.hh ../flower/include/list.icc \
	../flower/include/cursor.hh ../flower/include/link.hh \
	../flower/include/link.icc ../flower/include/pcursor.hh \
	../flower/include/cursor.icc ../flower/include/iterate.hh \
	../flower/include/plist.icc include/col-info.hh \
	../flower/include/pointer.hh ../flower/include/assoc.hh \
	include/colhpos.hh ../lib/include/moment.hh \
	../flower/include/rational.hh \
	../flower/include/arithmetic-operator.hh include/p-col.hh \
	include/horizontal-group-item.hh \
	include/horizontal-group-elem.hh include/axis-group-element.hh \
	include/score-elem.hh ../flower/include/parray.hh \
	../flower/include/virtual-methods.hh \
	../flower/include/directed-graph.hh \
	include/graphical-element.hh include/offset.hh include/axes.hh \
	../flower/include/string.hh ../flower/include/string-handle.hh \
	../flower/include/international.hh \
	include/axis-group-administration.hh include/axis-group-item.hh \
	include/item.hh include/boxes.hh include/drul-array.hh \
	include/direction.hh include/rod.hh include/debug.hh \
	../flower/include/dstream.hh ../lib/include/warn.hh \
	include/qlp.hh include/ineq-constrained-qp.hh \
	../flower/include/matrix.hh ../flower/include/matrix-storage.hh \
	../flower/include/unionfind.hh include/idealspacing.hh \
	../flower/include/pointer.tcc include/score-column.hh \
	include/paper-def.hh include/music-output-def.hh \
	../flower/include/dictionary.hh include/dimen.hh \
	include/main.hh

info: info-recursive
dvi: dvi-recursive
check: all-am
	$(MAKE) check-recursive
installcheck: installcheck-recursive
all-am: Makefile $(PROGRAMS) $(HEADERS)

install-exec-am: install-binPROGRAMS

uninstall-am: uninstall-binPROGRAMS

install-exec: install-exec-recursive install-exec-am
	@$(NORMAL_INSTALL)

install-data: install-data-recursive
	@$(NORMAL_INSTALL)

install: install-recursive install-exec-am
	@:

uninstall: uninstall-recursive uninstall-am

all: all-recursive all-am

install-strip:
	$(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' INSTALL_SCRIPT='$(INSTALL_PROGRAM)' install
installdirs: installdirs-recursive
	$(mkinstalldirs)  $(bindir)


mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f Makefile $(DISTCLEANFILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
mostlyclean-am:  mostlyclean-binPROGRAMS mostlyclean-compile \
		mostlyclean-libtool mostlyclean-tags \
		mostlyclean-generic

clean-am:  clean-binPROGRAMS clean-compile clean-libtool clean-tags \
		clean-generic mostlyclean-am

distclean-am:  distclean-binPROGRAMS distclean-compile distclean-libtool \
		distclean-tags distclean-generic clean-am

maintainer-clean-am:  maintainer-clean-binPROGRAMS \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-tags maintainer-clean-generic \
		distclean-am

mostlyclean:  mostlyclean-recursive mostlyclean-am

clean:  clean-recursive clean-am

distclean:  distclean-recursive distclean-am distclean-local
	-rm -f config.status
	-rm -f libtool

maintainer-clean:  maintainer-clean-recursive maintainer-clean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

.PHONY: default mostlyclean-binPROGRAMS distclean-binPROGRAMS \
clean-binPROGRAMS maintainer-clean-binPROGRAMS uninstall-binPROGRAMS \
install-binPROGRAMS mostlyclean-compile distclean-compile clean-compile \
maintainer-clean-compile mostlyclean-libtool distclean-libtool \
clean-libtool maintainer-clean-libtool install-data-recursive \
uninstall-data-recursive install-exec-recursive \
uninstall-exec-recursive installdirs-recursive uninstalldirs-recursive \
all-recursive check-recursive installcheck-recursive info-recursive \
dvi-recursive mostlyclean-recursive distclean-recursive clean-recursive \
maintainer-clean-recursive tags tags-recursive mostlyclean-tags \
distclean-tags clean-tags maintainer-clean-tags distdir info dvi \
installcheck all-am install-exec-am uninstall-am install-exec \
install-data install uninstall all installdirs mostlyclean-generic \
distclean-generic clean-generic maintainer-clean-generic clean \
mostlyclean distclean maintainer-clean


# force these: Make can't know these have to be generated in advance
my-lily-lexer.cc: parser.hh
lexer.cc: parser.hh

# ugh, autoconf assumes to get $(LEX_OUTPUT_ROOT).c ...
.ll.cc:
	@echo "must override autoconf; ignore warning"
	$(LEX) $(LFLAGS) $< && mv $(LEX_OUTPUT_ROOT).cc $@
#.yy.hh:
parser.hh: parser.yy
	$(BISON) -d $<
	mv $<.tab.h $@
	mv $<.tab.c $(shell basename $@ .hh).cc

distclean-local:
	-rm -rf .deps

# override default target for all-am: to get an extra dependency
all-am: Makefile $(PROGRAMS) wild-check

# dummy target for non-GNU makes; is overridden in GNUmakefile
wild-check:

# dummy target for non-GNU makes; is overridden in GNUmakefile
make-in-build:
$(srcdir)/Makefile.am: $(srcdir)/Makefile.am.wild
	$(PERL) $(top_srcdir)/bin/wild-perl < $< > $@

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
