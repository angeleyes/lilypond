/*
  translator.icc -- declare Translator glue wiring.

  source file of the GNU LilyPond music typesetter

  (c) 2005 Han-Wen Nienhuys <hanwen@xs4all.nl>

*/

#ifndef TRANSLATOR_ICC
#define TRANSLATOR_ICC

/**
   A macro to automate administration of translators.
*/
#define ADD_THIS_TRANSLATOR(T)						\
  SCM T::static_description_ = SCM_EOL;					\
  static void _ ## T ## _adder ()					\
  {									\
    T *t = new T;							\
    T::static_description_ = t->static_translator_description ();	\
    scm_permanent_object (T::static_description_);			\
    add_translator (t);							\
  }									\
  SCM T::translator_description () const				\
  {									\
    return static_description_;						\
  }									\
  ADD_GLOBAL_CTOR (_ ## T ## _adder);

#define ADD_TRANSLATOR(classname, desc, grobs, accepted, acked, read, write) \
  DEFINE_STATIC_METHODS(classname);\
  IMPLEMENT_FETCH_PRECOMPUTABLE_METHODS(classname); \
  ADD_THIS_TRANSLATOR (classname);					\
  SCM									\
  classname::static_translator_description () const			\
  {									\
    SCM static_properties = SCM_EOL;					\
    /*  static_properties = acons (name , gh_str02scm (Translator::name (self_scm ())),	\
	static_properties_);						\
    */									\
    static_properties = scm_acons (ly_symbol2scm ("grobs-created"),	\
				   parse_symbol_list (grobs), static_properties); \
									\
    static_properties = scm_acons (ly_symbol2scm ("description"),	\
				   scm_makfrom0str (desc), static_properties); \
									\
    static_properties = scm_acons (ly_symbol2scm ("interfaces-acked"),	\
				   parse_symbol_list (acked), static_properties); \
    static_properties = scm_acons (ly_symbol2scm ("events-accepted"),	\
				   parse_symbol_list (accepted), static_properties); \
									\
    static_properties = scm_acons (ly_symbol2scm ("properties-read"),	\
				   parse_symbol_list (read), static_properties); \
									\
    static_properties = scm_acons (ly_symbol2scm ("properties-written"), \
				   parse_symbol_list (write), static_properties); \
									\
    return static_properties;						\
  }


/*
  FIXME: should be able to cast statically to (T*) -iow.- remove
  Translator as a virtual base class.
 */
#define DEFINE_STATIC_METHOD(T, x) \
void \
T::x ## _static (Translator* tr) \
{ \
  T * t_ptr = (T*) (tr);	\
  t_ptr->x ();\
}

#define DEFINE_STATIC_METHODS(T) \
  DEFINE_STATIC_METHOD(T,start_translation_timestep)\
  DEFINE_STATIC_METHOD(T,stop_translation_timestep)\
  DEFINE_STATIC_METHOD(T,process_music)\
  DEFINE_STATIC_METHOD(T,process_acknowledged)

#define IMPLEMENT_FETCH_PRECOMPUTABLE_METHODS(T) \
void \
T::fetch_precomputable_methods (Translator_void_method_ptr ptrs[])\
{									\
  ptrs[START_TRANSLATION_TIMESTEP] =					\
    ((Translator_void_method_ptr) &T::start_translation_timestep == \
     (Translator_void_method_ptr) &Translator::start_translation_timestep)	\
    ? 0									\
    : &T::start_translation_timestep_static;				\
									\
  ptrs[STOP_TRANSLATION_TIMESTEP] =					\
    ((Translator_void_method_ptr) &T::stop_translation_timestep == (Translator_void_method_ptr) &Translator::stop_translation_timestep) \
    ? 0									\
    : &T::stop_translation_timestep_static;				\
									\
  ptrs[PROCESS_MUSIC] =							\
    ((Translator_void_method_ptr) &T::process_music == (Translator_void_method_ptr) &Translator::process_music)			\
    ? 0									\
    : &T::process_music_static;						\
									\
  ptrs[PROCESS_ACKNOWLEDGED] =						\
    ((Translator_void_method_ptr) &T::process_acknowledged == (Translator_void_method_ptr) &Translator::process_acknowledged)	\
    ? 0									\
    : &T::process_acknowledged_static;						\
}


#endif /* TRANSLATOR_ICC */

