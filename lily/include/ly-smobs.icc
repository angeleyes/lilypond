/*   
  ly-smobs.icc -- implement smob glue. 
  
  source file of the GNU LilyPond music typesetter
  
  (c) 1999--2000 Han-Wen Nienhuys <hanwen@cs.uu.nl>
  
 */

#ifndef LY_SMOBS_ICC
#define LY_SMOBS_ICC

#include "smobs.hh"


#define IMPLEMENT_UNSMOB(CL, name)		\
CL *						\
unsmob_ ## name ( SCM s)			\
{						\
return  CL::unsmob (s);				\
}


#ifndef SCM_CELL_TYPE
#define SCM_CELL_TYPE(X) SCM_CAR(X)
#endif

#ifndef SCM_CELL_WORD_1
#define SCM_CELL_WORD_1(X) SCM_CDR(X)
#endif


#define IMPLEMENT_SIMPLE_SMOBS(CL)				\
long CL::smob_tag_;						\
void								\
CL::init_smobs ()						\
{								\
  smob_tag_ = scm_make_smob_type_mfpe (				\
     #CL, 0, CL::mark_smob, CL::free_smob, CL::print_smob, 0);	\
}								\
SCM CL::smobbed_self () const					\
{								\
  SCM s;							\
  s = gh_cons (SCM_PACK(CL::smob_tag_), SCM_PACK(this));	\
  scm_done_malloc(sizeof(CL));					\
								\
  return s;							\
}								\
CL *								\
CL::unsmob (SCM s)						\
{								\
  if (SCM_NIMP(s) && SCM_CELL_TYPE(s) == smob_tag_)		\
    return (CL*) SCM_CELL_WORD_1(s);				\
  else								\
    return 0;							\
}								\
scm_sizet							\
CL::free_smob (SCM ses)						\
{								\
  CL * s = (CL*) SCM_CDR(ses);					\
   delete s;							\
  return sizeof (CL);						\
}								\
ADD_SCM_INIT_FUNC(CL, CL::init_smobs)

#define IMPLEMENT_SMOBS(CL)							\
IMPLEMENT_SIMPLE_SMOBS(CL)							\
SCM										\
CL::smobify_self ()								\
{										\
  /*										\
    This is local. We don't assign to self_scm_ directly, to assure		\
    that S isn't GC-ed from under us.						\
										\
    We don't use smobbed_self () to ensure that mark_smob () doesn't have to	\
    deal half-initialized objects: scm_done_malloc( ) might trigger GC.		\
    the warning in smobs.hh is just to be doubleplus goodly sure		\
   */										\
  SCM s;										\
  SCM_NEWCELL(s);								\
  SCM_SETCAR(s,CL::smob_tag_);							\
  SCM_SETCDR (s, SCM_PACK(this));						\
  self_scm_ = s;								\
 scm_done_malloc(sizeof(CL));							\
  scm_protect_object (s);							\
  return s;									\
}

#define IMPLEMENT_DEFAULT_EQUAL_P(CL)		\
SCM						\
CL::equal_p (SCM a , SCM b)			\
{						\
  return a == b ? SCM_BOOL_T : SCM_BOOL_F;	\
}


#endif /* LY_SMOBS_ICC */


