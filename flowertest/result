constructors
hai
10
0.0132

c
cmp ('', '/'): 1
compares: 

a
abc
abcd
zxy
hay = "foobarbazblub" len=13
index_i ('b') b= 3
last_index_i ('b') b= 12
index_i ("bar"): 3
index_any ("bar"): b: 3
 left_str (-1): 
 right_str (-1): 
 left_str (0): 
 right_str (0): 
 left_str (1): h
 right_str (1): i
 left_str (2): ha
 right_str (2): ai
 left_str (3): hai
 right_str (3): hai
 left_str (4): hai
 right_str (4): hai
blonde haren
mid (2,6)=onde h
nomid (2,6)=blaren
hai
left
hai daar
Hallo daaR!
up: HALLO DAAR! down: hallo daar!
`Hallo daaR!' is not empty
`' is empty
ff
-1:ff
1/4 3/2 1/2
3/4 9/4 2
infinityinf * rinfinityinf * inf infinityinf + rinfinity-i: -infinity
i >? -i: infinity
i >? r: infinity
i <? r: 1/4
one/Rational (4): 1/4
one + one/Rational (4): 5/4
nul: 1/4
nul: -1/4
Rational (1,128) + Rational (1919,128): 15
adding: 180428
adding: 84693
adding: 168169
adding: 171463
adding: 195774
adding: 42423
adding: 71988
adding: 164976
adding: 59651
adding: 118964
getting : 42423
getting : 59651
getting : 71988
getting : 84693
getting : 118964
getting : 164976
getting : 168169
getting : 171463
getting : 180428
getting : 195774
v: vector [0.000000 1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 ]m: matrix { (Full_storage)
0.000000 1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 
1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 10.000000 
2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 10.000000 11.000000 
3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 10.000000 11.000000 12.000000 
4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 10.000000 11.000000 12.000000 13.000000 
5.000000 6.000000 7.000000 8.000000 9.000000 10.000000 11.000000 12.000000 13.000000 14.000000 
6.000000 7.000000 8.000000 9.000000 10.000000 11.000000 12.000000 13.000000 14.000000 15.000000 
7.000000 8.000000 9.000000 10.000000 11.000000 12.000000 13.000000 14.000000 15.000000 16.000000 
8.000000 9.000000 10.000000 11.000000 12.000000 13.000000 14.000000 15.000000 16.000000 17.000000 
9.000000 10.000000 11.000000 12.000000 13.000000 14.000000 15.000000 16.000000 17.000000 18.000000 
}
q: matrix { (Full_storage)
0.000000 -1.000000 -2.000000 -3.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
1.000000 0.000000 -1.000000 -2.000000 -3.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
2.000000 1.000000 0.000000 -1.000000 -2.000000 -3.000000 0.000000 0.000000 0.000000 0.000000 
3.000000 2.000000 1.000000 0.000000 -1.000000 -2.000000 -3.000000 0.000000 0.000000 0.000000 
0.000000 3.000000 2.000000 1.000000 0.000000 -1.000000 -2.000000 -3.000000 0.000000 0.000000 
0.000000 0.000000 3.000000 2.000000 1.000000 0.000000 -1.000000 -2.000000 -3.000000 0.000000 
0.000000 0.000000 0.000000 3.000000 2.000000 1.000000 0.000000 -1.000000 -2.000000 -3.000000 
0.000000 0.000000 0.000000 0.000000 3.000000 2.000000 1.000000 0.000000 -1.000000 -2.000000 
0.000000 0.000000 0.000000 0.000000 0.000000 3.000000 2.000000 1.000000 0.000000 -1.000000 
0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 3.000000 2.000000 1.000000 0.000000 
}
m*q; matrix { (Full_storage)
14.000000 20.000000 25.000000 28.000000 28.000000 28.000000 28.000000 -2.000000 -25.000000 -40.000000 
20.000000 25.000000 28.000000 28.000000 28.000000 28.000000 28.000000 -5.000000 -30.000000 -46.000000 
26.000000 30.000000 31.000000 28.000000 28.000000 28.000000 28.000000 -8.000000 -35.000000 -52.000000 
32.000000 35.000000 34.000000 28.000000 28.000000 28.000000 28.000000 -11.000000 -40.000000 -58.000000 
38.000000 40.000000 37.000000 28.000000 28.000000 28.000000 28.000000 -14.000000 -45.000000 -64.000000 
44.000000 45.000000 40.000000 28.000000 28.000000 28.000000 28.000000 -17.000000 -50.000000 -70.000000 
50.000000 50.000000 43.000000 28.000000 28.000000 28.000000 28.000000 -20.000000 -55.000000 -76.000000 
56.000000 55.000000 46.000000 28.000000 28.000000 28.000000 28.000000 -23.000000 -60.000000 -82.000000 
62.000000 60.000000 49.000000 28.000000 28.000000 28.000000 28.000000 -26.000000 -65.000000 -88.000000 
68.000000 65.000000 52.000000 28.000000 28.000000 28.000000 28.000000 -29.000000 -70.000000 -94.000000 
}
m*m: matrix { (Full_storage)
285.000000 330.000000 375.000000 420.000000 465.000000 510.000000 555.000000 600.000000 645.000000 690.000000 
330.000000 385.000000 440.000000 495.000000 550.000000 605.000000 660.000000 715.000000 770.000000 825.000000 
375.000000 440.000000 505.000000 570.000000 635.000000 700.000000 765.000000 830.000000 895.000000 960.000000 
420.000000 495.000000 570.000000 645.000000 720.000000 795.000000 870.000000 945.000000 1020.000000 1095.000000 
465.000000 550.000000 635.000000 720.000000 805.000000 890.000000 975.000000 1060.000000 1145.000000 1230.000000 
510.000000 605.000000 700.000000 795.000000 890.000000 985.000000 1080.000000 1175.000000 1270.000000 1365.000000 
555.000000 660.000000 765.000000 870.000000 975.000000 1080.000000 1185.000000 1290.000000 1395.000000 1500.000000 
600.000000 715.000000 830.000000 945.000000 1060.000000 1175.000000 1290.000000 1405.000000 1520.000000 1635.000000 
645.000000 770.000000 895.000000 1020.000000 1145.000000 1270.000000 1395.000000 1520.000000 1645.000000 1770.000000 
690.000000 825.000000 960.000000 1095.000000 1230.000000 1365.000000 1500.000000 1635.000000 1770.000000 1905.000000 
}
m: matrix { (Full_storage)
0.000000 1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 
1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 10.000000 
2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 10.000000 11.000000 
3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 10.000000 11.000000 12.000000 
4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 10.000000 11.000000 12.000000 13.000000 
5.000000 6.000000 7.000000 8.000000 9.000000 10.000000 11.000000 12.000000 13.000000 14.000000 
6.000000 7.000000 8.000000 9.000000 10.000000 11.000000 12.000000 13.000000 14.000000 15.000000 
7.000000 8.000000 9.000000 10.000000 11.000000 12.000000 13.000000 14.000000 15.000000 16.000000 
8.000000 9.000000 10.000000 11.000000 12.000000 13.000000 14.000000 15.000000 16.000000 17.000000 
9.000000 10.000000 11.000000 12.000000 13.000000 14.000000 15.000000 16.000000 17.000000 18.000000 
}
q.band 3
q(B): matrix { (Diagonal_storage)
0.000000 -1.000000 -2.000000 -3.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
1.000000 0.000000 -1.000000 -2.000000 -3.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
2.000000 1.000000 0.000000 -1.000000 -2.000000 -3.000000 0.000000 0.000000 0.000000 0.000000 
3.000000 2.000000 1.000000 0.000000 -1.000000 -2.000000 -3.000000 0.000000 0.000000 0.000000 
0.000000 3.000000 2.000000 1.000000 0.000000 -1.000000 -2.000000 -3.000000 0.000000 0.000000 
0.000000 0.000000 3.000000 2.000000 1.000000 0.000000 -1.000000 -2.000000 -3.000000 0.000000 
0.000000 0.000000 0.000000 3.000000 2.000000 1.000000 0.000000 -1.000000 -2.000000 -3.000000 
0.000000 0.000000 0.000000 0.000000 3.000000 2.000000 1.000000 0.000000 -1.000000 -2.000000 
0.000000 0.000000 0.000000 0.000000 0.000000 3.000000 2.000000 1.000000 0.000000 -1.000000 
0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 3.000000 2.000000 1.000000 0.000000 
}
q + q matrix { (Diagonal_storage)
0.000000 -2.000000 -4.000000 -6.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
2.000000 0.000000 -2.000000 -4.000000 -6.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
4.000000 2.000000 0.000000 -2.000000 -4.000000 -6.000000 0.000000 0.000000 0.000000 0.000000 
6.000000 4.000000 2.000000 0.000000 -2.000000 -4.000000 -6.000000 0.000000 0.000000 0.000000 
0.000000 6.000000 4.000000 2.000000 0.000000 -2.000000 -4.000000 -6.000000 0.000000 0.000000 
0.000000 0.000000 6.000000 4.000000 2.000000 0.000000 -2.000000 -4.000000 -6.000000 0.000000 
0.000000 0.000000 0.000000 6.000000 4.000000 2.000000 0.000000 -2.000000 -4.000000 -6.000000 
0.000000 0.000000 0.000000 0.000000 6.000000 4.000000 2.000000 0.000000 -2.000000 -4.000000 
0.000000 0.000000 0.000000 0.000000 0.000000 6.000000 4.000000 2.000000 0.000000 -2.000000 
0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 6.000000 4.000000 2.000000 0.000000 
}
q*q: matrix { (Full_storage)
-14.000000 -8.000000 -2.000000 4.000000 10.000000 12.000000 9.000000 0.000000 0.000000 0.000000 
-8.000000 -15.000000 -10.000000 -5.000000 4.000000 10.000000 12.000000 9.000000 0.000000 0.000000 
-2.000000 -10.000000 -19.000000 -16.000000 -5.000000 4.000000 10.000000 12.000000 9.000000 0.000000 
4.000000 -5.000000 -16.000000 -28.000000 -16.000000 -5.000000 4.000000 10.000000 12.000000 9.000000 
10.000000 4.000000 -5.000000 -16.000000 -28.000000 -16.000000 -5.000000 4.000000 10.000000 12.000000 
12.000000 10.000000 4.000000 -5.000000 -16.000000 -28.000000 -16.000000 -5.000000 4.000000 10.000000 
9.000000 12.000000 10.000000 4.000000 -5.000000 -16.000000 -28.000000 -16.000000 -5.000000 4.000000 
0.000000 9.000000 12.000000 10.000000 4.000000 -5.000000 -16.000000 -19.000000 -10.000000 -2.000000 
0.000000 0.000000 9.000000 12.000000 10.000000 4.000000 -5.000000 -10.000000 -15.000000 -8.000000 
0.000000 0.000000 0.000000 9.000000 12.000000 10.000000 4.000000 -2.000000 -8.000000 -14.000000 
}
red Hilbert  matrix { (Diagonal_storage)
1.000000 0.500000 0.333333 0.250000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
0.500000 0.333333 0.250000 0.200000 0.166667 0.000000 0.000000 0.000000 0.000000 0.000000 
0.333333 0.250000 0.200000 0.166667 0.142857 0.125000 0.000000 0.000000 0.000000 0.000000 
0.250000 0.200000 0.166667 0.142857 0.125000 0.111111 0.100000 0.000000 0.000000 0.000000 
0.000000 0.166667 0.142857 0.125000 0.111111 0.100000 0.090909 0.083333 0.000000 0.000000 
0.000000 0.000000 0.125000 0.111111 0.100000 0.090909 0.083333 0.076923 0.071429 0.000000 
0.000000 0.000000 0.000000 0.100000 0.090909 0.083333 0.076923 0.071429 0.066667 0.062500 
0.000000 0.000000 0.000000 0.000000 0.083333 0.076923 0.071429 0.066667 0.062500 0.058824 
0.000000 0.000000 0.000000 0.000000 0.000000 0.071429 0.066667 0.062500 0.058824 0.055556 
0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.062500 0.058824 0.055556 0.052632 
}
choleski matrix { (Diagonal_storage)
1.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
0.500000 1.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
0.333333 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
0.250000 0.900000 1.500000 1.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
0.000000 2.000000 -4.285714 30.000000 1.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
0.000000 0.000000 22.500000 -213.888889 -4.533714 1.000000 0.000000 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 280.000000 4.505388 -1.431002 1.000000 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.000000 -0.129061 -0.078559 -0.117004 1.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.000000 0.000000 -0.012340 -0.056993 0.571666 1.000000 0.000000 
0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 -0.021092 0.430265 1.115863 1.000000 
}
L^T matrix { (Diagonal_storage)
1.000000 0.500000 0.333333 0.250000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
0.000000 1.000000 1.000000 0.900000 2.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
0.000000 0.000000 1.000000 1.500000 -4.285714 22.500000 0.000000 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 1.000000 30.000000 -213.888889 280.000000 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.000000 1.000000 -4.533714 4.505388 -0.129061 0.000000 0.000000 
0.000000 0.000000 0.000000 0.000000 0.000000 1.000000 -1.431002 -0.078559 -0.012340 0.000000 
0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 1.000000 -0.117004 -0.056993 -0.021092 
0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 1.000000 0.571666 0.430265 
0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 1.000000 1.115863 
0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 1.000000 
}
L * L^Tmatrix { (Full_storage)
1.000000 0.500000 0.333333 0.250000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
0.500000 1.250000 1.166667 1.025000 2.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
0.333333 1.166667 2.111111 2.483333 -2.285714 22.500000 0.000000 0.000000 0.000000 0.000000 
0.250000 1.025000 2.483333 4.122500 25.371429 -180.138889 280.000000 0.000000 0.000000 0.000000 
0.000000 2.000000 -2.285714 25.371429 923.367347 -6517.628952 8404.505387 -0.129061 0.000000 0.000000 
0.000000 0.000000 22.500000 -180.138889 -6517.628952 46276.261351 -59910.746028 0.506565 -0.012340 0.000000 
0.000000 0.000000 0.000000 280.000000 8404.505387 -59910.746028 78423.346283 -0.586054 -0.039335 -0.021092 
0.000000 0.000000 0.000000 0.000000 -0.129061 0.506565 -0.586054 1.036518 0.579304 0.432733 
0.000000 0.000000 0.000000 0.000000 0.000000 -0.012340 -0.039335 0.579304 1.330202 1.363033 
0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 -0.021092 0.432733 1.363033 2.430723 
}
H2^{-1} * H2matrix { (Full_storage)
1.000000 0.000000 -0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 -0.000000 0.000000 
0.000000 1.000000 -0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 -0.000000 0.000000 
0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 0.000000 0.000000 -0.000000 0.000000 
0.000000 0.000000 -0.000000 1.000000 0.000000 0.000000 -0.000000 0.000000 -0.000000 0.000000 
-0.000000 0.000000 -0.000000 0.000000 1.000000 -0.000000 -0.000000 0.000000 -0.000000 0.000000 
-0.000000 0.000000 -0.000000 0.000000 -0.000000 1.000000 -0.000000 -0.000000 0.000000 -0.000000 
0.000000 -0.000000 0.000000 0.000000 -0.000000 -0.000000 1.000000 0.000000 0.000000 0.000000 
-0.000000 -0.000000 0.000000 0.000000 -0.000000 -0.000000 -0.000000 1.000000 -0.000000 0.000000 
-0.000000 -0.000000 0.000000 0.000000 -0.000000 -0.000000 -0.000000 0.000000 1.000000 0.000000 
-0.000000 -0.000000 0.000000 0.000000 -0.000000 -0.000000 -0.000000 0.000000 -0.000000 1.000000 
}
