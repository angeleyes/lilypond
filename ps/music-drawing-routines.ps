%!PS-Adobe-1.0: music-drawing-routines.ps
%
% Functions for direct and embedded PostScript


/pdfmark where
{pop} {userdict /pdfmark /cleartomark load put} ifelse


% llx lly urx ury command
/mark_file_line
{
    /command exch def
    /ury exch def
    /urx exch def
    /lly exch def
    /llx exch def
    [
	/Rect [ llx lly urx ury ]
	/Border [ 0 0 0 0 ]

        /Action
	    <<
		/Subtype /URI
		/URI command
	    >>
        /Subtype /Link
    /ANN
    pdfmark
}
bind def

/set_tex_dimen
{
	cvr def
} bind def



/euclidean_length
{
	1 copy mul exch 1 copy mul add sqrt
} bind def

% FIXME.  translate to middle of box.
% Nice rectangle with rounded corners
/draw_box % breapth width depth height
{
%	currentdict /testing known {
		%% real thin lines for testing
		/blot 0.005 def
%	}{
%		/blot blot-diameter def
%	} ifelse

	0 setlinecap
	blot setlinewidth
	1 setlinejoin

	blot 2 div sub /h exch def
	blot 2 div sub /d exch def
	blot 2 div sub /w exch def
	blot 2 div sub /b exch def

	b neg d neg moveto
	b w add 0 rlineto
	0 d h add rlineto
	b w add neg 0 rlineto
	0 d h add neg rlineto

	currentdict /testing known {
		%% outline only, for testing:
		stroke
	}{
		closepath gsave stroke grestore fill
	} ifelse
} bind def


/draw_round_box % breapth width depth height blot
{
	/blot exch def

	0 setlinecap
	blot setlinewidth
	1 setlinejoin

	blot 2 div sub /h exch def
	blot 2 div sub /d exch def
	blot 2 div sub /w exch def
	blot 2 div sub /b exch def

	b neg d neg moveto
	b w add 0 rlineto
	0 d h add rlineto
	b w add neg 0 rlineto
	0 d h add neg rlineto

	currentdict /testing known {
		%% outline only, for testing:
		stroke
	}{
		closepath gsave stroke grestore fill
	} ifelse
} bind def

% Nice beam with rounded corners
/draw_beam % slope width thick  blot
{
	/blot exch def
	blot setlinewidth

 	0 setlinecap
	1 setlinejoin

	blot sub /t exch def
	blot sub /w exch def
	w mul /h exch def

	blot 2 div t 2 div neg moveto
	w h rlineto
	0 t rlineto
	w neg h neg rlineto
	0 t neg rlineto

	currentdict /testing known {
		%% outline only, for testing:
		stroke
	}{
		closepath gsave stroke grestore fill
	} ifelse
} bind def

/draw_polygon % x(n) y(n) x(n-1) y(n-1) ... x(1) y(1) n blot
{
	/blot exch def

	0 setlinecap
	blot setlinewidth
	1 setlinejoin

	/points exch def
	2 copy
	moveto
	1 1 points {pop lineto} for
	currentdict /testing known {
		%% outline only, for testing:
		stroke
	}{
		closepath gsave stroke grestore fill
	} ifelse
} bind def

/draw_repeat_slash % width slope thick
{
	1 setlinecap
	1 setlinejoin

	/beamthick exch def
	/slope exch def
	/width exch def
	beamthick beamthick slope div euclidean_length
	  /xwid exch def
	0 0 moveto
	xwid 0  rlineto
	width slope width mul rlineto
	xwid neg 0 rlineto
      %  width neg width angle sin mul neg rlineto
	closepath fill
} bind def


/draw_white_text  % text scale font
{
  %font
  findfont
  %scale
  exch scalefont setfont
  1 setgray
  0 0 moveto
  %-0.05 -0.05 moveto
  % text
  show
} bind def

/draw_ez_ball % ch letter_col ball_col font
{
	% font
	findfont 0.7 scalefont setfont
	0.1 setlinewidth
	0 0 moveto
	0 setgray
	0.5 0 0.5 0 360 arc closepath fill stroke
	% ball_col
	1 eq {
		0.01 setlinewidth
		1 setgray
		0.5 0 0.4 0 360 arc closepath
		fill stroke
	} if
	% letter_col
	setgray
	% 0.25 is empiric centering. Change to taste
	0.25 -0.25 moveto
	% ch
	show
} bind def

% Simple, but does it work everywhere?
% Han-Wen reports that one printer (brand?) at cs.uu.nl chokes on this,
% reverted for now -- jcn
%
% The filled circles are drawn by setting the linewidth
% to 2*radius and drawing a point.
/simple_draw_ez_ball % ch letter_col ball_col font
{
	% font
	findfont 0.85 scalefont setfont
	/origin { 0.45 0 } def
	0 setgray
	1.1 setlinewidth
	origin moveto
	origin lineto stroke
	% ball_col
 	setgray
	0.9 setlinewidth
	origin moveto
	origin lineto stroke
	% letter_col
	setgray
	% 0.25 is empiric centering. Change to taste
	origin moveto
	-0.28 -0.30 rmoveto
	% ch
	show
} bind def

% this is for drawing slurs.
/draw_bezier_sandwich  % thickness controls
{
    % round ending and round beginning
    1 setlinejoin 1 setlinecap
	setlinewidth
	moveto
	curveto
	lineto
	curveto
	closepath
	gsave
	fill
	grestore
	stroke
} bind def

/draw_dot % x1 y2 R
{
%	0 360 arc fill stroke
	0 360 arc closepath fill stroke
} bind def

/draw_white_dot % x1 y2 R
{
%	0 360 arc fill stroke
	0 360 arc closepath % fill stroke
gsave
 1 setgray fill
grestore
%	0 360 arc closepath % fill stroke
  0.05 setlinewidth 0 setgray stroke
} bind def

/draw_dashed_line % dash thickness dx dy
{
	1 setlinecap
	1 setlinejoin
	setdash
	setlinewidth
	0 0 moveto
	lineto
	stroke
} bind def

/draw_dashed_slur % dash thickness controls
{
	1 setlinecap
	1 setlinejoin
	setdash
	setlinewidth
	8 -2 roll
	moveto
	curveto
	stroke
} bind def


% a b c d subvec  ==  a-c b-d
/subvec {
  3 2 roll exch sub
  3 1 roll
  sub exch
} bind def


% centre? zzwidth zzheight thickness x0 y0 x1 y1
/draw_zigzag_line {
  newpath
  6 dict begin

  4 2 roll % zzuw zzh th x1 y1 x0 y0
  2 copy
  moveto
  subvec % zzuw zzh th dx dy

  2 copy euclidean_length /l exch def
  l div /uy exch def
  l div /ux exch def
  setlinewidth
  /zzh exch def
  l exch div round /n exch def
  n 0 gt { %if
      /zzw l n 2 mul div def
      {
	  uy zzh mul 2 div ux zzh mul -2 div rmoveto
      } if
      1 1 n {
	  ux zzw mul uy zzh mul sub
	  uy zzw mul ux zzh mul add
	  rlineto
	  ux zzw mul uy zzh mul add
	  uy zzw mul ux zzh mul sub
	  rlineto
      } bind for
  }{ %else
      pop
      ux l mul uy l mul rlineto
  } ifelse
  stroke
 end
} bind def

/bracket_traject
{
	/traject_ds exch def
	/traject_alpha exch def
	traject_ds traject_alpha sin mul add
	exch
	traject_ds traject_alpha cos mul add
	exch
} bind def



/half_bracket
{
%6
	0 0
%5a
	bracket_thick arch_height add half_height arch_thick sub arch_width add
	arch_angle arch_height -0.15 mul bracket_traject
%5b
	bracket_thick 0.5 mul half_height
	0 arch_height 0.5 mul bracket_traject
%5c
	0 half_height
%4a
	bracket_thick half_height arch_thick sub
	0 arch_height 0.4 mul bracket_traject
%4b
	bracket_thick arch_height add half_height arch_thick sub arch_width add
	arch_angle arch_height -0.25 mul bracket_traject
%4c
	bracket_thick arch_height add half_height arch_thick sub arch_width add
%3
	bracket_thick half_height arch_thick sub
%2
	bracket_thick 0
%1
	0 0
} bind def

/draw_half_bracket {
	moveto
	lineto
	lineto
	curveto
	curveto
	lineto
	gsave
	fill
	grestore
} bind def

/draw_bracket % arch_angle arch_width arch_height bracket_height arch_thick bracket_thick
{
	% urg

	/bracket_thick exch def
	/arch_thick exch def
	/bracket_height exch def
	/arch_height exch def
	/arch_width exch def
	/arch_angle exch def

	bracket_height 2 div bracket_thick add /half_height exch def
	bracket_thick 0.5 mul setlinewidth
	1 setlinecap
	1 setlinejoin
	half_bracket
	20 copy
	1 -1 scale
	draw_half_bracket
	stroke
	1 -1 scale
	draw_half_bracket
	stroke
} bind def

%end music-drawing-routines.ps
