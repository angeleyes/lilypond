=head1 NAME

lilypond - the GNU music typesetter

=head1 SYNOPSIS

	lilypond [options] [inputfiles]

=head1 DESCRIPTION

Technically GNU LilyPond is a preprocessor which generates TeX
(or LaTeX) output which contains information to typeset a musical
score. Practically it is a typesetter, which only uses TeX as an
output medium. (this is handy because there exist music fonts for TeX)

As a bonus, you can also output a MIDI file of what you typed.

It translates script files (mudela files or F<*.ly>'s) into TeX input.
Typesetting music is a complex task, whereas the message that printed
music conveys is usually a simple one. GNU LilyPond is a try at providing
a simple interface for setting music.


=head1 OPTIONS

=over 5

=item B<-I,--include>=F<FILE>,

add F<FILE> to the search path for input files.


=item B<-M,--midi>

do midi output only

=item B<-d,--debug>,

Turn debugging info. GNU LilyPond will read the file F<.dstreamrc>, which
tells for what functions and classes may produce copious debugging
output.

=item B<-w,--warranty>,

Show the warranty with which GNU LilyPond comes. (It comes with B<NO
WARRANTY>!)

=item B<-o,--output=>F<FILE>,

Set the default output file to F<FILE>.

=item B<-h,--help>,

Show a summary of usage

=item B<-i,--init=>F<FILE>

set init file to F<FILE> (default: F<symbol.ini>)

=item B<--include, -I>=F<DIRECTORY>
add F<DIRECTORY> to the search path for input files.

=back

=head1 FEATURES

This is an overview of the features that GNU LilyPond supports. For
details on how to use them, you should consult mudela(5)

=over 5

=item *

ASCII script input, with identifiers (for music reuse),
customizable notenames, customizable fontset

=item *

MIDI output lets you check if you have entered the correct notes.

=item *

MIDI to Mudela conversion through the mi2mu program.

=item *

Multiple staffs in one score. Each staff can have a different meters.

=item *

multiple stafftypes (melodic, rhythmic) [broken from  pl28 on]

=item *

beams, slurs, chords, super/subscripts (accents and text), triplets,
general n-plet (triplet, quadruplets, etc.), lyrics, transposition
dynamics (both absolute and hairpin style)

=item *

multiple voices within one staff; beams optionally shared
between voices. Up to four voices is handled cleanly.

=item *

multiple scores within one input file. Each score is output to
a different file.

=item *

clef changes, meter changes, cadenza-mode, key changes, repeat bars

=back

=head1
DISCLAIMER & COPYING POLICY

GNU LilyPond is copyright 1996,97 by its authors. GNU LilyPond is
distributed under the terms of the GNU General Public
License. GNU LilyPond is provided without any warranty what so ever.
GNU LilyPond may be freely distributed.  For further information consult
the GNU General Public License, which is in the file F<COPYING>

=head1 AUTHORS

Please consult the documentation file AUTHORS for more detailed
information, and small contributions. 

=over 4

=item *

Han-Wen Nienhuys <hanwen@stack.nl>, http://www.stack.nl/~hanwen

Main author

=item *

Jan Nieuwenhuizen <jan@digicash.com>,  http://www.digicash.com/~jan.

Context errors, Lyrics, mi2mu, MIDI stuff, make structure, bits of
FlowerLib, general comments, Mudela design.

=back

Your name could be here! If you want to help, then take a look at the
SMALLISH PROJECTS section of in the file F<TODO>. Some do not involve
coding C++

=head1 EXAMPLES

At this time, GNU LilyPond output looks nice, but is not of production
quality. If you're not discouraged; this is what I type in my xterm:

	lilypond someinput.ly
	tex test
	xdvi test&

This is what the output looks like over here:

	hw:~/musix/spacer$ lilypond input/kortjakje.ly
	GNU LilyPond 0.0.52 #1/FlowerLib 1.1.12 #1
	Parsing ... [/home/hw/share/lilypond/init//symbol.ini[
		<lots of stuff deleted>
	][./input/kortjakje.ly]

	Setting up music ...Processing music ...[8][16][24][25]
	Preprocessing ... 
	Calculating column positions ... [3][9][14][18][22][25]
	Postprocessing ...
	TeX output to lelie.out ...

	hw:~/musix/spacer$ tex test
	This is TeX, Version 3.14159 (C version 6.1)
	(/home/hw/lib/texmf/tex/lilypond/test.tex
	Hyphenation patterns for english, dutch, loaded.
	(/home/hw/lib/texmf/tex/lilypond/lilyponddefs.tex) (lelie.out) [1] )
	Output written on test.dvi (1 page, 9180 bytes).
	Transcript written on test.log.

	hw:~/musix/spacer$ xdvi test&
	[1] 855

Check out the input files, some of them have comments


=head1 PROBLEMS

If GNU LilyPond bombs out, then please recompile using with debugging info
turned on, and send a copy of the input which causes the error and a
gdb stacktrace of the crash. It also helps if you can print the values
of the objects. So if your trace is

	(gdb) backtrace 12
	#0  Interval::operator+= (this=0x11fffec60..)
	    at ../flower/interval.hh:50
	#1  0x12005195c in Item::width (this=0x14008a680) at src/item.cc:39
	#2  0x12008fdbc in itemlist_width (its=0x11fffed58 ..
	  :
	  :

Than it would help if you send a dump of the Interval and the Item
(use: C<print *this> or use GNU LilyPond C<print()> methods).

This is a beta version of GNU LilyPond. Please send your helpful comments
and patches to me (see AUTHORS section)

GNU LilyPond is updated very frequently, the latest version is always available at:
ftp://pcnov095.win.tue.nl/pub/lilypond.


=head1 FILES

=over 5

=item F<symbol.ini>

The initialisation file with symbol tables etc. It
includes files from the directory F<init/>.

=back

=head1 ENVIRONMENT

B<LILYINCLUDE> an (one) additional directory for finding lilypond data.

=head1 SEE ALSO

=over 4

=item lilygut(?)

On technical details of LilyPond

=item mudela(5)

On the input format

=item MANIFESTO

Goals of the GNU LilyPond project.

=item The GNU LilyPond FAQ list

=back

GNU LilyPond has her own webpage at
http://www.stack.nl/~hanwen/lilypond/index.html. This webpage contains
the MIDI, GIF and PS files for some standard music files. It also has
the complete LilyPond documentation

=head1  REMARKS

GNU LilyPond has no connection with the music package Rosegarden, other
than the names being similar :-)

=head1 HISTORY

(for a  detailed changelog, see F<NEWS>)

GNU LilyPond's roots lie in MPP, a preprocessor to the rather arcane
MusiXTeX macro package for TeX. A friend of mine, Jan Nieuwenhuizen
wrote the first 44 versions (0.01 to 0.44), then his program caught my
attention, and I was slowly sucked in to the interesting problem of
easily producing beautifully printed music. I contributed some
code. We soon realised that MPP's design was too fundamentally broken
to be repaired. It was decided to rewrite MPP.  We debated a lot about
the requirements to an inputformat (fall 1995). I sat down and started
with a parser-first, bottom-up rewrite called mpp95 (which totally
failed, obviously).

After long and hard thinking, I came up with an algorithm for the
horizontal spacing of multiple staffs (april 1996) I coded it (and did
not test it). After starting with this fundamental piece, I slowly
added the stages which come before spacing, and after.  A half year
later later, I had a first working version, (october 1996).  I
announced Patchlevel 0.0.7 (or 8) to the mutex list after asking some
technical details on spacing; it was downloaded approximately 4 times.
Then I got the hang of it, and in the subsequent two months, I coded
until it had doubled in size (pl 23).
