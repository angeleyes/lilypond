@c -*- coding: utf-8; mode: texinfo; -*-
@ignore
    Translation of GIT committish: 247f8a1d1228a96d597435c721c0b06519b0461c

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  See TRANSLATION for details.
@end ignore

@node Expressive marks
@section Expressive marks

@lilypondfile[quote]{expressive-headword.ly}

@menu
* Attached to notes::           
* Curves::                      
* Lines::                       
@end menu


@node Attached to notes
@subsection Attached to notes


@menu
* Articulations and ornamentations::  
* Dynamics::                    
@end menu

@node Articulations and ornamentations
@subsubsection Articulations and ornamentations

@cindex articulaciones
@cindex guiones
@cindex ornamentos

Un amplio abanico de símbolos pueden aparecer encima o debajo de las
notas para indicar distintas características de la ejecución.  Todos
ellos se pueden adjuntar a una nota utilizando la sintaxis siguiente:
@var{nota}@tie{}@code{\}@var{nombre}.


@c Add a LilyPond example here soon. -pm

La lista de los posibles valores de @var{nombre} está en @ref{List of
articulations}.

@cindex marcato
@cindex apagada
@cindex tenuto
@cindex staccatissimo
@cindex acento
@cindex picado
@cindex staccato
@cindex portato


Algunas de estas articulaciones tienen abreviaturas que facilitan su
escritura.  Las abreviaturas se escriben detrás del nombre de la nota,
y su sintaxis consiste en un guión (@tie{}@code{-}) seguido de un
símbolo que especifica la articulación.  Existen abreviaturas
predefinidas para el @notation{marcato}, @notation{stopped} (nota
apagada), @notation{tenuto}, @notation{staccatissimo},
@notation{accent} (acento), @notation{staccato} (picado), y
@notation{portato}.  La salida correspondiente a estas articulaciones
aparece de la siguiente manera:

@lilypond[verbatim,quote,ragged-right,fragment,relative=2]
c4-^  c-+  c--  c-|
c->   c-.  c-_
@end lilypond

La indicación se coloca automáticamente por encima o por debajo de la
nota, pero la posición también se puede @q{forzar} manualmente para
que esté encima o debajo.  Para ver más detalles, consulte
@ref{Controlling direction and placement}.

@cindex abierta, nota
@cindex acento
@cindex aflautados, tonos
@cindex apagado
@cindex arco abajo
@cindex arco arriba
@cindex calderón
@cindex coda
@cindex downbow
@cindex espressivo
@cindex fermata
@cindex flageolet
@cindex foot marks
@cindex grupeto
@cindex grupeto circular
@cindex grupeto circular invertido
@cindex marcato
@cindex mordent
@cindex open
@cindex pedal, indicaciones de
@cindex portato
@cindex prall
@cindex prallmordent
@cindex prallprall
@cindex pulgar, indicación de
@cindex reverseturn
@cindex segno
@cindex semitrino
@cindex semitrino descendente
@cindex staccatissimo
@cindex staccato
@cindex stopped
@cindex tapada, nota
@cindex tenuto
@cindex thumb marking
@cindex trill
@cindex trino
@cindex turn
@cindex upbow
@cindex varcoda
@cindex órgano, indicaciones de pedal de


@snippets

@c Send these snippets to Valentin for the LSR.

Las abreviaturas se encuentran definidas en el archivo
@file{ly/@/script@/-init@/.ly}, en donde se asigna un valor
predeterminado a las variables @code{dashHat}, @code{dashPlus},
@code{dashDash}, @code{dashBar}, @code{dashLarger}, @code{dashDot} y
@code{dashUnderscore}.  Los valores predeterminados de las
abreviaturas se pueden modificar.  Por ejemplo, para asociar la
abreviatura @code{-+} (@code{dashPlus}) con el símbolo
@notation{trill} en lugar del símbolo predeterminado @notation{+},
asigne el valor @code{trill} a la variable @code{dashPlus}:

@lilypond[verbatim,quote,ragged-right]
\relative c'' { c-+ }
dashPlus = "trill"
\relative c'' { c-+ }
@end lilypond

El orden vertical de las articulaciones se controla con la propiedad
@code{script-priority}.  Cuanto más bajo es esta número, más cerca de
la nota se colocará.  En este ejemplo el @code{TextScript} (el símbolo
de sostenido) tiene primero la prioridad más baja, así que se coloca
en la parte más baja en el primer ejemplo.  En el segundo, el
@notation{semitrino} (el @code{Script}) tiene la prioridad más baja,
por tanto se coloca en el interior.  Cuando dos objetos tienen la
misma prioridad, el orden en que se escriben decide cuál de ellos va
primero.

@lilypond[verbatim,quote,ragged-right,fragment,relative=3]
\once \override TextScript #'script-priority = #-100
a4^\prall^\markup { \sharp }

\once \override Script #'script-priority = #-100
a4^\prall^\markup { \sharp }
@end lilypond


@seealso

Glosario musical: @rglos{marcato}, @rglos{stopped}, @rglos{tenuto},
@rglos{staccatissimo}, @rglos{accent}, @rglos{staccato},
@rglos{portato}.

Fragmentos de código: @lsrdir{Expressive,Expressive-marks}

Referencia de funcionamiento interno: @internalsref{Script},
@internalsref{TextScript}.


@knownissues

Estos signos aparecen en la salida impresa pero no tienen ningún efecto sobre la
representación de MIDI de la música.


@node Dynamics
@subsubsection Dynamics

@cindex dinámica
@funindex \pppp
@funindex \ppp
@funindex \pp
@funindex \p
@funindex \mp
@funindex \mf
@funindex \f
@funindex \ff
@funindex \fff
@funindex \ffff
@funindex \fp
@funindex \sf
@funindex \sff
@funindex \sp
@funindex \spp
@funindex \sfz
@funindex \rfz

Las marcas dinámicas de matiz absoluto se especifican usando un
comando después de una nota: @code{c4\ff}.  Las marcas dinámicas
disponibles son @code{\ppppp}, @code{\pppp}, @code{\ppp}, @code{\pp},
@code{\p}, @code{\mp}, @code{\mf}, @code{\f}, @code{\ff}, @code{\fff},
@code{\ffff}, @code{\fp}, @code{\sf}, @code{\sff}, @code{\sp},
@code{\spp}, @code{\sfz} y @code{\rfz}.  Las indicaciones dinámicas se
pueden colocar por encima o por debajo del pentagrama: para ver más
detalles, consulte @ref{Controlling direction and placement}.

@lilypond[verbatim,quote,ragged-right,fragment,relative=2]
c2\ppp c\mp
c\rfz c^\mf
c_\spp c_\staccato^\ff
@end lilypond

@cindex regulador
@funindex \<
@funindex \>
@funindex \!
@funindex \cr
@funindex \decr

Una indicación de @notation{crescendo} se comienza con @code{\<} y se
termina con @code{\!} o con un matiz absoluto.  Una indicación de
@notation{decrescendo} comienza con @code{\>} y se termina también con
@code{\!}  o con un matiz dinámico absoluto.  Se pueden usar
@code{\cr} y @code{\decr} en lugar de @code{\<} y @code{\>}.  Se
pueden tipografiar bien usando un signo gráfico (un
@notation{regulador}), o con indicaciones textuales.

Debido a que estas marcas se unen a notas, se deben usar notas
espaciadoras si se necesitan varias marcas durante una nota.

@lilypond[verbatim,quote,ragged-right,fragment,relative=2]
c\< c\! d\> e\!
<< f1 { s4 s4\< s4\! \> s4\! } >>
@end lilypond

Esto puede dar lugar a reguladores excesivamente cortos.  Para
alargarlos, utilice por ejemplo @code{minimum-length} dentro de
@internalsref{Voice}.@internalsref{Hairpin}:

@example
\override Voice.Hairpin #'minimum-length = #5
@end example

@noindent
Un @notation{regulador} comienza normalmente en el borde izquierdo de
la nota inicial y acaba en el borde derecho de la nota final.  Si la
nota final cae sobre el principio de un compás, el
@notation{regulador} finaliza en la línea divisoria inmediatamente
anterior.  Esto se puede modificar estableciendo la propiedad
@code{hairpinToBarline}:

@lilypond[verbatim,quote,ragged-right,fragment,relative=2]
e4\< e2. e1\!
\set hairpinToBarline = ##f
e4\< e2. e1\!
@end lilypond

@cindex espressivo, articulación

En algunas situaciones, la marca de articulación @code{\espressivo} puede ser
apropiada para indicar un crescendo y decrescendo sobre una nota,

@lilypond[verbatim,quote,ragged-right,fragment,relative=2]
c2 b4 a g1\espressivo
@end lilypond

@cindex al niente
@cindex niente, al

Los reguladores se pueden imprimir con la punta en círculo (notación
al niente) estableciendo la propiedad @code{circled-tip}:

@lilypond[verbatim,quote,ragged-right,fragment,relative=2]
\override Hairpin #'circled-tip = ##t
c2\< c\!
c4\> c\< c2\!
@end lilypond

@cindex crescendo
@cindex decrescendo
@cindex diminuendo
@funindex \setTextCresc
@funindex \setTextDim
@funindex \setTextDecresc
@funindex \setHairpinCresc
@funindex \setHairpinDim
@funindex \setHairpinDecresc

Puede utilizar textos que digan @emph{cresc.}, @emph{decr.}, o
@emph{dim.} en vez de reguladores mediante las instrucciones
@code{\setTextCresc}, @code{\setTextDim}, and @code{\setTextDecresc}.
Las instrucciones correspondientes @code{\setHairpinCresc},
@code{\setHairpinDim} y @code{\setHairpinDecresc} hacen que vuelvan a
aparecer los reguladores de nuevo:

@lilypond[verbatim,quote,ragged-right,fragment,relative=2]
\setTextCresc
c\< d e f\!
\setHairpinCresc
e\> d c b\!
\setTextDecresc
e\> d e f\!
\setTextDecr
c\> d e f\!
\setTextDim
e\> d c b\!
@end lilypond

Asimismo, puede aportar sus propios textos y modificar el estilo de la
línea extensora con las propiedades @code{\crescendoText} (texto del
crescendo), @code{\crescendoSpanner} (extensor del crescendo),
@code{\decrescendoText} (texto del decrescendo) y
@code{\decrescendoSpanner} (extensor del decrescendo).  Los valores
que se encuentran disponibles para las propiedades del objeto de
extensión son @code{hairpin} (regulador), @code{line} (línea
continua), @code{dashed-line} (línea intermitente) y
@code{dotted-line} (línea de puntos).  Si no tiene ningún valor
establecido, se imprime un regulador:

@lilypond[verbatim,quote,ragged-right,fragment,relative=1]
\set crescendoText = \markup { \italic "cresc. poco" }
\set crescendoSpanner = #'dotted-line
a'2\< a a a a a a a\!\mf
@end lilypond

Para crear nuevas indicaciones dinámicas o texto que se deba alinear
con los matices, consulte @ref{New dynamic marks}.

El posicionamiento vertical de las expresiones dinámicas se gestiona a
través de @internalsref{DynamicLineSpanner}.

@predefined

@funindex \dynamicUp
@code{\dynamicUp},
@funindex \dynamicDown
@code{\dynamicDown},
@funindex \dynamicNeutral
@code{\dynamicNeutral}.


@snippets

Las expresiones dinámicas que suceden en, comienzan sobre, o acaban
en, la misma nota se alinearán verticalmente.  Si quiere asegurar que
las expresiones dinámicas se alinean cuando no suceden sobre la misma
nota, puede aumentar el valor de la propiedad @code{staff-padding}.

@example
\override DynamicLineSpanner #'staff-padding = #4
@end example

@noindent
También puede utilizar esta propiedad si las expresiones dinámicas
colisionan con otros elementos de la notación.

Los crescendi y decrescendi que cruzan un salto de línea continúan en
la siguiente línea.  Si acaban sobre la primera nota de una línea
nueva, no se imprime nada en esa línea.  Para cambiar este
comportamiento, utilice

@example
\override Score.Hairpin #'after-line-breaking = ##t
@end example

Los cambios dinámicos de tipo texto (como @emph{cresc.} y @emph{dim.})
se imprimen con una línea de puntos que muestra su alcance.  Para
evitar que se imprima esta línea, use

@example
\override DynamicTextSpanner #'dash-period = #-1.0
@end example

@seealso

Glosario musical: @rglos{hairpin}, @rglos{crescendo},
@rglos{decrescendo}.

Manual de aprendizaje: @rlearning{Articulation and dynamics}.

Fragmentos de código: @lsrdir{Expressive,Expressive-marks}

Referencia de funcionamiento interno: @internalsref{DynamicText},
@internalsref{Hairpin}.  El posicionamiento vertical de estos símbolos
se maneja por parte de @internalsref{DynamicLineSpanner}.

@node Curves
@subsection Curves

@menu
* Slurs::                       
* Phrasing slurs::              
* Breath marks::                
* Falls and doits::             
@end menu

@node Slurs
@subsubsection Slurs

@cindex ligaduras de expresión

Una @notation{ligadura de expresión} indica que las notas se deben
tocar unidas o @emph{legato}.  Se escriben utilizando paréntesis:

@lilypond[quote,ragged-right,relative=2,fragment,verbatim]
f( g a) a8 b( a4 g2 f4)
<c e>2( <b d>2)
@end lilypond

La dirección de una ligadura de expresión se puede especificar con
@code{\slur@emph{DIRECCIÓN}}, donde @code{@emph{DIRECCIÓN}} es o bien
@code{Up} (arriba), @code{Down} (abajo), o @code{Neutral}
(seleccionada automáticamente).

Sin embargo, hay una forma abreviada muy conveniente para forzar las
direcciones de las ligaduras de expresión.  Escribiendo @code{_} o
@code{^} antes de los paréntesis de apertura, también se establece la dirección.  Por ejemplo,

@lilypond[relative=2,ragged-right,quote,verbatim,fragment]
c4_( c) c^( c)
@end lilypond

Se puede imprimir una sola ligadura cada vez.  Si necesita imprimir
una ligadura larga por encima de varias ligaduras más cortas, consulte @ref{Phrasing slurs}.


@commonprop

Algunos compositores escriben dos ligaduras cuando quieren acordes
legato.  Esto se consigue en LilyPond mediante el establecimiento de @code{doubleSlurs},

@lilypond[verbatim,ragged-right,relative,fragment,quote]
\set doubleSlurs = ##t
<c e>4 ( <d f> <c e> <d f> )
@end lilypond


@predefined

@funindex \slurUp
@code{\slurUp},
@funindex \slurDown
@code{\slurDown},
@funindex \slurNeutral
@code{\slurNeutral},
@funindex \slurDashed
@code{\slurDashed},
@funindex \slurDotted
@code{\slurDotted},
@funindex \slurSolid
@code{\slurSolid}.

@seealso

Referencia del programa: @internalsref{Slur}.


@node Phrasing slurs
@subsubsection Phrasing slurs

@cindex ligaduras de fraseo
@cindex marcas de fraseo

Una ligadura de fraseo (o marca de fraseo) conecta las notas y se
utiliza para indicar una frase musical.  Se escribe usando @code{\(} y
@code{\)} respectivamente

@lilypond[quote,ragged-right,fragment,verbatim,relative=1]
\time 6/4 c'\( d( e) f( e) d\)
@end lilypond

Tipográficamente, la ligadura de fraseo se comporta casi exactamente
igual que una ligadura de expresión normal.  Sin embargo, se tratan
como objetos diferentes.  Una @code{\slurUp} no tendrá ningún efecto sobre una ligadura de fraseo; utilice en su lugar
@code{\phrasingSlurUp}, @code{\phrasingSlurDown}, y
@code{\phrasingSlurNeutral}.

No se pueden tener varias ligaduras de fraseo simultáneas.


@predefined

@funindex \phrasingSlurUp
@code{\phrasingSlurUp},
@funindex \phrasingSlurDown
@code{\phrasingSlurDown},
@funindex \phrasingSlurNeutral
@code{\phrasingSlurNeutral}.


@seealso

Referencia del programa: @internalsref{PhrasingSlur}.

@node Breath marks
@subsubsection Breath marks

Las marcas de respiración se introducen usando @code{\breathe}

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
c'4 \breathe d4
@end lilypond


@snippets

El glifo de la marca de respiración se puede ajustar por medio de la
sobreescritura de la propiedad @code{text} del objeto de presentación
@code{BreathingSign} con cualquier texto de marcado.  Por ejemplo,

@lilypond[quote,ragged-right,fragment,verbatim,relative=1]
c'4
\override BreathingSign #'text
  = #(make-musicglyph-markup "scripts.rvarcomma")
\breathe
d4
@end lilypond

@seealso

Referencia del programa: @internalsref{BreathingSign}.

Ejemplos: @lsr{expressive,breathing-sign.ly}


@node Falls and doits
@subsubsection Falls and doits

Se pueden expresar caídas y subidas de tono (falls y doits) añadidas a
las notas mediante el comando @code{\bendAfter},

@lilypond[fragment,ragged-right,relative=2]
\override Score.SpacingSpanner #'shortest-duration-space = #3.0
c4-\bendAfter #+5
c4-\bendAfter #-3
@end lilypond


@node Lines
@subsection Lines

@menu
* Glissando::                   
* Arpeggio::                    
* Trills::                      
@end menu

@node Glissando
@subsubsection Glissando

@cindex Glissando
@funindex \glissando

Un glissando es un cambio gradual en la altura.  Se denota por medio
de una línea o una línea ondulada entre dos notas.  Se llama
adjuntando @code{\glissando} a una nota

@lilypond[quote,ragged-right,fragment,relative=2,verbatim]
c2\glissando c'
\override Glissando #'style = #'zigzag
c2\glissando c,
@end lilypond


@commonprop

@lilypond[quote,ragged-right,verbatim]
I = \once \override NoteColumn #'ignore-collision = ##t

\relative <<
  { \oneVoice \stemDown f2 \glissando \stemNeutral a } \\
  { \oneVoice \I c2 \glissando \I d, }
>>
@end lilypond



@seealso

Referencia del programa: @internalsref{Glissando}.

Archivos de ejemplo:
@lsr{expressive,glissando.ly}, @lsr{expressive,line-styles.ly}


@knownissues

La impresión de texto sobre la línea (como @emph{gliss.}) no está contemplada.


@node Arpeggio
@subsubsection Arpeggio

@cindex Arpeggio
@cindex acorde quebrado
@funindex \arpeggio

Se puede especificar un signo de arpegio (conocido también como acorde quebrado) sobre un
acorde adjuntando un @code{\arpeggio} a un acorde

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
<c e g c>\arpeggio
@end lilypond

Un corchete recto a la izquierda indica que el intérprete no tiene que
arpegiar el acorde

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
\arpeggioBracket
<c' e g c>\arpeggio
@end lilypond

La dirección del arpegio se denota a veces mediante la adición de una
punta de flecha a la línea ondulada

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
\new Voice {
  \arpeggioUp
  <c e g c>\arpeggio
  \arpeggioDown
  <c e g c>\arpeggio
}
@end lilypond


@commonprop

En un @code{PianoStaff} es posible hacer que un arpegio cruce los dos
pentagramas, estableciendo la propiedad
@code{PianoStaff}.@code{connectArpeggios}.

@lilypond[verbatim,quote,ragged-right,fragment,relative=1]
\new PianoStaff <<
  \set PianoStaff.connectArpeggios = ##t
  \new Staff { <c' e g c>\arpeggio }
  \new Staff { \clef bass <c,, e g>\arpeggio }
>>
@end lilypond

Se puede conseguir lo mismo en otros contextos aparte de
@code{PianoStaff} si el grabador @code{Span_arpeggio_engraver} se
incluye dentro del contexto de Score.

@lilypond[verbatim,quote,ragged-right]
\score {
  \new StaffGroup {
    \set Score.connectArpeggios = ##t
    <<
      \new Voice \relative c' {
        <e g>4\arpeggio
      }
      \new Voice  \relative c {
        \clef bass
        <c e>4\arpeggio
      }
    >>
  }
  \layout {
    \context {
      \Score
      \consists "Span_arpeggio_engraver"
    }
  }
}
@end lilypond

De forma similar, un arpegio se puede dibujar a través de notas que
están en voces diferentes del mismo pentagrama si el grabador
@code{Span_arpeggio_engraver} se desplaza al contexto de Staff:

@lilypond[verbatim,quote,ragged-right]
\new Staff
\with {
  \consists "Span_arpeggio_engraver"
} \relative c' {
  \set Staff.connectArpeggios = ##t
    <<
    {<e' g>4\arpeggio <d f> <d f>2 }
  \\
  {<d, f>2\arpeggio  <g b>2  }
  >>
}
@end lilypond


@seealso

Glosario musical: @rglos{arpeggio}, @rglos{broken chord}.

Referencia de la notación: @ref{Ties}, for writing out arpeggios.

Fragmentos de código: @lsrdir{Expressive,Expressive-marks}

Referencia de funcionamiento interno: @internalsref{Arpeggio},
@internalsref{PianoStaff}.

@knownissues

No es posible mezclar arpegios conectados y no conectados en un
@internalsref{PianoStaff} en el mismo instante de tiempo.


@node Trills
@subsubsection Trills

@cindex trinos
@funindex \trill

Los @notation{trinos} cortos se imprimen con @code{\trill} como una
articulación normal; véase @ref{Articulations and ornamentations}.

Los trinos largos mantenidos se hacen con @code{\startTrillSpan} y
@code{\stopTrillSpan}.  En el ejemplo siguiente, se muestra en la
usual combinación con notas de adorno.  Si se necesita un control más
preciso sobre la colocación de las notas de adorno, véase @ref{Grace
notes}.

@lilypond[verbatim,quote,ragged-right,fragment,relative=2]
c1 \afterGrace
d1\startTrillSpan { c16[\stopTrillSpan d] }
c4
@end lilypond

@cindex trinos con altura

Los trinos que se tienen que ejecutar sobre notas especificadas
explícitamente se pueden tipografiar con el comando
@code{pitchedTrill} y la sintaxis @code{\pitchedTrill}
@var{nota_principal} @code{\startTrillSpan} @var{nota_del_trino}
@var{nota_final} @code{\stopTrillSpan}.

@lilypond[verbatim,quote,ragged-right,fragment,relative=1]
\pitchedTrill e2 \startTrillSpan fis
d\stopTrillSpan
@end lilypond

@noindent
El primer argumento es la nota principal.  La altura de la segunda se
imprime como una cabeza de nota sin plica entre paréntesis.


@predefined

@code{\startTrillSpan},
@funindex \startTrillSpan
@code{\stopTrillSpan}.
@funindex \stopTrillSpan


@seealso

Glosario musical: @rglos{trill}

Fragmentos de código: @lsrdir{Expressive,Expressive-marks}

Referencia de funcionamiento interno: @internalsref{TrillSpanner}.

