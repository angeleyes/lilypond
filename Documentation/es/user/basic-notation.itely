@c -*- coding: utf-8; mode: texinfo; -*-
@c This file is part of lilypond.tely
@ignore
    Translation of GIT committish: fdfdc2c6ad77635367916c8300db150fcf29a5a3

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  See TRANSLATION for details.
@end ignore


@c A menu is needed before every deeper *section nesting of @node's; run
@c     M-x texinfo-all-menus-update
@c to automatically fill in these menus before saving changes

@node Basic notation
@chapter Basic notation

Este capítulo explica cómo usar las funcionalidades de notación básica.

@menu
* Pitches::                     
* Rhythms::                     
* Polyphony::                   
* Staff notation::              
* Connecting notes::            
* Expressive marks::            
* Repeats::                     
@end menu



@node Pitches
@section Pitches

Esta sección trata tómo especificar la altura de las notas.

@menu
* Normal pitches::              
* Accidentals::                 
* Cautionary accidentals::      
* Micro tones::                 
* Note names in other languages::  
* Relative octaves::            
* Octave check::                
* Transpose::                   
* Rests::                       
* Skips::                       
@end menu


@node Normal pitches
@subsection Normal pitches

@cindex Nombres de las notas
@cindex alturas

El nombre de una nota se especifica usando las letras minúsculas de la @code{a} a la @code{g}.
Una escala ascendente de Do mayor se tipografía con

@lilypond[quote,fragment,verbatim,ragged-right]
\clef bass
c d e f g a b c'
@end lilypond

El nombre de la nota @code{c} se tipografía una octava por debajo del Do central.

@lilypond[quote,fragment,verbatim,ragged-right]
\clef treble
c1
\clef bass
c1
@end lilypond

@funindex '
@funindex ,

La especificación opcional de la octava tiene la forma de una serie de
comillas simples o apóstrofes (@samp{'}) o bien una serie de comas
(@samp{,}).  Cada @samp{'} eleva la altura una octava;
cada @samp{,} baja la altura una octava.

@lilypond[quote,ragged-right,fragment,verbatim]
\clef treble
c' c'' e' g d'' d' d c
\clef bass
c, c,, e, g d,, d, d c
@end lilypond

Se puede usar un método alternativo para declarar en qué octava grabar
una nota; este método no requiere tantas especificaciones de octava
(@code{'} y @code{,}).  Consulte
@ref{Relative octaves}.


@node Accidentals
@subsection Accidentals

@cindex nombres de las notas, holandés
@cindex nombres de las notas, por omisión

Un sostenido se forma añadiendo @code{-is} tal final del nombre de la nota y
un bemol se forma añadiendo @code{-es}.  Los dobles sostenidos y dobles bemoles
se obtienen apadiendo @code{-isis} o @code{-eses} al nombre de la nota.

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
a2 ais a aes
a2 aisis a aeses
@end lilypond

@noindent
Estos son los nombres de las notas en holandés.  En holandés, @code{aes} se contrae en
@code{as}, pero las dos formas se aceptan.  De forma similar, se aceptan
tanto @code{es} como @code{ees}

@lilypond[fragment,quote,ragged-right,verbatim,relative=2]
a2 as e es
@end lilypond

Un becuadro cancelará el efecto de una alteración accidental o de la armadura.
Sin embargo, los becuadros no se codifican dentro de la sintaxis del nombre de la nota con un
sufijo; una altura natural se muestra como un simple nombre de nota

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
a4 aes a2
@end lilypond

La entrada @code{d e f} se interpreta como @q{imprimir un Re natural,
Mi natural y Fa natural}, independientemente de la armadura de la tonalidad.
Para ver más información acerca de la distinción entre
el contenido musical y la presentación de ese contenido, consulte
@ref{Accidentals and key signatures}.

@lilypond[fragment,quote,ragged-right,verbatim,relative]
\key d \major
d e f g
d e fis g
@end lilypond


@commonprop

De acuerdo con las reglas estándar del tipografiado, se imprime un signo de becuadro
antes de un sostenido o un bemos siempre que una alteración anterior tiene que cancelarse.
Para modificar este comportamiento, utilice
@code{\set Staff.extraNatural = ##f}

@lilypond[fragment,quote,ragged-right,verbatim,relative=2]
ceses4 ces cis c
\set Staff.extraNatural = ##f
ceses4 ces cis c
@end lilypond


@seealso

Referencia del programa: @internalsref{LedgerLineSpanner},
@internalsref{NoteHead}.


@node Cautionary accidentals
@subsection Cautionary accidentals

@cindex alteración recordatoria
@cindex alteración de precaución
@cindex alteración con paréntesis
@cindex recordatoria, alteración
@funindex ?
@cindex precaución, alteración de
@cindex paréntesis, alteración con
@funindex !

Normalmente las alteraciones accidentales se imprimen automáticamente, pero también puede
imprimirlas manualmente.  Un alteración recordatoria
se puede forzar añadiendo un signo de admiración @code{!}
después de la altura de la nota.  Una alteración de precaución
(o sea, una alteración encerrada en paréntesis) se peude obtener añadiendo el
signo de interrogación @samp{?} después del nombre de la nota.  Estas alteraciones adicionales
se pueden usar también para producir notas con becuadro.

@lilypond[quote,ragged-right,fragment,verbatim,relative=1]
cis cis cis! cis? c c? c! c
@end lilypond


@seealso

La producción sutomática de alteraciones accidentales se puede ajustar de muchas formas.
Para ver más información, consulte @ref{Automatic accidentals}.


@node Micro tones
@subsection Micro tones

@cindex cuartos de tono
@cindex semi-bemoles, semi-sostenidos

Los medios bemoles y los medios sostenidos se forman añadiendo @code{-eh} y
@code{-ih}; a continuación presentamos una serie de DOs cada vez más agudos

@lilypond[verbatim,ragged-right,quote,relative=2,fragment]
\set Staff.extraNatural = ##f
ceseh ceh cih cisih
@end lilypond

Los microtonos también se exportan al archivo MIDI.


@refbugs

No existen estándares reconocidos ampliamente para denotar
los bemoles de tres cuartos, de manera que los símbolos de LilyPond
no se ajustan a ningún estándar.



@node Note names in other languages
@subsection Note names in other languages

Existen conjuntos predefinidos de nombres de notas para algunos idiomas
aparte del inglés.  Para usarlos, incluya el archivo de incio
específico del idioma.  Por ejemplo, añada @code{\include "english.ly"}
al principio del archivo de entrada.  Los archivos de idioma disponibles
y los nombres de las notas que definen son los siguientes:

@c  Should this be made into a multitable?
@cindex idiomas, nombres de las notas en otros
@example
                     Nombres de las notas      sostenido   bemol       doble        doble
                                                                      sostenido     bemol

nederlands.ly  c   d   e   f   g   a   bes b   -is         -es       -isis         -eses
english.ly     c   d   e   f   g   a   bf  b   -s/-sharp   -f/-flat  -ss/-x/       -ff/
                                                                     -sharpsharp   -flatflat
deutsch.ly     c   d   e   f   g   a   b   h   -is         -es       -isis         -eses
norsk.ly       c   d   e   f   g   a   b   h   -iss/-is    -ess/-es  -ississ/-isis -essess/-eses
svenska.ly     c   d   e   f   g   a   b   h   -iss        -ess      -ississ       -essess
italiano.ly    do  re  mi  fa  sol la  sib si  -d          -b        -dd           -bb
catalan.ly     do  re  mi  fa  sol la  sib si  -d/-s       -b        -dd/-ss       -bb
espanol.ly     do  re  mi  fa  sol la  sib si  -s          -b        -ss           -bb
@end example

@noindent
Tenga en cuenta que en holandés, alemán, noruego y sueco, los bemoles
del @samp{La} como por ejemplo @code{aes} y @code{aeses}
se contraen normalmente como @code{as} y @code{ases} (o más frecuentemente
como @code{asas}). Algunas veces se definen sólo estas contracciones
en los archivos de idioma correrspondientes (esto también se aplica a los
sufijos para cuartos de tono que se ven más abajo).

@noindent
Algunas músicas utilizan microtonos cuyas alteraciones son fracciones
de un sostenido o bemol @q{normales}.  Los nombres de nota para cuartos
de tono que se definen en los distintos archivos de idioma se encuentran
listados en la tabla siguiente.  Aquí los prefijos @q{semi-} y @q{sesqui-}
significan @q{medio} y @q{uno y medio} respectivamente.  Para el noruego,
sueco, catalán y español no se ha definido aún ningún nombre especial.

@c What about Turkish Maquam music and similar microtonal systems?
@c
@c Note that the term "three-quarter-sharp/-flat" used in lilypond's source code 
@c is actually misleading since the alteration is in fact one and a half
@c of a regular sharp/flat. Whence the naming "sesqui-sharp/-flat" used below.

@example
                    Nombres de las notas       semi-      semi-  sesqui-    sesqui-
                                               sostenido  bemol  sostenido  bemol

nederlands.ly  c   d   e   f   g   a   bes b   -ih       -eh     -isih      -eseh
english.ly     c   d   e   f   g   a   bf  b   -qs       -qf     -tqs       -tqf
deutsch.ly     c   d   e   f   g   a   b   h   -ih       -eh     -isih      -eseh
norsk.ly       c   d   e   f   g   a   b   h   
svenska.ly     c   d   e   f   g   a   b   h   
italiano.ly    do  re  mi  fa  sol la  sib si  -sd       -sb     -dsd       -bsb
catalan.ly     do  re  mi  fa  sol la  sib si  
espanol.ly     do  re  mi  fa  sol la  sib si  
@end example



@node Relative octaves

@subsection Relative octaves

@cindex Relativo
@cindex Relativas, especificación de octavas
@funindex \relative

Las octavas se especifican añadiendo @code{'} y @code{,} a los nombres de las notas.
Cuando copie música existente, es fácil poner accidentalmente una nota en la octava
equivocada y es difícil encontrar dicho error.  La octava relativa
previene estos errores haciendo que los errores tengan consecuencias mucho mayores:
un solo error transporta una octava el resto de la pieza

@example
\relative @var{altura_inicial} @var{expresión_musical}
@end example

@noindent
o bien

@example
\relative @var{expresión_musical}
@end example

@noindent
@code{c'} se usa por defecto si no se define una altura inicial.

La octava de las notas que aparecen dentro de @var{expresión_musical} se calculan como
sigue: si no se usa ninguna marca de cambio de octava, el intervalo básico
entre la nota actual y la anterior se toma siempre como si fuera una cuarta o menos.
Esta distancia se determina independientemente de las alteraciones; un
@code{fisis} (Fa doble sostenido) después de un @code{ceses} (Do doble bemol) se colocará
por encima del @code{ceses}.  En otras palabras, una cuarta doble aumentada se considera
un intervalo menor que una quinta disminuida, incluso aunque la cuarta doble aumentada
tiene siete semitonos mientras que la quinta disminuida sólo tiene seis semitonos.

Las marcas de cambio de octava @code{'} y @code{,} se pueden añadir para
elevar o bajar la altura en una octava más.  Al entrar en el modo relativo,
se peude especificar una altura de inicio absoluta que se comportará como
la nota precedente a la primera nota de la @var{expresión_musical}.  Si no
se especifica ninguna altura inicial, se utilizará el Do central como
comienzo.

Aquí podemos ver el modo relativo en acción:
@lilypond[quote,fragment,ragged-right,verbatim]
\relative c'' {
  b c d c b c bes a
}
@end lilypond

Las marcas de cambio de octava se utilizan para intervalos mayores de la cuarta

@lilypond[quote,ragged-right,fragment,verbatim]
\relative c'' {
  c g c f, c' a, e''
}
@end lilypond

Si el elemento anterior es un acorde, la primera nota del acorde se utiliza para
determinar la primera nota del siguiente acorde

@lilypond[quote,ragged-right,fragment,verbatim]
\relative c' {
  c <c e g>
  <c' e g>
  <c, e' g>
}
@end lilypond

La altura después del @code{\relative} contiene un nombre de nota.

La converión relativa no afecta a las secciones @code{\transpose},
@code{\chordmode} o @code{\relative} en su argumento.  Para usar
el modo relativo dentro de música transportada, se debe escribir 
un @code{\relative} adicional dentro de @code{\transpose}.


@node Octave check
@subsection Octave check

@cindex Comprobación de octava

Las comprobaciones de octava hacen que los errores de octava sean más
fáciles de corregir: una nota puede venir seguida de @code{=}@var{comillas}
lo que indica cuál debería ser su octava absoluta.  En el siguiente ejemplo,

@example
\relative c'' @{ c='' b=' d,='' @}
@end example

@noindent
la @code{d} generará una advertencia, porque se esperaba un @code{d''}
(a causa de que el intervalo de @code{b'} a @code{d''} es de una tercera solamente),
pero aparece un @code{d'}.  En la salida, la octava se corrige para que sea
un @code{d''} y la siguiente nota se calcula de forma relativa a @code{d''} 
en lugar de a @code{d'}.

También existe una comprobación de octava que no produce ninguna salida visible.
La sintaxis

@example
\octave @var{altura}
@end example

Esto comprueba que @var{altura} (sin las comillas) produce @var{altura} (con
las comillas) en modo @code{\relative} comparado con la nota que se da en el
comando @code{\relative}.  Si no es así, se imprime una advertencia, y la
octava se corrige.  La @var{altura} no se imprime como una nota.

En el ejemplo que aparece a continuación, la primera comprobación
se aprueba sin más problema, porque el @code{e} (en modo @code{relative})
está dentro de una quinta desde @code{a'}.  Sin embargo
la segunda comprobación produce una advertencia porque el @code{e} no está dentro
de una quinta del @code{b'}.  Se imprime el mensaje de advertencia y la octava se ajusta
de modo que las notas siguientes están en la octava correcta de nuevo.

@example
\relative c' @{
  e
  \octave a'
  \octave b'
@}
@end example


La octava de una nota que sigue a una comprobación de octava
se determina con respecto a la nota que la precede.  En el siguiente fragmento,
la última nota es una @code{a'}, por encima del Do central.  Esto
significa que la comprobeación de @code{\octave} se aprueba satisfactoriamente,
así que la comprobación se peude borrar sin que cambie la salida de la pieza.

@lilypond[quote,ragged-right,verbatim,fragment]
\relative c' {
  e
  \octave b
  a
}
@end lilypond


@node Transpose
@subsection Transpose

@cindex Transposición
@cindex Transposición de alturas
@funindex \transpose

A music expression can be transposed with @code{\transpose}.  The
syntax is
@example
\transpose @var{desde} @var{hacia} @var{expresión_musical}
@end example

Esto significa que la @var{expresión_musical} se transporta el intervalo
que hay entre las notas @var{desde} y @var{hacia}: cualquier nota con la altura @code{desde}
se cambia por @code{hacia}.

Por ejemplo, tomemos una pieza escrita en la tonalidad de Re mayor.
Si esta pieza es demasiado grave para el ejecutante, se puede transportar
hacia arriba a Mi mayor con
@example
\transpose d e @dots{}
@end example

Suponga una pieza escrita para el violín (que es un instrumento en Do).  Si
esta parte se tiene que tocar con un clarinete en La (para el que un La
se escribe como un Do, y que suena una tercera menor por debajo de lo que
está escrito), el siguiente transporte producirá la particella correcta:

@example
\transpose a c @dots{}
@end example

@code{\transpose} distingue entre notas enarmónicas: tanto
@code{\transpose c cis} como @code{\transpose c des} transportarán un
semitono hacia arriba.  La primera versión imprimirá sostenidos y la
segunda imprimirá bemoles


@lilypond[quote,ragged-right,verbatim]
mus = { \key d \major cis d fis g }
\new Staff {
  \clef "F" \mus
  \clef "G"
  \transpose c g' \mus
  \transpose c f' \mus
}
@end lilypond

@code{\transpose} también se puede usar para introducir notas escritas para un
instrumento transpositor.  Las alturas se introducen normalmente en LilyPond
en Do (o en @q{afinación de concierto}), pero se pueden introducir en otra
tonalidad.  Por ejemplo, al introducir música para una trompeta en Si bemol
que comienza en un Re de concierto, se puede escribir

@example
\transpose c bes @{ e4 @dots{} @}
@end example

Para imprimir esta música en Si bemol de nuevo (o sea, para producir una particella de trompeta
en vez de una partitura para el director en afinación de concierto), puede envolver la música existente
con otro @code{transpose}

@example
\transpose bes c @{ \transpose c bes @{ e4 @dots{} @} @}
@end example


@seealso

Referencia del programa: @internalsref{TransposedMusic}.

Ejemplo: @inputfileref{input/@/test,smart@/-transpose@/.ly}.


@refbugs

Si quiere usar al mismo tiempo @code{\transpose} y @code{\relative},
debe escribir @code{\transpose} por fuera de @code{\relative}, porque
@code{\relative} no tendrá ningún efecto sobre la música que aparezca dentro de un
@code{\transpose}.


@node Rests
@subsection Rests
@cindex Silencios

@funindex \rest
@funindex r

Los silencios se introducen como notas con el nombre @code{r}

@lilypond[fragment,quote,ragged-right,verbatim]
r1 r2 r4 r8
@end lilypond

Los silencios de un compás centrados en medio del comás,
se deben hacer com silencios multicompás.  Se pueden usar para 
un solo compás así como para muchos compases, y se tratan en
@ref{Multi measure rests}.

Para especificar explícitamente la posición vertical de un silencio, escriba una nota
seguida de @code{\rest}.  Se colocará un silencio en la posición en que debería
aparecer la nota:

@lilypond[fragment,quote,ragged-right,verbatim]
a'4\rest d'4\rest
@end lilypond

@noindent
Esto hace mucho más sencillo el formateo de la música polifónica,
porque el formateador automático de colisiones de silencios se olvidará de ellos.

@seealso

Referencia del programa: @internalsref{Rest}.


@node Skips
@subsection Skips

@cindex Desplazamiento
@cindex Silencio invisible
@cindex Nota de espaciado
@funindex \skip
@funindex s

Un silencio invisible -- también conocido como @q{skip} (desplazamiento) --
se puede introducir como una nota con el nombre @samp{s} o con @code{\skip @var{duración}}

@lilypond[fragment,quote,ragged-right,verbatim,relative=2]
a4 a4 s4 a4 \skip 1 a4
@end lilypond

La sintaxis de @code{s} sólo está disponible en el modo de notas y en el modo de acordes.
En otras situaciones, por ejemplo, cuando se introduce la letra, debe
usar el comando @code{\skip}

@lilypond[quote,ragged-right,verbatim]
<<
  \relative { a'2 a2 }
  \new Lyrics \lyricmode { \skip 2 bla2 }
>>
@end lilypond

El comando skip es un mero contenedor musical vacío.  No produce
ninguna salida, ni siguiera una salida transparente.

El comando de desplazamiento @code{s} crea una @internalsref{Staff} y una
@internalsref{Voice} cuando es necesario, de forma similar a los comandos de nota y de silencio.
Por ejemplo, el fragmento siguiente produce un pentagrama vacío.

@lilypond[quote,ragged-right,verbatim]
{ s4 }
@end lilypond

El fragmento @code{@{ \skip 4 @} } produciría una página vacía.

@seealso

Referencia del programa: @internalsref{SkipMusic}.



@node Rhythms
@section Rhythms

Esta sección trata los ritmos, duraciones y compases.

@menu
* Durations::                   
* Augmentation dots::           
* Tuplets::                     
* Scaling durations::           
* Bar check::                   
* Barnumber check::             
* Automatic note splitting::    
@end menu


@node Durations
@subsection Durations

@cindex duración
@funindex \longa
@funindex \breve
@funindex \maxima

En los modos de Nota, Acorde y Letra, las duraciones se designan
mediante números y puntos: las duraciones se introducen como sus
valores recíprocos respecto de la redonda.  Por ejemplo, una negra
se escribe usando un @code{4} (puesto que es 1/4 de redonda), mientras
que una blanca se escribe con un @code{2} (por ser 1/2 de redonda).  Para
notas mayores de la redonda se deben usar los comandos @code{\longa} y
@code{\breve}

@example
c'\breve
c'1 c'2 c'4 c'8 c'16 c'32 c'64 c'64
r\longa r\breve
r1 r2 r4 r8 r16 r32 r64 r64
@end example

@lilypond[quote]
\score {
\relative c'' {
    a\breve*1/2 \autoBeamOff
    a1 a2 a4 a8 a16 a32 a64 a64
   \bar "empty"
   \break
    r\longa*1/4 r\breve *1/2
    r1 r2 r4 r8 r16 r32 r64 r64
  }
  \layout {
    ragged-right = ##t
    indent=0\mm
    \context {
      \Score
        \remove "Bar_number_engraver"
    }
    \context {
      \Staff
        \remove "Clef_engraver"
        \override StaffSymbol #'transparent = ##t
        \override TimeSignature #'transparent = ##t
        \override BarLine #'transparent = ##t
        \consists "Pitch_squash_engraver"
    }
  }
}
@end lilypond

Si la duración se omite, su valor será el de la duración de la nota
anterior.  Por omisión, el valor de la primera nota es el de una
negra.

@lilypond[quote,ragged-right,verbatim,fragment]
{ a a a2 a a4 a a1 a }
@end lilypond


@node Augmentation dots
@subsection Augmentation dots

@funindex .

Para obtener duraciones de notas con puntillo, simplemente escriba un
punto (@samp{.}) después del número.  Las notas con doble puntillo se
consiguen de manera similar.

@lilypond[quote,ragged-right,fragment,verbatim]
a'4 b' c''4. b'8 a'4. b'4.. c''8.
@end lilypond

@refcommands

Normalmente los puntillos se desplazan hacia arriba para evitar las
líneas del pentagrama, excepto en situaciones de polifonía.  Se pueden
utilizar los siguientes comandos para forzar manualmente una dirección
en particular

@funindex \dotsUp
@code{\dotsUp},
@funindex \dotsDown
@code{\dotsDown},
@funindex \dotsNeutral
@code{\dotsNeutral}.

@seealso

Referencia del programa: @internalsref{Dots} y @internalsref{DotColumn}.


@node Tuplets
@subsection Tuplets

@cindex grupos especiales
@cindex tresillos
@funindex \times

Los grupos especiales se obtienen a partir de una expresión musical
multiplicando todas las duraciones por una fracción:

@example
\times @var{fracción} @var{expresión_musical}
@end example

@noindent
La duración de la @var{expresión _musical} se multiplicará or la
fracción.  El denominador de la fracción se imprimirá sobre las notas,
opcionalmente con un corchete.  El grupo especial más común es el
tresillo, en el que 3 notas tienen el valor de 2, por tanto las notas
duran 2/3 de su valor escrito

@lilypond[quote,ragged-right,fragment,verbatim]
g'4 \times 2/3 {c'4 c' c'} d'4 d'4
@end lilypond

Los grupos pueden anidarse unos dentro de otros, por ejemplo

@lilypond[fragment,ragged-right,verbatim,relative=2]
\override TupletNumber #'text = #tuplet-number::calc-fraction-text
\times 4/6 {
  a4 a
  \times 3/5 { a a a a a }
}
@end lilypond

@refcommands

@funindex \tupletUp
@code{\tupletUp},
@funindex \tupletDown
@code{\tupletDown},
@funindex \tupletNeutral
@code{\tupletNeutral}.


@commonprop

@funindex tupletNumberFormatFunction
@cindex formateo de los grupos especiales

La propiedad @code{tupletSpannerDuration} (duración del selector de
grupo) especifica la duración de cada corchete.  Con esto puede hacer
muchos grupos escribiendo @code{\times} una sola vez, ahorrándose
mucho trabajo de teclado.  En el siguiente ejemplo se muestran dos
tresillos, aunque @code{\times} sólo se ha utilizado una vez

@lilypond[quote,fragment,relative=2,ragged-right,verbatim]
\set tupletSpannerDuration = #(ly:make-moment 1 4)
\times 2/3 { c8 c c c c c }
@end lilypond

@noindent
Para ver más información sobre @code{make-moment}, consulte
@ref{Time administration}.

El formato del número se determina por medio de la propiedad @code{text} en
@code{TupletNumber}.  Por defecto se imprime sólo el denominador, pero si
su valor se establece a la función @code{tuplet-number::calc-fraction-text},
se imprimirá como @var{numerador}:@var{denominador}

Para que no se impriman los números de los grupos, emplee

@lilypond[quote,fragment,relative=2,ragged-right,verbatim]
\times 2/3 { c8 c c } \times 2/3 { c8 c c }
\override TupletNumber #'transparent = ##t
\times 2/3 { c8 c c } \times 2/3 { c8 c c }
@end lilypond

@c needs revision. FVD
Se puede hacer que los corchetes de grupo abarquen tanto como su
duración completa indique o que lleguen hasta justo antes de la nota
siguiente

@lilypond[ragged-right]
\new RhythmicStaff {
  \set tupletFullLength = ##t
  \time 4/4
  \times 4/5 {
    c4 c1
  }
  \set tupletFullLengthNote = ##t
  \time 2/4
  \times 2/3 {
    c4 c c 
  }
  \time 3/4
  c4 
}
@end lilypond


@seealso

Referencia del programa: @internalsref{TupletBracket},
@internalsref{TupletNumber} y @internalsref{TimeScaledMusic}.



@node Scaling durations
@subsection Scaling durations

Es posible alterar la duración de las figuras en un factor @var{N/M}
añadiendo @samp{*@var{N/M}} (o @samp{*@var{N}} si @var{M=1}).  Esto no
afectará a la apariencia de las notas o silencios que se producen.  Se
pueden combinar en la forma @samp{*M*N}.

En el siguiente ejemplo las tres primeras notas duran exactamente dos
partes, pero no se imprime ningún corchete de tresillo.

@lilypond[quote,ragged-right,fragment,relative=2,verbatim]
\time 2/4
a4*2/3 gis4*2/3 a4*2/3
a4 a4 a4*2
b16*4 c4
@end lilypond


@seealso

En este manual: @ref{Tuplets}


@node Bar check
@subsection Bar check

@cindex Compás, comprobación de
@funindex barCheckSynchronize
@funindex |

Las comprobaciones de compás ayudan a detectar errores en las duraciones.  Una comprobación de compás se
escribe usando el símbolo de la barra vertical, @samp{|}.  Cuando se encuentra durante 
la interpretación, debe caer en el límite entre dos compases.  Si no es así,
se muestra una advertencia.  En el siguiente ejemplo, la segunda comprobación
de compás avisará de un error
@example
\time 3/4 c2 e4 | g2 |
@end example

Las comprobaciones de compás también se pueden usar en la letra de las canciones, por ejemplo

@example
\lyricmode @{
  \time 2/4
  Cam -- pa | ni -- tas 
@}
@end example

Las comprobaciones de compás fallidas tienen su origen en la
introducción incorrecta de las duraciones.  Las duraciones incorrectas
a menudo desbaratan la partitura completamente, sobre todo si la
música es polifónica, por ello el mejor sitio para empezar a corregir
la entrada es hacer un barrido en busca de comprobaciones de compás
fallidas y duraciones incorrectas.

@funindex |
@funindex pipeSymbol

También es posible redefinir el significado de @code{|}.  Se hace
asignando una expresión musical a @code{pipeSymbol},

@lilypond[quote,ragged-right,verbatim]
pipeSymbol = \bar "||"

{ c'2 c' | c'2 c' }
@end lilypond


@node Barnumber check
@subsection Barnumber check

Al copiar piezas musicales grandes peude servir de ayuda comprobar que
el número de compás de LilyPond corresponde al original desde el que está copiando.
Esto se puede comprobar con @code{\barNumberCheck}, por ejemplo

@verbatim
\barNumberCheck #123
@end verbatim

@noindent
imprimirá una advertencia si el @code{currentBarNumber} (número del
compás actual) no es 123 cuando se está procesando.


@node Automatic note splitting
@subsection Automatic note splitting

Las notas largas se pueden convertir automáticamente en notas ligadas.
Se hace mediante la sustitución del @internalsref{Note_heads_engraver}
por el @internalsref{Completion_heads_engraver}.  En los siguientes
ejemplos, las notas que atraviesan la barra de compás se dividen y se
unen mediante una ligadura.

@lilypond[quote,fragment,verbatim,relative=1,line-width=12\cm]
\new Voice \with {
  \remove "Note_heads_engraver"
  \consists "Completion_heads_engraver"
} {
  c2. c8 d4 e f g a b c8 c2 b4 a g16 f4 e d c8. c2
}
@end lilypond

Este grabador dicide todas las notas largas en la barra de compás e
inserta ligaduras.  Uno de sus usos es depurar partituras complejas:
si los compases no están completos, las ligaduras mostrarán
exactamente cuánto le falta a cada compás.

Si quiere permitir el salto de línea en las barras de compás en las
que @internalsref{Completion_heads_engraver} divide las notas, debe
eliminar también @internalsref{Forbid_line_breaks_engraver}.


@refbugs

No todas las duraciones (sobre todo las que contienen grupos
especiales) se pueden representar exactamente con notas normales y
puntillos, pero el grabador nunca insertará grupos especiales.


@code{Completion_heads_engraver} afecta sólo a las notas; no divide
silencios.


@seealso

Referencia del programa: @internalsref{Completion_heads_engraver}.


@node Polyphony
@section Polyphony

La polifonía en música hace referencia a tener más de una voz en una
pieza cualquiera de música.  En LilyPond la polifonía hace referencia
a tener más de una voz en el mismo pentagrama.


@menu
* Chords::                      
* Stems::                       
* Basic polyphony::             
* Explicitly instantiating voices::  
* Collision Resolution::        
@end menu


@node Chords
@subsection Chords

@cindex Acordes

Un acorde se forma encerrando un conjunto de notas entre @code{<} y
@code{>}.  Un acorde puede ir seguido de una duración o un conjunto de
articulaciones, como si fueran simples notas.

@lilypond[verbatim,ragged-right,fragment,quote,relative=1]
<c e g>4 <c>8
@end lilypond

Para ver más información sobre los acordes, consulte @ref{Chord names}.


@node Stems
@subsection Stems

Cuando se encuentra con una nota, se crea un objeto
@internalsref{Stem} (plica) automáticamente.  Para las redondas y los
silencios, también se crean pero se hacen invisibles.


@refcommands

@funindex \stemUp
@code{\stemUp},
@funindex \stemDown
@code{\stemDown},
@funindex \stemNeutral
@code{\stemNeutral}.


@commonprop

Para modificar la dirección de las plicas en medio de un pentragrama, utilice

@lilypond[quote,ragged-right,fragment,relative=2,verbatim]
a4 b c b
\override Stem #'neutral-direction = #up
a4 b c b
\override Stem #'neutral-direction = #down
a4 b c b
@end lilypond


@node Basic polyphony
@subsection Basic polyphony

@cindex polyphony

La manera más fácil de escribir fragmentos con más de una voz sobre el mismo pentagrama
es introducir cada voz como una secuencia (con @code{@{...@}}), y combinarlas
simultáneamente, separando las voces con @code{\\}

@funindex \\

@lilypond[quote,verbatim,fragment]
\new Staff \relative c' {
  c16 d e f
  <<
    { g4 f e | d2 e2 } \\
    { r8 e4 d c8 ~ | c b16 a b8 g ~ g2 } \\
    { s2. | s4 b4 c2 }
  >>
}
@end lilypond

El separador hace que se produsca un nuevo contexto de @internalsref{Voice}@footnote{Las voces polifónicas
se conocen a veces como @q{capas} en otros programas de edición de partituras}.
@cindex capas
Llevan los nombres @code{"1"}, @code{"2"}, etc.  En cada
uno de estos contextos, la dirección vertical de las ligaduras, plicas, etc., se establece
de la manera que corresponda.

Todas estas voces están separadas de la voz que contiene las noas
justo por fuera de la construcción @code{<< \\ >>}.  Esto se debe
tener en cuenta cuando haga algún cambio en una voz.  También
significa que las ligaduras de unión y de expresión no pueden salir ni
entrar en una construcción @code{<< \\ >>}.  En cambio las voces
paralelas que están en construcciones @code{<< \\ >>} separadas dentro
del mismo pentagrama, son la misma voz.  Presentamos a continuación el
mismo ejemplo, con cabezas distintas apra cada voz.  Dése cuenta de
que el cambio al estilo de cabezas de nota en la voz principal no
afecta a las que están dentro de la construcción @code{<< \\ >>}.
También, el cambio a la segunda voz en la primera construcción
@code{<< \\ >>} es efectiva en la segunda @code{<< \\ >>}, y la voz se
liga de una construcción a otra.

@cindex cabezas de nota, estilos de

@lilypond[quote,verbatim,fragment]
\new Staff \relative c' {
  \override NoteHead #'style = #'cross
  c16 d e f
  <<
    { g4 f e } \\
    { \override NoteHead #'style = #'triangle
    r8 e4 d c8 ~ }
  >> |
  <<
    { d2 e2 } \\
    { c8 b16 a b8 g ~ g2 } \\
    { \override NoteHead #'style = #'slash s4 b4 c2 }
  >>
}
@end lilypond

La polifonía no cambia la relación entre las notas que están dentro de
un bloque @code{\relative @{ @}}.  Cada una de las notas se calcula
relativa a la nota inmediatamente anterior.

@example
\relative @{ notaA << notaB \\ notaC >> notaD @}
@end example

@code{notaC} es relativa a @code{notaB}, no a @code{notaA};
@code{notaD} es relativa a @code{notaC}, no a @code{notaB} ni a
@code{notaA}.


@node Explicitly instantiating voices
@subsection Explicitly instantiating voices

Los contextos de @internalsref{Voice} también se pueden instanciar manualmente
dentro de un bloque @code{<< >>} para crear música polifónica, usando
@code{\voiceOne}, hasta @code{\voiceFour} para asignar las direcciones de las plicas
y un desplazamiento horizontal para cada parte.

Concretamente:
@example
<< \superior \\ \inferior >>
@end example

@noindent
equivale a

@example
<<
  \new Voice = "1" @{ \voiceOne \superior @}
  \new Voice = "2" @{ \voiceTwo \inferior @}
>>
@end example

Los comandos @code{\voiceXXX} establecen la dirección de las plicas, ligaduras de expresión y de unión,
articulaciones, anotaciones de texto, puntillos y digitaciones.
@code{\voiceOne} y @code{\voiceThree} hacen
a los mencionados objetos apuntar hacia arriba, mientras que @code{\voiceTwo} y @code{\voiceFour}
los hacen apuntar hacia abajo.
El comando @code{\oneVoice} hace volver a los ajustes normales.

Una expresión que aparece directamente dentro de un @code{<< >>} pertenece a
la voz principal.  Es útil cuando aparecen voces adicionales al tiempo que está cantando la voz
principal.  A continuación podemos ver una representación mejor del ejemplo del apartado anterior.
Las cabezas en forma de cruz demuestran que
la melodía principal ahora está en un contexto de una voz única.

@lilypond[quote,ragged-right,verbatim]
\new Staff \relative c' {
  \override NoteHead #'style = #'cross
  c16 d e f
  \voiceOne
  <<
    { g4 f e | d2 e2 }
    \new Voice="1" { \voiceTwo
      r8 e4 d c8 ~ | c8 b16 a b8 g ~ g2
      \oneVoice
    }
    \new Voice { \voiceThree
      s2. | s4 b4 c2
      \oneVoice
    }
  >>
  \oneVoice
}
@end lilypond

La definición correcta de las voces permite que la melodía se pueda marcar con ligaduras de expresión.
@lilypond[quote,ragged-right,verbatim]
\new Staff \relative c' {
  c16^( d e f
  \voiceOne
  <<
    { g4 f e | d2 e2) }
    \context Voice="1" { \voiceTwo
      r8 e4 d c8 ~ | c8 b16 a b8 g ~ g2
      \oneVoice
    }
    \new Voice { \voiceThree
      s2. s4 b4 c2
      \oneVoice
    }
  >>
  \oneVoice
}
@end lilypond

Al evitar el separador @code{\\} posibilitamos la escritura de
construcciones polifónicas anidadas, lo que en algún caso podría constituir
una forma más natural de tipografiar la música.

@lilypond[quote,ragged-right,verbatim]
\new Staff \relative c' {
  c16^( d e f
  \voiceOne
  <<
    { g4 f e | d2 e2) }
    \context Voice="1" { \voiceTwo
      r8 e4 d c8 ~ |
      <<
        {c8 b16 a b8 g ~ g2}
        \new Voice { \voiceThree
          s4 b4 c2
          \oneVoice
        }
      >>
    \oneVoice
    }
  >>
  \oneVoice
}
@end lilypond

En ciertos casos de música polifónica compleja podría ser necesario
utilizar voces adicionales para evitar colisiones entre las notas.
Las voces adicionales se añaden definiendo un identificador como se
muestra a continuación:

@lilypond[quote,verbatim,ragged-right,relative=2]
voiceFive = #(context-spec-music (make-voice-props-set 4) 'Voice)

\relative c''' <<
  { \voiceOne g4 ~  \stemDown g32[ f( es d c b a b64 )g] } \\
  { \voiceThree  b4} \\
  { \voiceFive d,} \\
  { \voiceTwo g,}
>>
@end lilypond


@node Collision Resolution
@subsection Collision Resolution

Normalmente las cabezas de nota con un número de puntillos diferente
no se mezclan en una sola, pero cuando se establece como cierta
propiedad @code{merge-differently-dotted} en el objeto
@internalsref{NoteCollision}, se juntan en una sola:

@lilypond[quote,verbatim,fragment,ragged-right,relative=2]
\new Voice << {
  g8 g8
  \override Staff.NoteCollision
    #'merge-differently-dotted = ##t
  g8 g8
} \\ { g8.[ f16] g8.[ f16] } >>
@end lilypond

De forma similar puede mezclar cabezas de blanca con corcheas,
ajustando @code{merge-differently-headed}:

@lilypond[quote,ragged-right,fragment,relative=2,verbatim]
\new Voice << {
  c8 c4.
  \override Staff.NoteCollision
    #'merge-differently-headed = ##t
c8 c4. } \\ { c2 c2 } >>
@end lilypond

@noindent
@code{merge-differently-headed} y @code{merge-differently-dotted}
se aplican solamente a direcciones de plica opuestas (es decir, a las voces 1 y 2).

LilyPond también desplaza verticalmente los silencios que están en el lado contrario de una plica,
por ejemplo

@lilypond[quote,ragged-right,fragment,verbatim]
\new Voice << c''4 \\ r4 >>
@end lilypond

Si tres o más notas coinciden verticalmente en la misma columna,
@code{merge-differently-headed} no puede completar satisfactoriamente
la mezcla de las dos notas que deberían mezclarse.
Para hacer posible que la mezcla funcione, aplique un @code{\shift} (desplazamiento) a la nota que no
debe mezclarse.  En el primer compás del ejemplo siguiente,
@code{merge-differently-headed} no funciona (la cabeza de la blanca está rellena)
En el segundo compás, se aplica @code{\shiftOn} para mover horizontalmente el
@code{g} (Sol) superior, y @code{merge-differently-headed}
funciona correctamente.

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
\override Staff.NoteCollision #'merge-differently-headed = ##t
<<
  { d=''2 g2 } \\
  { \oneVoice d=''8 c8 r4 e,8 c'8 r4 } \\
  { \voiceFour e,,2 e'2}
>>
<<
  { d'=''2 \shiftOn g2 } \\ 
  { \oneVoice d=''8 c8 r4 e,8 c'8 r4 } \\
  { \voiceFour e,,2 e'2}
>>
@end lilypond


@refcommands

@funindex \oneVoice
@code{\oneVoice},
@funindex \voiceOne
@code{\voiceOne},
@funindex \voiceTwo
@code{\voiceTwo},
@funindex \voiceThree
@code{\voiceThree},
@funindex \voiceFour
@code{\voiceFour}.

@funindex \shiftOn
@code{\shiftOn},
@funindex \shiftOnn
@code{\shiftOnn},
@funindex \shiftOnnn
@code{\shiftOnnn},
@funindex \shiftOff
@code{\shiftOff}: estos comandos especifican el grado en que
se deben desplazar los acordes de la voz en curso.
Las voces exteriores (normalmente: la voz uno y la voz dos)
tienen @code{\shiftOff} (desplazamiento desactivado), mientras que las voces interiores (tres y cuatro)
tienen @code{\shiftOn} (desplazamiento activado).  @code{\shiftOnn} y @code{\shiftOnnn} definen niveles de desplazamiento
más grandes.

Cuando LilyPond no puede con todo, se pueden usar la propiedad
@code{force-hshift} (forzar desplazamiento) del objeto
@internalsref{NoteColumn} y los silencios con altura para sobreescibir
las decisiones de tipografía.

@lilypond[quote,verbatim,ragged-right]
\relative <<
{
  <d g>
  <d g>
} \\ {
  <b f'>
  \once \override NoteColumn #'force-hshift = #1.7
  <b f'>
} >>
@end lilypond


@seealso

Referencia del programa: los objetos responsables de resolver las colisiones son
@internalsref{NoteCollision} y @internalsref{RestCollision}.


@refbugs

Cuando se emplea @code{merge-differently-headed} con una corchea (o una nota más corta) con la plica hacia arriba,
y una blanca con la plica hacia abajo, la corchea no tiene el desplazamiento correcto.

No hay soporte para racimos (clusters) donde la misma nota se presenta
con diferentes alteraciones accidentales dentro del mismo acorde.  En
este caso se recomienda usar la transcripción enarmónica, o usar la
notación especial de racimos (ver @ref{Clusters}).



@node Staff notation
@section Staff notation

@cindex Notación de los pentagramas

Esta sección describe la notación musical que se produce en el nivel del pentagrama,
como las armaduras de tonalidad, claves e indicaciones de compás.

@menu
* Clef::                        
* Key signature::               
* Time signature::              
* Partial measures::            
* Bar lines::                   
* Unmetered music::             
* System start delimiters::     
* Staff symbol::                
* Writing music in parallel::   
@end menu


@node Clef
@subsection Clef

@funindex \clef

La clave indica qué líneas del pentagrama corresponden a qué
notas.  La clave se establece con el comando @code{\clef} 

@lilypond[quote,ragged-right,fragment,verbatim]
{ c''2 \clef alto g'2 }
@end lilypond

@cindex clave de Sol
@cindex clave de violín
@cindex clave de Do en tercera (clave de viola)
@cindex clave de Do en cuarta (clave de tenor)
@cindex clave de Fa en cuarta (clave de bajo)
@cindex clave de Sol en primera (clave de violín francesa)
@cindex clave de Do en primera (clave de soprano)
@cindex clave de Do en segunda (clave de mezzosoprano)
@cindex clave de Do en quinta (clave de barítono)
@cindex clave de Fa en tercera (clave de varbarítono)
@cindex clave de Fa en quinta (clave de subbajo)

Las claves soportadas son

@multitable @columnfractions .33 .66
@headitem Clave @tab Posición
@item @code{treble}, violin, G, G2 @tab
clave de Sol en 2ª
@item @code{alto, C} @tab
clave de Do en 3ª
@item @code{tenor} @tab
clave de Do en 4ª
@item @code{bass, F} @tab
clave de Fa en 4ª
@item @code{french} @tab
clave de Sol en 1ª, conocida también como clave de violín francesa
@item @code{soprano} @tab
clave de Do en 1ª
@item @code{mezzosoprano} @tab
clave de Do en 2ª
@item @code{baritone} @tab
clave de Do en 5ª
@item @code{varbaritone} @tab
clave de Fa en 3ª
@item @code{subbass} @tab
clave de Fa en 5ª
@item @code{percussion} @tab
clave de percusión
@item @code{tab} @tab
clave de tablatura
@end multitable

Al añadir @code{_8} o @code{^8} al nombre de la clave, la clave se transpone
una octava hacia abajo o hacia arriba, respectivamente, y @code{_15} y
@code{^15} la transpone dos octavas.  El argumento @var{nombre_de_clave}
se debe encerrar entre comillas cuando contiene guiones bajos o dígitos.  Por
ejemplo:

@cindex clave de tenor coral
@lilypond[quote,ragged-right,verbatim,fragment,relative=1]
\clef "G_8" c4
@end lilypond


@commonprop

El comando @code{\clef "treble_8"} equivale a establecer
@code{clefGlyph},
@code{clefPosition} (que controla la posición Y de la clave),
@code{middleCPosition} y @code{clefOctavation}.  Se imprime una clave
cuando se cambia cualquiera de estas propiedades.  El siguiente ejemplo muestra
las posibilidades que se ofrecen estableciendo manualmente las propiedades.

@lilypond[quote,ragged-right,verbatim]
{
  \set Staff.clefGlyph = #"clefs.F"
  \set Staff.clefPosition = #2
  c'4
  \set Staff.clefGlyph = #"clefs.G"
  c'4
  \set Staff.clefGlyph = #"clefs.C"
  c'4
  \set Staff.clefOctavation = #7
  c'4
  \set Staff.clefOctavation = #0
  \set Staff.clefPosition = #0
  c'4
  \clef "bass"
  c'4
  \set Staff.middleCPosition = #4
  c'4
}
@end lilypond


@seealso

Manual: @ref{Grace notes}.

Referencia del programa: @internalsref{Clef}.


@node Key signature
@subsection Key signature

@cindex Armadura de la tonalidad
@funindex \key

La armadura indica la tonalidad en que se toca una pieza.  Está
denotada por un conjunto de alteraciones (bemoles o sostenidos) al comienzo del
pentagrama.

El establecimiento o modificación de la armadura se hace con el comando @code{\key}

@example
@code{\key} @var{nota} @var{tipo}
@end example

@funindex \minor
@funindex \major
@funindex \minor
@funindex \ionian
@funindex \locrian
@funindex \aeolian
@funindex \mixolydian
@funindex \lydian
@funindex \phrygian
@funindex \dorian
@cindex modos eclesiásticos

Aquí, @var{tipo} debe ser @code{\major} o @code{\minor} para obtener
@var{nota}-mayor o @var{nota}-menor, respectivamente.  También puede
usar los nombres estándar de modo (también conocidos como @q{modos eclesiásticos}): @code{\ionian} (jónico),
@code{\locrian} (locrio), @code{\aeolian} (eolio), @code{\mixolydian} (mixolidio), @code{\lydian} (lidio),
@code{\phrygian} (frigio) y @code{\dorian} (dórico).

Este comando establece la propiedad de contexto
@code{Staff.keySignature}.  Se pueden especificar armaduras no estándar
estableciendo esta propiedad directamente.

Las alteraciones accidentales y las armaduras son una frecuente causa de confusión para los nuevos usuarios,
porque las notas sin alteración pueden llevar signos de becuadro en función de la armadura.
Para leer más información, consulte @ref{Accidentals} o @ref{Accidentals and key signatures}.

@lilypond[quote,ragged-right,verbatim,relative=2,fragment]
\key g \major
f1
fis
@end lilypond


@commonprop

Se imprime un símbolo de becuadro para cancelar las alteraciones anteriores.  Se puede
suprimir esto estableciendo la propiedad @code{Staff.printKeyCancellation}.

@lilypond[quote,fragment,ragged-right,fragment,verbatim,relative=2]
\key d \major
a b cis d
\key g \minor
a bes c d
\set Staff.printKeyCancellation = ##f
\key d \major
a b cis d
\key g \minor
a bes c d
@end lilypond


@seealso

Referencia del programa: @internalsref{KeyCancellation},
@internalsref{KeySignature}.


@node Time signature
@subsection Time signature

@cindex Indicación de compás
@cindex metro, medida
@funindex \time

La indicación de compás indica el metro de la pieza: su patrón regular de
partes fuertes y dábiles.  Se denota por una fracción al comienzo del
pentagrama.

La indicación de compás se estbablece mediante el comando @code{\time}

@lilypond[quote,ragged-right,fragment,verbatim]
\time 2/4 c'2 \time 3/4 c'2.
@end lilypond

@commonprop

Se puede personalizar el símbolo que se imprime mediante la propiedad @code{style}.
Un valor de @code{#'()} produce un estilo de fracción para los compases de 4/4 y
de 2/2,

@lilypond[fragment,quote,ragged-right,verbatim]
\time 4/4 c'1
\time 2/2 c'1
\override Staff.TimeSignature #'style = #'()
\time 4/4 c'1
\time 2/2 c'1
@end lilypond

Existen muchas opciones para su presentación.  Consulte @ref{Ancient time
signatures} para ver más ejemplos.

@code{\time} establece las propiedades @code{timeSignatureFraction},
@code{beatLength} y @code{measureLength} en el contexto @code{Timing},
cuyo nombre alternativo normalmente es @internalsref{Score}.  La
propiedad @code{measureLength} determina el lugar en que se deben insertar las barras de compás
y cómo se generan las barras de corchea auromáticas.  La modificación del valor de
@code{timeSignatureFraction} también provoca que se imprima el símbolo.

Están disponibles más opciones a través de la función de Scheme
@code{set-time-signature}.  En combinación con el grabador
@internalsref{Measure_grouping_engraver} (agrupación de compases), creará signos de
@internalsref{MeasureGrouping}.  Estos signos facilitan la lectura de música moderna
rítmicamente compleja.  En el siguiente ejemplo el compás de 9/8
se subdivide en 2, 2, 2 y 3.  Eseto se pasa a
@code{set-time-signature} como un tercer argumento @code{(2 2 2 3)}

@lilypond[quote,ragged-right,verbatim]
\score {
  \relative c'' {
    #(set-time-signature 9 8 '(2 2 2 3))
    g8[ g] d[ d] g[ g] a8[( bes g]) |
    #(set-time-signature 5 8 '(3 2))
    a4. g4
  }
  \layout {
    \context {
      \Staff
      \consists "Measure_grouping_engraver"
    }
  }
}
@end lilypond


@seealso

Referencia del programa: @internalsref{TimeSignature} y
@internalsref{Timing_translator}.

Ejemplos: @inputfileref{input/@/test,compound@/-time@/.ly}.


@refbugs

EL barrado automático no utiliza la agrupación de compases especificada con
@code{set-time-signature}.


@node Partial measures
@subsection Partial measures

@cindex anacrusa
@cindex parte al alzar
@cindex compás parcial
@cindex parcial, compás
@cindex acortar compases
@funindex \partial

Los comases parciales como las anacrusas o partes al alzar se escriben
usando la construcción

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
\partial 16*5 c16 cis d dis e | a2. c,4 | b2
@end lilypond

La sintaxis de este comando es la siguiente:

@example
\partial @var{duración}
@end example

donde @code{duración} es el valor rítmico que se se debe añadir antes del siguiente compás.

Esto se traduce internamente a

@example
\set Timing.measurePosition = -@var{longitud de la duración}
@end example

La propiedad @code{measurePosition} contiene un número racional
que indica qué parte del compás ha transcurrido hasta el momento.
Observe que es un número negativo; @code{\partial 4} se traduce internamente
con el significado de @qq{queda un valor de negra en este compás}.


@refbugs

Este comando no tiene en cuenta los mordentes al comienzo
de la música.  Cuando una pieza comienza con mordentes en la anacrusa,
el @code{\partial} debe escribirse después de las notas del mordente

@lilypond[verbatim,quote,ragged-right,relative,fragment]
\grace f16
\partial 4
g4
a2 g2
@end lilypond

El uso de @code{\partial} está previsto solamente para el comienzo de una
pieza.  Si se emplea después del comienzo se obtendrán varias advertencias
desagradables.


@node Bar lines
@subsection Bar lines

@cindex Barras de compás
@funindex \bar
@cindex líneas divisorias
@cindex barras de repetición

Las líneas divisorias delimitan a los compases pero también se pueden usar
para indicar las repeticiones.  Normalmente se insertan de manera automática.
Los saltos de línea solamente pueden producirse sobre las barras de compás.

Se pueden forzar tipos especiales de línea divisoria con 
el comando @code{\bar}

@lilypond[quote,ragged-right,relative=2,fragment,verbatim]
c4 \bar "|:" c4
@end lilypond

Se encuentran disponibles los siguientes tipos de barra:

@lilypondfile[ragged-right,quote]{bar-lines.ly}

Además se puede especificar @code{"||:"}, que equivale a
@code{"|:"} excepto en los saltos de línea, en que produce una doble barra
al final de la línea y una repetición izquierda (de comienzo) al principio de
la línea siguiente.

Para permitir un salto de línea donde no hay ninguna línea divisoria visible,
utilice

@example
\bar ""
@end example

@noindent
De esta manera se insertará una barra invisible de compás y se hará posible
el salto de línea en este punto (sin incrementar el contador de los números de compás).

En las partituras con muchos pentragramas, un comando @code{\bar} en uno de ellos se aplica
automáticamente a todos los demás.  Las líneas resultantes se conectan entre los distintos pentagramas
de un @code{StaffGroup}, @code{PianoStaff} o @code{ChoirStaff}.

@lilypond[quote,ragged-right,fragment,verbatim]
<<
  \new StaffGroup <<
    \new Staff {
      e'4 d'
      \bar "||"
      f' e'
    }
    \new Staff { \clef bass c4 g e g }
  >>
  \new Staff { \clef bass c2 c2 }
>>
@end lilypond


@commonprop

@funindex whichBar
@funindex repeatCommands
@funindex defaultBarType

El comando @code{\bar }@var{tipo_de_barra} es una forma corta de hacer
@code{\set Timing.whichBar = }@var{tipo_de_barra}.  Cuando @code{whichBar}
se establece con el valor de una cadena, se crea una línea divisoria de ese tipo.

Una líne divisoria se crea cuando se establece la propiedad @code{whichBar}.
Al comienzo del compás su valor se toma de
@code{Timing.defaultBarType}.  Los contenidos de los @code{repeatCommands} se
utilizan para sobreescribir a las barras de compás por omisión.

Le recomendamos que utilice siempre @code{\repeat} para hacer repeticiones.
Consulte @ref{Repeats}.


@seealso

En este manual: @ref{Repeats}, @ref{System start delimiters}.

Referencia del programa: @internalsref{BarLine} (creada al nivel de
@internalsref{Staff} (pentagrama)), @internalsref{SpanBar} (a través de los pentagramas).


@node Unmetered music
@subsection Unmetered music

@cindex cadencia
@funindex \cadenzaOn
@funindex \cadenzaOff

Las líneas divisorias y los números de compás se calculan autmáticamente.
Para música sin compasear (por ejemplo cadencias), esto no es deseable.
Para desactivar las barras y los números de compás automáticos, utilice los comandos
@code{\cadenzaOn} y @code{\cadenzaOff}.

@lilypond[verbatim,quote,ragged-right,relative=2,fragment]
c4 d e d
\cadenzaOn
c4 c d8 d d f4 g4.
\cadenzaOff
\bar "|"
d4 e d c
@end lilypond


@refbugs

LilyPond insertará saltos de línea y de página solamente en las barras de compás.
A menos que la música sin compasear acabe antes del final de la línea del pentagrama,
tendrá que insertar barras de compás invisibles

@example
\bar ""
@end example

@noindent
para indicar dónde se pueden producir los saltos.


@node System start delimiters
@subsection System start delimiters

@cindex comienzo del sistema
@cindex Pentagramas, varios
@cindex corchete vertical
@cindex llave vertical
@cindex pentagramas de piano
@cindex pentagramas, grupo de
@cindex pauta de coro

Muchas partituras constan de más de un pentagrama.  Estos pentagramas se pueden
unir de cuatro formas distintas:

@itemize @bullet
@item El grupo comienza con una llave a la izquierda y las líneas de compás
están conectadas.  Esto se hace con el contexto @internalsref{GrandStaff}.

@lilypond[verbatim,ragged-right,quote]
\new GrandStaff
\relative <<
  \new Staff { c1 c }
  \new Staff { c c }
>>
@end lilypond

@item El grupo comienza con un corchete recto y las líneas de compás están conectadas.
Esto se hace con el contexto @internalsref{StaffGroup}

@lilypond[verbatim,ragged-right,quote]
\new StaffGroup
\relative <<
  \new Staff { c1 c }
  \new Staff { c c }
>>
@end lilypond

@item El grupo comienza con un corchete recto pero las líneas de compás no están conectadas.
Esto se hace con el contexto @internalsref{ChoirStaff}.

@lilypond[verbatim,ragged-right,quote]
\new ChoirStaff
\relative <<
  \new Staff { c1 c }
  \new Staff { c c }
>>
@end lilypond

@item El grupo comienza con una línea vertical.  Las líneas de compás
no están conectadas.  Ésta es la opción por defecto para la partitura.

@lilypond[verbatim,ragged-right,quote]
\relative <<
  \new Staff { c1 c }
  \new Staff { c c }
>>
@end lilypond
@end itemize


@seealso

Las barras de compás al principio de cada sistema son
@internalsref{SystemStartBar}, @internalsref{SystemStartBrace} y
@internalsref{SystemStartBracket}.  En cada contexto solamente se
crea uno de estos tipos, y ese tipo está determinado por la propiedad
@internalsref{systemStartDelimiter}.


@commonprop

Los delimitadores del comienzo del sistema se pueden anidar muchas veces:

@lilypond[quote,ragged-right,verbatim]
\new StaffGroup 
\relative <<
  \set StaffGroup.systemStartDelimiterHierarchy
    = #'(SystemStartSquare (SystemStartBracket a (SystemStartSquare b)) d)
  \new Staff { c1 }
  \new Staff { c1 }
  \new Staff { c1 }
  \new Staff { c1 }
  \new Staff { c1 }
>>
@end lilypond


@node Staff symbol
@subsection Staff symbol

@cindex ajuste del símbolo del pentagrama

Las notas, signos dinámicos, etc. están agrupados con un conjunto de líneas horizontales
que reciben el nombre de pentagrama o pauta (@q{staff}, en plural @q{staves}).  En
LilyPond, estas líneas se dibujan utilizando un objeto de presentación separado
que se llama el @code{staff symbol} (el símbolo del pentagrama).

El símbolo del pentagrama se puede ajustar en el número, grosor
y separación de las líneas, usando las propiedades.  Esto se demuestra en los
archivos de ejemplo
@inputfileref{input/@/test,staff@/-lines@/.ly} y
@inputfileref{input/@/test,staff@/-size@/.ly}.

Además, los pentagramas se pueden iniciar e interrumpir libremente.  Esto se
hace con @code{\startStaff} y @code{\stopStaff}.

@lilypond[verbatim,relative=2,fragment]
b4 b
\override Staff.StaffSymbol #'line-count = 2
\stopStaff \startStaff
b b
\revert Staff.StaffSymbol #'line-count
\stopStaff \startStaff
b b
@end lilypond

En combinación con los pentagramas ocultos o franceses,
esto se puede usar para componer tipográficamente secciones de ossia.  He aquí un ejemplo:

@cindex ossia

@lilypondfile{ossia.ly}

@cindex pentagrama, establecer el número de líneas del
@cindex pentagrama, establecer el grosor de las líneas del
@cindex grosor de las líneas del pentagrama, establecer
@cindex número de líneas del pentagrama, establecer

@seealso

Referencia del programa: @internalsref{StaffSymbol}.

Ejemplos: @inputfileref{input/@/test,staff@/-lines@/.ly},
@inputfileref{input/@/test@/,ossia.ly},
@inputfileref{input/@/test,staff@/-size@/.ly},
@lsr{staff,staff-line-positions.ly}


@node Writing music in parallel
@subsection Writing music in parallel

@cindex Escribir música en paralelo
@cindex Música intercalada

La música para varias partes se puede intercalar

@lilypond[quote,fragment,verbatim]
\parallelMusic #'(voiceA voiceB) {
  r8     g'16[ c''] e''[ g' c'' e''] r8     g'16[ c''] e''[ g' c'' e''] |
  c'2                                c'2                                |
  r8     a'16[ d''] f''[ a' d'' f''] r8     a'16[ d''] f''[ a' d'' f''] |
  c'2                                c'2                                |
}
\new StaffGroup <<
  \new Staff \new Voice \voiceA
  \new Staff \new Voice \voiceB
>>
@end lilypond

Esto funciona de manera aceptable para música de piano

@lilypond[quote,verbatim]
music = {
  \key c \major
  \time 4/4
  \parallelMusic #'(voiceA voiceB voiceC voiceD) {
    % Bar 1
    r8  g'16[ c''] e''[ g' c'' e''] r8  g'16[ c''] e''[ g' c''
e''] |
    c'2                                 c'2 |
    r8  a16[ d'] f'[ a d' f']       r8  a16[ d'] f'[ a d' f'] |
    c2                                  c2 |

    % Bar 2
    a'8 b'      c'' d''    e'' f''    g'' a'' |
    d'4         d'         d'         d' |
    c16 d e f   d e f g    e f g a    f g a b |
    a,4         a,4        a,4        a,4 |

    % Bar 3 ...
  }
}

\score {
  \new PianoStaff <<
    \music
    \new Staff <<
      \voiceA \\
      \voiceB
    >>
    \new Staff {
      \clef bass
      <<
        \voiceC \\
        \voiceD
      >>
    }
  >>
}
@end lilypond


@node Connecting notes
@section Connecting notes

This section deals with notation that affects groups of notes.

@menu
* Ties::                        
* Slurs::                       
* Phrasing slurs::              
* Laissez vibrer ties::         
* Automatic beams::             
* Manual beams::                
* Grace notes::                 
@end menu


@node Ties
@subsection Ties

@cindex tie
@funindex ~

A tie connects two adjacent note heads of the same pitch.  The tie in
effect extends the length of a note.  Ties should not be confused with
slurs, which indicate articulation, or phrasing slurs, which indicate
musical phrasing.  A tie is entered using the tilde symbol @samp{~}

@lilypond[quote,ragged-right,fragment,verbatim]
e' ~ e' <c' e' g'> ~ <c' e' g'>
@end lilypond

When a tie is applied to a chord, all note heads whose pitches match
are connected.  When no note heads match, no ties will be created.  Chords
may be partially tied by placing the tie inside the chord,

@lilypond[quote,ragged-right,fragment,verbatim,relative=1]
<c~ e g~ b> <c e g b>
@end lilypond

A tie is just a way of extending a note duration, similar to the
augmentation dot.  The following example shows two ways of notating
exactly the same concept

@lilypond[quote,fragment,ragged-right]
\time 3/4 c'2. c'2 ~ c'4
@end lilypond

@noindent
Ties are used either when the note crosses a bar line, or when dots
cannot be used to denote the rhythm.  When using ties, larger note
values should be aligned to subdivisions of the measure, such as

@lilypond[fragment,quote,ragged-right]
\relative {
  r8 c8 ~ c2 r4 | r8^"not" c2 ~ c8 r4
}
@end lilypond

If you need to tie a lot of notes over bars, it may be easier to use
automatic note splitting (see @ref{Automatic note splitting}).  This
mechanism automatically splits long notes, and ties them across bar
lines.

@funindex \repeatTie

When a second alternative of a repeat starts with a tied note, you
have to repeat the tie. This can be achieved with @code{\repeatTie},

@lilypond[fragment,quote,ragged-right,relative=2]
r <c e g>\repeatTie
@end lilypond

@cindex repeating ties
@cindex volta brackets and ties

@commonprop

Ties are sometimes used to write out arpeggios.  In this case, two tied
notes need not be consecutive.  This can be achieved by setting the
@code{tieWaitForNote} property to true. The same feature is also useful,
for example, to tie a tremolo to a chord. For example,

@lilypond[fragment,verbatim,relative=1,ragged-right,quote]
\set tieWaitForNote = ##t
\grace { c16[~ e~ g]~ } <c, e g>2
\repeat "tremolo" 8 { c32~ c'~ } <c c,>1
e8~ c~ a~ f~ <e' c a f>2
@end lilypond

Ties may be engraved manually by changing the @code{tie-configuration}
property.  The first number indicates the distance from the center
of the staff in staff-spaces, and the second number indicates the
direction (1=up, -1=down).

@lilypond[fragment,verbatim,relative=1,ragged-right,quote]
<c e g>2~ <c e g> |
\override TieColumn #'tie-configuration =
  #'((0.0 . 1) (-2.0 . 1) (-4.0 . 1))
<c e g>~ <c e g> |
@end lilypond


@refcommands


@funindex \tieUp
@code{\tieUp},
@funindex \tieDown
@code{\tieDown},
@funindex \tieNeutral
@code{\tieNeutral},
@funindex \tieDotted
@code{\tieDotted},
@funindex \tieDashed
@code{\tieDashed},
@funindex \tieSolid
@code{\tieSolid}.


@seealso

In this manual: @ref{Automatic note splitting}.

Program reference: @internalsref{Tie}.


@refbugs

Switching staves when a tie is active will not produce a slanted tie.

Changing clefs or octavations during a tie is not really
well-defined.  In these cases, a slur may be preferable.


@node Slurs
@subsection Slurs

@cindex Slurs

A slur indicates that notes are to be played bound or
@emph{legato}.  They are entered using parentheses

@lilypond[quote,ragged-right,relative=2,fragment,verbatim]
f( g a) a8 b( a4 g2 f4)
<c e>2( <b d>2)
@end lilypond

The direction of a slur can be specified with
@code{\slur@emph{DIR}}, where @code{@emph{DIR}} is
either @code{Up}, @code{Down}, or @code{Neutral} (automatically
selected).

However, there is a convenient shorthand for forcing slur
directions.  By adding @code{_} or @code{^} before the opening
parentheses, the direction is also set.  For example,

@lilypond[relative=2,ragged-right,quote,verbatim,fragment]
c4_( c) c^( c)
@end lilypond

Only one slur can be printed at once.  If you need to print a long
slur over a few small slurs, please see @ref{Phrasing slurs}.


@commonprop

Some composers write two slurs when they want legato chords.  This can
be achieved in LilyPond by setting @code{doubleSlurs},

@lilypond[verbatim,ragged-right,relative,fragment,quote]
\set doubleSlurs = ##t
<c e>4 ( <d f> <c e> <d f> )
@end lilypond


@refcommands

@funindex \slurUp
@code{\slurUp},
@funindex \slurDown
@code{\slurDown},
@funindex \slurNeutral
@code{\slurNeutral},
@funindex \slurDashed
@code{\slurDashed},
@funindex \slurDotted
@code{\slurDotted},
@funindex \slurSolid
@code{\slurSolid}.

@seealso

Program reference: @seeinternals{Slur}.


@node Phrasing slurs
@subsection Phrasing slurs

@cindex phrasing slurs
@cindex phrasing marks

A phrasing slur (or phrasing mark) connects notes and is used to
indicate a musical sentence.  It is written using @code{\(} and @code{\)}
respectively

@lilypond[quote,ragged-right,fragment,verbatim,relative=1]
\time 6/4 c'\( d( e) f( e) d\)
@end lilypond

Typographically, the phrasing slur behaves almost exactly like a
normal slur.  However, they are treated as different objects.  A
@code{\slurUp} will have no effect on a phrasing slur; instead, use
@code{\phrasingSlurUp}, @code{\phrasingSlurDown}, and
@code{\phrasingSlurNeutral}.

You cannot have simultaneous phrasing slurs.


@refcommands

@funindex \phrasingSlurUp
@code{\phrasingSlurUp},
@funindex \phrasingSlurDown
@code{\phrasingSlurDown},
@funindex \phrasingSlurNeutral
@code{\phrasingSlurNeutral}.


@seealso

Program reference: @internalsref{PhrasingSlur}.


@node Laissez vibrer ties
@subsection Laissez vibrer ties
@cindex Laissez vibrer
@cindex Ties, laissez vibrer

L.v. ties (laissez vibrer) indicate that notes must not be damped at the
end. It is used in notation for piano, harp and other string and
percussion instruments. They can be entered using @code{\laissezVibrer},

@lilypond[fragment,ragged-right,verbatim,relative=1]
<c f g>\laissezVibrer
@end lilypond

@seealso

Program reference:
@internalsref{LaissezVibrerTie}
@internalsref{LaissezVibrerTieColumn}

Example files:
@lsr{connecting,laissez-vibrer-ties.ly}


@node Automatic beams
@subsection Automatic beams

LilyPond inserts beams automatically

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
\time 2/4 c8 c c c \time 6/8 c c c c8. c16 c8
@end lilypond

When these automatic decisions are not good enough, beaming can be
entered explicitly.  It is also possible to define beaming patterns
that differ from the defaults.  See @ref{Setting automatic beam behavior}
for details.

Individual notes may be marked with @code{\noBeam} to prevent them
from being beamed

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
\time 2/4 c8 c\noBeam c c
@end lilypond


@seealso

Program reference: @internalsref{Beam}.


@node Manual beams
@subsection Manual beams

@cindex beams, manual
@funindex ]
@funindex [

In some cases it may be necessary to override the automatic beaming
algorithm.  For example, the autobeamer will not put beams over rests
or bar lines.  Such beams are specified manually by marking the begin
and end point with @code{[} and @code{]}

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
{
  r4 r8[ g' a r8] r8 g[ | a] r8
}
@end lilypond


@commonprop

@funindex stemLeftBeamCount
@funindex stemRightBeamCount

Normally, beaming patterns within a beam are determined automatically.
If necessary, the properties @code{stemLeftBeamCount} and
@code{stemRightBeamCount} can be used to override the defaults.  If
either property is set, its value will be used only once, and then it
is erased

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
{
   f8[ r16
      f g a]
   f8[ r16
   \set stemLeftBeamCount = #1
      f g a]
}
@end lilypond

The property @code{subdivideBeams} can be set in order to subdivide
all 16th or shorter beams at beat positions, as defined by the
@code{beatLength} property.

@lilypond[fragment,quote,relative=2,verbatim]
c16[ c c c c c c c]
\set subdivideBeams = ##t
c16[ c c c c c c c]
\set Score.beatLength = #(ly:make-moment 1 8)
c16[ c c c c c c c]
@end lilypond
@funindex subdivideBeams

@noindent
For more information about @code{make-moment}, see
@ref{Time administration}.

Line breaks are normally forbidden when beams cross bar lines.  This
behavior can be changed by setting @code{breakable}.

@funindex breakable

@cindex beams and line breaks
@cindex beams, kneed
@cindex kneed beams
@cindex auto-knee-gap


@refbugs

Kneed beams are inserted automatically when a large gap is detected
between the note heads.  This behavior can be tuned through the object.

Automatically kneed cross-staff beams cannot be used together with
hidden staves.  See @ref{Hiding staves}.

Beams do not avoid collisions with symbols around the notes, such as
texts and accidentals.


@node Grace notes
@subsection Grace notes

@funindex \grace
@cindex ornaments
@cindex grace notes
@cindex appoggiatura
@cindex acciaccatura

Grace notes are ornaments that are written out.  The most common ones
are acciaccatura, which should be played as very short.  It is denoted
by a slurred small note with a slashed stem.  The appoggiatura is a
grace note that takes a fixed fraction of the main note, and is
denoted as a slurred note in small print without a slash.  They
are entered with the commands @code{\acciaccatura} and
@code{\appoggiatura}, as demonstrated in the following example

@lilypond[quote,ragged-right,relative=2,verbatim,fragment]
b4 \acciaccatura d8 c4 \appoggiatura e8 d4
\acciaccatura { g16[ f] } e4
@end lilypond

Both are special forms of the @code{\grace} command.  By prefixing this
keyword to a music expression, a new one is formed, which will be
printed in a smaller font and takes up no logical time in a measure.

@lilypond[quote,ragged-right,relative=2,verbatim,fragment]
c4 \grace c16 c4
\grace { c16[ d16] } c2 c4
@end lilypond

@noindent
Unlike @code{\acciaccatura} and @code{\appoggiatura}, the
@code{\grace} command does not start a slur.

Internally, timing for grace notes is done using a second, @q{grace}
timing.  Every point in time consists of two rational numbers: one
denotes the logical time, one denotes the grace timing.  The above
example is shown here with timing tuples

@lilypond[quote,ragged-right]
<<
  \relative c''{
    c4 \grace c16 c4 \grace {
    c16[ d16] } c2 c4
  }
  \new Lyrics \lyricmode {
    \override LyricText #'font-family = #'typewriter

    \markup { (0,0) } 4
    \grace { \markup {
      ( \fraction 1 4 , \fraction -1 16 ) } 16 }
    \markup { (\fraction 1 4 , 0 ) } 4
    \grace {
      \markup { (\fraction 2 4 , \fraction "-1" 8 ) } 16
      \markup { (\fraction 2 4 , \fraction "-1" 16 ) } 16
    }
    \markup { ( \fraction 2 4 , 0 ) }
  }
>>
@end lilypond

The placement of grace notes is synchronized between different staves.
In the following example, there are two sixteenth grace notes for
every eighth grace note

@lilypond[quote,ragged-right,relative=2,verbatim,fragment]
<< \new Staff { e4 \grace { c16[ d e f] } e4 }
   \new Staff { c4 \grace { g8[ b] } c4 } >>
@end lilypond

@funindex \afterGrace

If you want to end a note with a grace, use the @code{\afterGrace}
command.  It takes two arguments: the main note, and the grace notes
following the main note.

@lilypond[ragged-right, verbatim,relative=2,fragment]
c1 \afterGrace d1 { c16[ d] } c4
@end lilypond

This will put the grace notes after a @q{space} lasting 3/4 of the
length of the main note.  The fraction 3/4 can be changed by setting
@code{afterGraceFraction}, ie.

@example
afterGraceFraction = #(cons 7 8)
@end example

@noindent
will put the grace note at 7/8 of the main note.

The same effect can be achieved manually by doing

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
\new Voice {
  << { d1^\trill_( }
     { s2 \grace { c16[ d] } } >>
  c4)
}
@end lilypond

@noindent
By adjusting the duration of the skip note (here it is a half-note),
the space between the main-note and the grace is adjusted.

A @code{\grace} section will introduce special typesetting settings,
for example, to produce smaller type, and set directions.  Hence, when
introducing layout tweaks, they should be inside the grace section,
for example,

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
\new Voice {
  \acciaccatura {
    \stemDown
    f16->
    \stemNeutral
  }
  g4
}
@end lilypond

@noindent
The overrides should also be reverted inside the grace section.

The layout of grace sections can be changed throughout the music using
the function @code{add-grace-property}.  The following example
undefines the @code{Stem} direction for this grace, so
that stems do not always point up.

@example
\new Staff @{
  #(add-grace-property 'Voice 'Stem 'direction '())
  @dots{}
@}
@end example

@noindent
Another option is to change the variables @code{startGraceMusic},
@code{stopGraceMusic}, @code{startAcciaccaturaMusic},
@code{stopAcciaccaturaMusic}, @code{startAppoggiaturaMusic},
@code{stopAppoggiaturaMusic}.  More information is in the file
@file{ly/@/grace@/-init@/.ly}.

@noindent
The slash through the stem in acciaccaturas can be obtained
in other situations by @code{\override Stem  #'stroke-style = #"grace"}.


@commonprop

Grace notes may be forced to use floating spacing,

@lilypond[relative=2,ragged-right]
<<
  \override Score.SpacingSpanner #'strict-grace-spacing = ##t
  \new Staff {
     c'4
     \afterGrace
     c'4
     { c'16[ c'8 c'16] }
     c'4
  }  
  \new Staff {
     c'16[ c'16 c'16 c'16]
     c'16[ c'16 c'16 c'16]
     c'4
  }
>>
@end lilypond


@seealso

Program reference: @internalsref{GraceMusic}.


@refbugs

A score that starts with a @code{\grace} section needs an explicit
@code{\new Voice} declaration, otherwise the main note and the grace
note end up on different staves.

Grace note synchronization can also lead to surprises.  Staff notation,
such as key signatures, bar lines, etc., are also synchronized.  Take
care when you mix staves with grace notes and staves without, for example,

@lilypond[quote,ragged-right,relative=2,verbatim,fragment]
<< \new Staff { e4 \bar "|:" \grace c16 d4 }
   \new Staff { c4 \bar "|:" d4 } >>
@end lilypond

@noindent
This can be remedied by inserting grace skips of the corresponding
durations in the other staves. For the above example

@example
\new Staff @{ c4 \bar "|:" \grace s16 d4 @}
@end example

Grace sections should only be used within sequential music
expressions.  Nesting or juxtaposing grace sections is not supported,
and might produce crashes or other errors.



@node Expressive marks
@section Expressive marks

Expressive marks help musicians to bring more to the music than simple
notes and rhythms.

@menu
* Articulations::               
* Fingering instructions::      
* Dynamics::                    
* Breath marks::                
* Trills::                      
* Glissando::                   
* Arpeggio::                    
* Falls and doits::             
@end menu


@node Articulations
@subsection Articulations

@cindex Articulations
@cindex scripts
@cindex ornaments

A variety of symbols can appear above and below notes to indicate
different characteristics of the performance.  They are added to a note
by adding a dash and the character signifying the
articulation.  They are demonstrated here

@lilypondfile[quote,ragged-right]{script-abbreviations.ly}

The meanings of these shorthands can be changed.  See
@file{ly/@/script@/-init@/.ly} for examples.

The script is automatically placed, but the direction can be forced as
well.  Like other pieces of LilyPond code, @code{_} will place them
below the staff, and @code{^} will place them above.

@lilypond[quote,ragged-right,fragment,verbatim]
c''4^^ c''4_^
@end lilypond

Other symbols can be added using the syntax
@var{note}@code{\}@var{name}.  Again, they
can be forced up or down using @code{^} and @code{_},
e.g.,

@lilypond[quote,ragged-right,verbatim,fragment,relative=2]
c\fermata c^\fermata c_\fermata
@end lilypond

@cindex accent
@cindex marcato
@cindex staccatissimo
@cindex espressivo
@cindex fermata
@cindex stopped
@cindex staccato
@cindex portato
@cindex tenuto
@cindex upbow
@cindex downbow
@cindex foot marks
@cindex organ pedal marks
@cindex turn
@cindex open
@cindex flageolet
@cindex reverseturn
@cindex trill
@cindex prall
@cindex mordent
@cindex prallprall
@cindex prallmordent
@cindex prall, up
@cindex prall, down
@cindex mordent
@cindex thumb marking
@cindex segno
@cindex coda
@cindex varcoda

Here is a chart showing all scripts available,

@lilypondfile[ragged-right,quote]{script-chart.ly}


@commonprop

The vertical ordering of scripts is controlled with the
@code{script-priority} property.  The lower this number, the closer it
will be put to the note.  In this example, the
@internalsref{TextScript} (the sharp symbol) first has the lowest
priority, so it is put lowest in the first example.  In the second, the
prall trill (the @internalsref{Script}) has the lowest, so it is on the
inside.  When two objects have the same priority, the order in which
they are entered decides which one comes first.

@lilypond[verbatim,relative=3,ragged-right,fragment,quote]
\once \override TextScript #'script-priority = #-100
a4^\prall^\markup { \sharp }

\once \override Script #'script-priority = #-100
a4^\prall^\markup { \sharp }
@end lilypond


@seealso

Program reference: @internalsref{Script}.


@refbugs

These signs appear in the printed output but have no effect on the
MIDI rendering of the music.


@node Fingering instructions
@subsection Fingering instructions

@cindex fingering
@cindex finger change

Fingering instructions can be entered using
@example
@var{note}-@var{digit}
@end example
For finger changes, use markup texts

@lilypond[quote,verbatim,ragged-right,fragment,relative=1]
c4-1 c-2 c-3 c-4
c^\markup { \finger "2 - 3" }
@end lilypond

You can use the thumb-script to indicate that a note should be
played with the thumb (e.g., in cello music)
@lilypond[quote,verbatim,ragged-right,fragment,relative=2]
<a_\thumb a'-3>8 <b_\thumb b'-3>
@end lilypond

Fingerings for chords can also be added to individual notes
of the chord by adding them after the pitches
@lilypond[quote,verbatim,ragged-right,fragment,relative=2]
< c-1 e-2 g-3 b-5 >4
@end lilypond


@commonprop

You may exercise greater control over fingering chords by
setting @code{fingeringOrientations}

@lilypond[quote,verbatim,ragged-right,fragment,relative=1]
\set fingeringOrientations = #'(left down)
<c-1 es-2 g-4 bes-5 > 4
\set fingeringOrientations = #'(up right down)
<c-1 es-2 g-4 bes-5 > 4
@end lilypond

Using this feature, it is also possible to put fingering instructions
very close to note heads in monophonic music,

@lilypond[verbatim,ragged-right,quote,fragment]
\set fingeringOrientations = #'(right)
<es'-2>4
@end lilypond


@seealso

Program reference: @internalsref{Fingering}.

Examples: @lsr{expressive,fingering-chords.ly}


@node Dynamics
@subsection Dynamics

@cindex Dynamics
@funindex \pppp
@funindex \ppp
@funindex \pp
@funindex \p
@funindex \mp
@funindex \mf
@funindex \f
@funindex \ff
@funindex \fff
@funindex \ffff
@funindex \fp
@funindex \sf
@funindex \sff
@funindex \sp
@funindex \spp
@funindex \sfz
@funindex \rfz

Absolute dynamic marks are specified using a command after a note
@code{c4\ff}.  The available dynamic marks are @code{\ppppp},
@code{\pppp}, @code{\ppp},
@code{\pp}, @code{\p}, @code{\mp}, @code{\mf}, @code{\f}, @code{\ff},
@code{\fff}, @code{\ffff}, @code{\fp}, @code{\sf}, @code{\sff},
@code{\sp}, @code{\spp}, @code{\sfz}, and @code{\rfz}.

@lilypond[quote,verbatim,ragged-right,fragment,relative=2]
c\ppp c\pp c \p c\mp c\mf c\f c\ff c\fff
c2\fp c\sf c\sff c\sp c\spp c\sfz c\rfz
@end lilypond

@funindex \<
@funindex \>
@funindex \!

A crescendo mark is started with @code{\<} and terminated with
@code{\!} or an absolute dynamic.  A decrescendo is started with
@code{\>} and is also terminated with @code{\!} or an absolute
dynamic.  @code{\cr} and @code{\decr} may be used instead of
@code{\<} and @code{\>}.  Because these marks are bound to notes, you must
use spacer notes if multiple marks are needed during one note

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
c\< c\! d\> e\!
<< f1 { s4 s4\< s4\! \> s4\! } >>
@end lilypond

@noindent
A hairpin normally starts at the left edge of the beginning note
and ends on the right edge of the ending note.  If the ending
note falls on the downbeat, the hairpin ends on the immediately
preceding barline. This may be modified by setting the
@code{hairpinToBarline} property,

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
\set hairpinToBarline = ##f
c4\< c2. c4\!
@end lilypond

In some situations the @code{\espressivo} articulation mark may
be suitable to indicate a crescendo and decrescendo on the one note,

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
c2 b4 a g1\espressivo
@end lilypond

This may give rise to very short hairpins.  Use @code{minimum-length}
in @internalsref{Voice}.@internalsref{Hairpin} to lengthen them, for
example

@example
\override Voice.Hairpin #'minimum-length = #5
@end example

@cindex al niente
@cindex niente, al

Hairpins may be printed with a circled tip (al niente notation) by
setting the @code{circled-tip} property,

@lilypond[quote,ragged-right,fragment,relative=2,verbatim]
\override Hairpin #'circled-tip = ##t
c2\< c\!
c4\> c\< c2\!
@end lilypond


@cindex crescendo
@cindex decrescendo
@cindex diminuendo

You can also use text saying @emph{cresc.} instead of hairpins

@lilypond[quote,ragged-right,fragment,relative=2,verbatim]
\setTextCresc
c\< d e f\!
\setHairpinCresc
e\> d c b\!
\setTextDecresc
c\> d e f\!
\setTextDim
e\> d c b\!
@end lilypond

You can also supply your own texts
@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
\set crescendoText = \markup { \italic "cresc. poco" }
\set crescendoSpanner = #'dashed-line
a'2\< a a a\!\mf
@end lilypond

To create new dynamic marks or text that should be aligned
with dynamics, see @ref{New dynamic marks}.

Vertical positioning of dynamics is handled by
@internalsref{DynamicLineSpanner}.


@commonprop

Dynamics that occur at, begin on, or end on, the same note
will be vertically aligned.  If you want to ensure that dynamics
are aligned when they do not occur on the same note, you can
increase the @code{staff-padding} property.

@example
\override DynamicLineSpanner #'staff-padding = #4
@end example

You may also use this property if the dynamics are colliding
with other notation.

Crescendi and decrescendi that end on the first note of a
new line are not printed.  To change this behavior, use

@example
\override Score.Hairpin #'after-line-breaking = ##t
@end example

Text style dynamic changes (such as @emph{cresc.} and @emph{dim.})
are printed with a
dashed line showing their extent.  To surpress printing this line, use

@example
\override DynamicTextSpanner #'dash-period = #-1.0
@end example


@refcommands

@funindex \dynamicUp
@code{\dynamicUp},
@funindex \dynamicDown
@code{\dynamicDown},
@funindex \dynamicNeutral
@code{\dynamicNeutral}.


@seealso

Program reference: @internalsref{DynamicText}, @internalsref{Hairpin}.
Vertical positioning of these symbols is handled by
@internalsref{DynamicLineSpanner}.


@node Breath marks
@subsection Breath marks

Breath marks are entered using @code{\breathe}

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
c'4 \breathe d4
@end lilypond


@commonprop

The glyph of the breath mark can be tuned by overriding the
@code{text} property of the @code{BreathingSign} layout object with
any markup text.  For example,
@lilypond[quote,ragged-right,fragment,verbatim,relative=1]
c'4
\override BreathingSign #'text
  = #(make-musicglyph-markup "scripts.rvarcomma")
\breathe
d4
@end lilypond

@seealso

Program reference: @internalsref{BreathingSign}.

Examples: @lsr{expressive,breathing-sign.ly}


@node Trills
@subsection Trills

Short trills are printed like normal articulation; see @ref{Articulations}.

Long running trills are made with @code{\startTrillSpan} and
@code{\stopTrillSpan},

@lilypond[verbatim,ragged-right,relative=2,quote,fragment]
\new Voice {
  << { c1 \startTrillSpan }
     { s2. \grace { d16[\stopTrillSpan e] } } >>
  c4 }
@end lilypond

@cindex Pitched trills

Trills that should be executed on an explicitly specified pitch can be
typeset with the command @code{pitchedTrill},

@lilypond[ragged-right,verbatim,fragment,relative=1,quote]
\pitchedTrill c4\startTrillSpan fis
f\stopTrillSpan
@end lilypond

The first argument is the main note.  The pitch of the second
is printed as a stemless note head in parentheses.


@refcommands

@code{\startTrillSpan},
@funindex \startTrillSpan
@code{\stopTrillSpan}.
@funindex \stopTrillSpan


@seealso

Program reference: @internalsref{TrillSpanner}.


@node Glissando
@subsection Glissando

@cindex Glissando
@funindex \glissando

A glissando is a smooth change in pitch.  It is denoted by a line or a
wavy line between two notes.  It is requested by attaching
@code{\glissando} to a note

@lilypond[quote,ragged-right,fragment,relative=2,verbatim]
c2\glissando c'
\override Glissando #'style = #'zigzag
c2\glissando c,
@end lilypond


@seealso

Program reference: @internalsref{Glissando}.

Example files:
@lsr{expressive,glissando.ly}, @lsr{expressive,line-styles.ly}



@refbugs

Printing text over the line (such as @emph{gliss.}) is not supported.


@node Arpeggio
@subsection Arpeggio

@cindex Arpeggio
@cindex broken chord
@funindex \arpeggio

You can specify an arpeggio sign (also known as broken chord) on a
chord by attaching an @code{\arpeggio} to a chord

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
<c e g c>\arpeggio
@end lilypond

A square bracket on the left indicates that the player should not
arpeggiate the chord

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
\arpeggioBracket
<c' e g c>\arpeggio
@end lilypond

The direction of the arpeggio is sometimes denoted by adding an
arrowhead to the wiggly line

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
\new Voice {
  \arpeggioUp
  <c e g c>\arpeggio
  \arpeggioDown
  <c e g c>\arpeggio
}
@end lilypond


@commonprop

When an arpeggio crosses staves, you may attach an arpeggio to the chords
in both staves and set
@internalsref{PianoStaff}.@code{connectArpeggios}

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
\new PianoStaff <<
  \set PianoStaff.connectArpeggios = ##t
  \new Staff { <c' e g c>\arpeggio }
  \new Staff { \clef bass <c,, e g>\arpeggio }
>>
@end lilypond


@refcommands

@code{\arpeggio},
@funindex \arpeggioUp
@code{\arpeggioUp},
@funindex \arpeggioDown
@code{\arpeggioDown},
@funindex \arpeggioNeutral
@code{\arpeggioNeutral},
@funindex \arpeggioBracket
@code{\arpeggioBracket}.


@seealso

Notation manual: @ref{Ties}, for writing out arpeggios.

Program reference: @internalsref{Arpeggio}.


@refbugs

It is not possible to mix connected arpeggios and unconnected
arpeggios in one @internalsref{PianoStaff} at the same point in time.


@node Falls and doits
@subsection Falls and doits

Falls and doits can be added to notes using the @code{\bendAfter}
command,

@lilypond[fragment,ragged-right,relative=2]
\override Score.SpacingSpanner #'shortest-duration-space = #3.0
c4-\bendAfter #+5
c4-\bendAfter #-3
@end lilypond


@node Repeats
@section Repeats

Repetition is a central concept in music, and multiple notations exist
for repetitions.

@menu
* Repeat types::                
* Repeat syntax::               
* Repeats and MIDI::            
* Manual repeat commands::      
* Tremolo repeats::             
* Tremolo subdivisions::        
* Measure repeats::             
@end menu


@node Repeat types
@subsection Repeat types

@cindex repeats
@funindex \repeat

The following types of repetition are supported

@table @code
@item unfold
Repeated music is fully written (played) out.  This is useful when
entering repetitious music.  This is the only kind of repeat that
is included in MIDI output.

@item volta
Repeats are not written out, but alternative endings (volte) are
printed, left to right with brackets.  This is the standard notation
for repeats with alternatives.  These are not played in MIDI output by
default.


@item tremolo
Make tremolo beams.  These are not played in MIDI output by default.

@item percent
Make beat or measure repeats.  These look like percent signs.  These
are not played in MIDI output by default.  Percent repeats must be
declared within a @code{Voice} context.

@end table


@node Repeat syntax
@subsection Repeat syntax

@cindex volta
@cindex prima volta
@cindex seconda volta

LilyPond has one syntactic construct for specifying different types of
repeats.  The syntax is

@example
\repeat @var{variant} @var{repeatcount} @var{repeatbody}
@end example

If you have alternative endings, you may add
@funindex \alternative
@example
\alternative @{
  @var{alternative1}
  @var{alternative2}
  @var{alternative3}
  @dots{}
@}
@end example

@noindent
where each @var{alternative} is a music expression.  If you do not
give enough alternatives for all of the repeats, the first alternative
is assumed to be played more than once.

Standard repeats are used like this

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
c1
\repeat volta 2 { c4 d e f }
\repeat volta 2 { f e d c }
@end lilypond

With alternative endings

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
c1
\repeat volta 2 {c4 d e f}
\alternative { {d2 d} {f f,} }
@end lilypond

In the following example, the first ending is not a complete
bar (it only had 3 beats).  The beginning of the second ending
contains the 4th beat from the first ending.  This @q{extra}
beat in the second ending is due to the first time ending,
and has nothing to do with the @code{\partial} at the
beginning of the example.

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
\new Staff {
  \partial 4
  \repeat volta 4 { e | c2 d2 | e2 f2 | }
  \alternative { { g4 g g } { a | a a a a | b2. } }
}
@end lilypond

@funindex \repeatTie

Ties may be added to a second ending,

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
c1
\repeat volta 2 {c4 d e f ~ }
\alternative { {f2 d} {f\repeatTie f,} }
@end lilypond

It is possible to shorten volta brackets
by setting @code{voltaSpannerDuration}.  In the next example, the
bracket only lasts one measure, which is a duration of 3/4.

@lilypond[verbatim,ragged-right,quote]
\relative c''{
  \time 3/4
  c c c
  \set Staff.voltaSpannerDuration = #(ly:make-moment 3 4)
  \repeat "volta" 5 { d d d }
  \alternative { { e e e f f f }
  { g g g } }
}
@end lilypond


@seealso

Examples:

Brackets for the repeat are normally only printed over the topmost
staff.  This can be adjusted by setting the @code{voltaOnThisStaff}
property; see

@lsr{repeats,volta@/-multi@/-staff@/.ly}.


@refbugs

@cindex repeat, ambiguous

A nested repeat like

@example
\repeat @dots{}
\repeat @dots{}
\alternative
@end example

@noindent
is ambiguous, since it is is not clear to which @code{\repeat} the
@code{\alternative} belongs.  This ambiguity is resolved by always
having the @code{\alternative} belong to the inner @code{\repeat}.
For clarity, it is advisable to use braces in such situations.

Timing information is not remembered at the start of an alternative,
so after a repeat timing information must be reset by hand; for
example, by setting @code{Score.measurePosition} or entering
@code{\partial}.  Similarly, slurs or ties are also not repeated.

Volta brackets are not vertically aligned.


@node Repeats and MIDI
@subsection Repeats and MIDI

@cindex expanding repeats
@funindex \unfoldRepeats

With a little bit of tweaking, all types of repeats can be present
in the MIDI output.  This is achieved by applying the
@code{\unfoldRepeats} music function.  This function changes all
repeats to unfold repeats.

@lilypond[quote,verbatim,fragment,line-width=8.0\cm]
\unfoldRepeats {
  \repeat tremolo 8 {c'32 e' }
  \repeat percent 2 { c''8 d'' }
  \repeat volta 2 {c'4 d' e' f'}
  \alternative {
    { g' a' a' g' }
    {f' e' d' c' }
  }
}
\bar "|."
@end lilypond

When creating a score file using @code{\unfoldRepeats} for MIDI,
it is necessary to make two @code{\score} blocks: one for MIDI (with
unfolded repeats) and one for notation (with volta, tremolo, and
percent repeats).  For example,

@example
\score @{
  @var{..music..}
  \layout @{ .. @}
@}
\score @{
  \unfoldRepeats @var{..music..}
  \midi @{ .. @}
@}
@end example


@node Manual repeat commands
@subsection Manual repeat commands

@funindex repeatCommands

The property @code{repeatCommands} can be used to control the layout of
repeats.  Its value is a Scheme list of repeat commands.

@table @asis
@item @code{start-repeat}
Print a @code{|:} bar line.

@item @code{end-repeat}
Print a @code{:|} bar line.

@item @code{(volta @var{text})}
Print a volta bracket saying @var{text}: The text can be specified as
a text string or as a markup text, see @ref{Text markup}.  Do not
forget to change the font, as the default number font does not contain
alphabetic characters;

@item @code{(volta #f)}
Stop a running volta bracket.
@end table

@lilypond[quote,ragged-right,verbatim,fragment,relative=2]
c4
  \set Score.repeatCommands = #'((volta "93") end-repeat)
c4 c4
  \set Score.repeatCommands = #'((volta #f))
c4 c4
@end lilypond


@seealso

Program reference: @internalsref{VoltaBracket},
@internalsref{RepeatedMusic},
@internalsref{VoltaRepeatedMusic},
@internalsref{UnfoldedRepeatedMusic}, and
@internalsref{FoldedRepeatedMusic}.


@node Tremolo repeats
@subsection Tremolo repeats

@cindex tremolo beams

To place tremolo marks between notes, use @code{\repeat} with tremolo
style
@lilypond[quote,verbatim,ragged-right]
\new Voice \relative c' {
  \repeat "tremolo" 8 { c16 d16 }
  \repeat "tremolo" 4 { c16 d16 }
  \repeat "tremolo" 2 { c16 d16 }
}
@end lilypond

Tremolo marks can also be put on a single note.  In this case, the
note should not be surrounded by braces.
@lilypond[quote,verbatim,ragged-right]
\repeat "tremolo" 4 c'16
@end lilypond

Similar output is obtained using the tremolo subdivision, described in
@ref{Tremolo subdivisions}.


@seealso

In this manual: @ref{Tremolo subdivisions}, @ref{Repeats}.

Program reference: @internalsref{Beam}, @internalsref{StemTremolo}.


@node Tremolo subdivisions
@subsection Tremolo subdivisions

@cindex tremolo marks
@funindex tremoloFlags

Tremolo marks can be printed on a single note by adding
@q{@code{:}[@var{number}]} after the note.  The number indicates the
duration of the subdivision, and it must be at least 8.  A
@var{length} value of 8 gives one line across the note stem.  If the
length is omitted, the last value (stored in @code{tremoloFlags}) is
used

@lilypond[quote,ragged-right,verbatim,fragment]
c'2:8 c':32 | c': c': |
@end lilypond


@refbugs

Tremolos entered in this way do not carry over into the MIDI output.


@seealso

In this manual: @ref{Tremolo repeats}.

Elsewhere: @internalsref{StemTremolo}.


@node Measure repeats
@subsection Measure repeats

@cindex percent repeats
@cindex measure repeats

In the @code{percent} style, a note pattern can be repeated.  It is
printed once, and then the pattern is replaced with a special sign.
Patterns of one and two measures are replaced by percent-like signs,
patterns that divide the measure length are replaced by slashes.
Percent repeats must be declared within a @code{Voice} context.

@lilypond[quote,verbatim,ragged-right]
\new Voice \relative c' {
  \repeat "percent" 4 { c4 }
  \repeat "percent" 2 { c2 es2 f4 fis4 g4 c4 }
}
@end lilypond

Measure repeats of more than 2 measures get a counter, if you switch
on the @code{countPercentRepeats} property,

@lilypond[relative=2,fragment,quote,verbatim,ragged-right]
\new Voice {
\set countPercentRepeats = ##t
  \repeat "percent" 4 { c1 }
}
@end lilypond



Isolated percents can also be printed. This is done by putting a
multi-measure rest with a different print function,

@lilypond[fragment,verbatim,quote]
\override MultiMeasureRest #'stencil
  = #ly:multi-measure-rest::percent
R1
@end lilypond




@seealso

Program reference: @internalsref{RepeatSlash},
@internalsref{PercentRepeat}, @internalsref{DoublePercentRepeat},
@internalsref{DoublePercentRepeatCounter},
@internalsref{PercentRepeatCounter},
@internalsref{PercentRepeatedMusic}.



