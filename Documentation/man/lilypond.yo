COMMENT(i don't get this)
mailto(janneke@gnu.org)
COMMENT(
	(PIPETHROUGH(echo -n `date '+%d/%b/%y'|tr '[a-z]' '[A-Z]'`)())
)

manpage(LilyPond)
       (1)
	(1998)
       (The LilyPond package)
       (The GNU Project Music Typesetter)

metalC(Automatically generated by yodl(1) from lilypond.yo.)

manpagename(LilyPond)(the GNU Music Typesetter)
cindex(LilyPond)

manpagesynopsis()
        bf(lilypond) [OPTION]... [MUDELA-FILE]...

manpagedescription()

includefile(../BLURB.in)

manpageoptions()
description(
dit(-I,--include=FILE)
    add file(FILE) to the search path for input files.
dit(-M,--midi)
    This disables TeX output. If you have a \midi definition, it will do the 
    midi output only.
dit(-d,--dependencies)
    Also output rules to be included in Makefile.
dit(-D,--debug)
    Turn debugging info on.  GNU LilyPond reads the file file(.dstreamrc), 
    which lists what functions and classes may produce copious debugging
    output.
dit(-s,--safe)
    Disallow untrusted code(\include) directives, backslashes in TeX()
code and named output.
dit(-t,--test)
    Switch on any experimental features.  Not for general public use.
dit(-w,--warranty)
    Show the warranty with which GNU LilyPond comes. (It comes with 
    bf(NO WARRANTY)!)
dit(-o,--output=FILE)
    Set the default output file to file(FILE).
dit(-h,--help)
    Show a summary of usage.
dit(-i,--init=FILE)
    Set init file to file(FILE) (default: file(init.ly)).
dit(--include, -I=DIRECTORY)
    Add file(DIRECTORY) to the search path for input files.
dit(--ignore-version, -V)
    Make incompatible mudela version non-fatal.
)

manpagesection(FEATURES)

This is an overview of the features that GNU LilyPond supports.  For
details on how to use them, you should consult the Mudela tutorial,
which is included with the package.


itemize(
it()ASCII script input, with identifiers (for music reuse),
    customizable notenames, customisable fontset.
it()MIDI output lets you check if you have entered the correct notes.
it()MIDI to Mudela conversion through the mi2mu program.
it()Multiple staffs in one score.  Each staff can have different meters.
it()Beams, slurs, ties, chords, super/subscripts (accents and text)
    triplets, general n-plet (triplet, quadruplets, etc.), lyrics,
    transposition dynamics (both absolute and hairpin style).
it()Multiple voices within one staff; beams optionally shared
    between voices.  Up to four voices is handled cleanly.
it()Multiple scores within one input file.  Each score is output to
    a different file.
it()Clef changes, meter changes, cadenza-mode, key changes, repeat bars.
)

manpagesection(DISCLAIMER)

GNU LilyPond is copyright 1996-1998 by its authors.  GNU LilyPond is
distributed under the terms of the GNU General Public License.  GNU LilyPond 
is provided without any warranty what so ever.
GNU LilyPond may be freely distributed.  For further information consult 
the GNU General Public License, from the file file(COPYING).

manpagesection(PROBLEMS)

There is an extensive list of todoes and bugs.  See file(TODO).  If you
have a problem you should try to find out

itemize(
it()If the bug has been fixed in a newer release.
it()If the bug has been found earlier, consult file(TODO) and file(BUGS).
)

If you have found a bug, then you should send a bugreport.

itemize(
it()Send a copy of the input which causes the error.
it()Send a description of the platform you use.
it()Send a description of the LilyPond version you use 
    (with compile/configure options please).
it()Send a description of the bug itself.
it()Send it to email(bug-gnu-music@gnu.org) (you don't have to subscribe
    to this mailinglist).
)

manpagefiles()
description(
dit(file(init.ly)) 
    The initialisation file with symbol tables etc.  It
    includes files from the directory file(init/).
)

manspagesection(environment)

description(
dit(LILYINCLUDE)
    additional directories for finding lilypond data.  The
    format is like the format of file(PATH).
dit(LANG)
    selects the language for the warning messages of LilyPond.
)

manpagebugs()

Lots of them.  See file(TODO) and file(BUGS)

manpageseealso()

description(
dit(internals)
    On technical details of LilyPond
dit(mudela-man)
    On the input format.  This is a LilyPond-enhanced LaTeX document.
dit(MANIFESTO)
    Goals of the GNU LilyPond project.
dit(FAQ)
    The GNU LilyPond FAQ list
dit(GNU url(LilyPond)(http://www.cs.uu.nl/people/hanwen/lilypond/index.html))
    has her own webpage.  This webpage contains the MIDI, GIF and PS files for 
    some standard music files.  It also has the complete LilyPond documentation
)

GNU LilyPond is
updated very frequently, the latest version is always available at:
lurl(ftp://ftp.cs.uu.nl/pub/GNU/LilyPond).  This FTP site is mirrored
at a number of sites; consult the project web pages for information
about mirrors.

For programs which are part of the GNU music project, the following
mailing list have been setup:

description(
dit(email(info-gnu-music@gnu.org)) 
    For information on the GNU Music project, to subscribe: send mail with
    subject "subscribe" to email(info-gnu-music-request@gnu.org)
dit(email(help-gnu-music@gnu.org)) 
    For help with programs from the GNU music project.  To subscribe: send
    mail with subject "subscribe" to email(help-gnu-music-request@gnu.org)
dit(email(bug-gnu-music@gnu.org))
    If you have bugreports, you should send them to this list.  If you want
    to read all bugreports, you should subscribe to this list.  To
    subscribe: send mail with subject "subscribe" to
    email(bug-gnu-music-request@gnu.org)
dit(email(gnu-music-discuss@gnu.org))
    For discussions concerning the GNU Music project, to subscribe: send
    mail with subject "subscribe" to
    email(gnu-music-discuss-request@gnu.org)
)

Announces of new versions will be sent to info-gnu-music and
gnu-music-discuss.

manpagesection(REMARKS)

GNU LilyPond has no connection with the music package Rosegarden, other
than the names being similar (:-)

manpagesection(HISTORY)
cindex(History)

(for a  detailed changelog, see file(NEWS))

GNU LilyPond's roots lie in MPP, a preprocessor to the rather arcane
MusiXTeX macro package for TeX.  A friend of mine, Jan Nieuwenhuizen
wrote the first 44 versions (0.01 to 0.44), then his program caught my
attention, and I was slowly sucked in to the interesting problem of
easily producing beautifully printed music.  I contributed some
code.  We soon realised that MPP's design was too fundamentally broken
to be repaired, so it was decided to rewrite MPP.  We debated a lot about
the requirements to an inputformat (fall 1995).  I sat down and started
with a parser-first, bottom-up rewrite called mpp95 (which totally
failed, obviously).

After long and hard thinking, I came up with an algorithm for the
horizontal spacing of multiple staffs (april 1996) I coded it (and did
not test it).  After starting with this fundamental piece, I slowly
added the stages which come before spacing, and after.  A half year
later, I had a first working version, (october 1996).  I announced
Patchlevel 0.0.7 (or 8) to the mutex list after asking some technical
details on spacing; it was downloaded approximately 4 times.  Then I
got the hang of it, and in the subsequent two months, I coded until it
had doubled in size (pl 23).

Most the other history is described in the NEWS file.  The first large
scale release (0.1) was done after approximately 78 patchlevels on
August 1, 1997.

manpageauthor()
cindex(Author)

Please consult the documentation file file(AUTHORS.txt) for more detailed
information, and small contributions. 

itemize(
it()nemail(Han-wen Nienhuys)(hanwen@cs.uu.nl)
    lurl(http://www.cs.uu.nl/people/hanwen)
it()nemail(Jan Nieuwenhuizen)(janneke@gnu.org)
    lurl(http://www.xs4all.nl/~jantien)
)
