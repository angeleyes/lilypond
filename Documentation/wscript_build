import TaskGen
# TODO: make this os-independent with os.path.join() ?
import os.path

# hack for waf's dislike of non-source-tree directories
node = bld.path.ensure_dir_node_from_path(['music-glossary'])
bld.rescan(node)

# reminders:
#    bld.srcnode.abspath()  <- top source dir
#    bld.srcnode.abspath(bld.env)  <- build root including variant dir
#
#    bld.path.abspath()     <- current source dir
#    bld.path.abspath(bld.env)     <- build dir
#
#    ${TGT}                 <- dir/of/target/file.ext
#    ${TGT[0].dir(env)}     <- dir/of/target/

doc_srcdir = bld.path.abspath()
doc_blddir = bld.path.abspath(bld.env)
top_blddir = bld.srcnode.abspath(bld.env)  # topdir including variant

tely = ['music-glossary']
#tely = ['music-glossary', 'usage']
#tely = ['changes', 'extending', 'essay']
#tely = ['changes', 'extending', 'essay', 'learning', 'music-glossary', 'usage']
#tely = ['changes', 'extending', 'essay', 'learning', 'music-glossary', 'notation', 'snippets', 'usage']
texi = ['contributor']
texi_web = ['web']

lilypond_book_includes = "-I default/Documentation/ \
	-I %(doc_srcdir)s \
	-I %(doc_srcdir)s/included/ \
	-I %(doc_srcdir)s/snippets/ \
	" % locals()

lilypond_book_rule = 'lilypond-book %(lilypond_book_includes)s -o ${TGT[0].dir(env)} --lily-output-dir=%(top_blddir)s/lybook/ ${SRC}' % locals()

texi2html_flags = '-I default/Documentation/ -o ${TGT[0].dir(env)} '
texi2html_flags_normal = texi2html_flags + '--init-file=%(doc_srcdir)s/lilypond-texi2html.init --prefix=index --split=node --node-files ' % locals()
texi2html_flags_web = texi2html_flags + '--init-file=%(doc_srcdir)s/web-texi2html.init --prefix=index --split=section --node-files ' % locals()

texi2pdf_rule = 'texi2pdf -I default/Documentation/ -o ${TGT} ${SRC}'
texi2html_rule_normal = 'texi2html %(texi2html_flags_normal)s ${SRC}' % locals()
# SRC_DIR is a stupid hack for search-box.html
texi2html_rule_web = 'SRC_DIR=%(doc_srcdir)s texi2html %(texi2html_flags_web)s ${SRC}' % locals()


### 1st group: basic setup
bld.add_group()
bld.new_task_gen (
    name = 'create_version',
    target = 'version.itexi',
    rule = 'python ' + bld.srcnode.abspath() + '/build/helper/create-version-itexi.py > ${TGT}',
)

### 2nd group: tely -> texi
bld.add_group()
for src in tely:
    bld.new_task_gen (
        source = src + '.tely',
        target = src + '.texi',
        rule = lilypond_book_rule
    )
    texi.append(src)


### texi -> pdf, html
bld.add_group()
for src in texi:
#    bld.new_task_gen (
#        source = src + '.texi',
#        target = src + '.pdf',
#        rule = texi2pdf_rule
#    )

    bld.new_task_gen (
        name = "html output",
        source = src + '.texi',
        target = src + '/index.html',
        rule = texi2html_rule_normal + "; cp %(doc_srcdir)s/css/*.css ${TGT[0].dir(env)}" % locals()
    )

for src in texi_web:
    bld.new_task_gen (
        name = "html output",
        source = src + '.texi',
        target = src + '/index.html',
        rule = texi2html_rule_web + "; cp %(doc_srcdir)s/css/*.css ${TGT[0].dir(env)}" % locals()
    )


