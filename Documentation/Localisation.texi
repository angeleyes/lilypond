\input texinfo @c -*-texinfo-*- vim:tw=72
@setfilename Localisation
@settitle Localisation - User messages in LilyPond

@node Top, , , (dir)
@top

@chapter Localisation - User messages in LilyPond

@section ISSUES

The current default is marked with @code{+}.

@itemize @bullet

@item
How to do two-part messages like these?  Better spread over multiple lines?
@example
    warning (_f ("out of tune!  Can't find: `%s\', "Key_engraver"));
or
+   warning (_ ("out of tune:");
    warning (_f ("Can't find: `%s\', "Key_engraver"));

    warning (_f ("Can't find font `%s', loading default font", name.ch_C ()));
or
+   warning (_f ("Can't find font: `%s', name.ch_C ()));
    warning (_f ("Loading default font"));
@end example

@item
How to do messages with punctuation:
@example
Logical:
+   warning ( _("Huh?  Not a Request: `%s'", s);
Guidelines say:
    warning ( _("huh?  not a Request: `%s'", s);
@end example

@item
No punctuation (esp. period) at end of message.

But what about multiple-sentence, or full-sentence (including other
punctuation) messages?
@example
+   _ ("Debug output disabled.  Compiled with NPRINT.")
+   _ ("Non-matching braces in text `%s', adding braces")
@end example

@item
@example
    en: can't open: `foo.ly'
    nl: kan `foo.ly' niet openen (1)
+   kan niet openen: `foo.ly'*   (2)
    niet te openen: `foo.ly'*    (3)
@end example

The first nl message, although gramatically and stylishly correct,
is not friendly for parsing by humans (even if they speak dutch).
I guess we'd prefer something like (2) or (3)...

@end itemize


@section Guidelines

@itemize @bullet

@item
Every user message should be localised.

@item
Don't localise/gettextify:
@itemize @minus
@item @code{programming_error ()}s
@item @code{programming_warning ()}s
@item debug strings
@item output strings (PostScript, TeX)
@end itemize

@item
Strings to be localised must be encapsulated in @code{_ (STRING)}
or @code{_f (FORMAT, ...)}.  Eg:
@example
warning (_ ("Need music in a score"));
error (_f ("Can't open file: `%s'"));
@end example

Only in very rare cases you may need to call @code{gettext ()} by hand.
In that case, you'll probably also need to mark some string constants for
translation, using @code{_i (STRING)}.  See @file{flower/getopt-long.cc}
and @file{lily/main.cc}.

@item
Don't use leading or trailing whitespace in strings.

@item
Messages containing a final verb, or a gerund (@code{-ing}-form)
always start with a capital.  Other (simpler) messages start with
a lowercase letter:
@example
The word `foo' is not declared.
`foo': not declared.
Not declaring: `foo'.
@end example

@item
To avoid having a number of different messages for the same situation,
we'll use quoting like this @code{"message: `%s'"} for all strings.
Numbers are not quoted:
@example
_f ("Can't open file: `%s'", name_str)
_f ("Can't find charater number: %d", i)
@end example

@item
Think about translation issues.  
In a lot of cases,it's better to translate a whole message.
The english grammar mustn't be imposed on the translator.
So, iso
@example
_ ("Stem at ") + moment.str () + _(" doen't fit in beam")
@end example
@noindent
have
@example
_f ("Stem at %s doen't fit in beam", moment.str ())
@end example

@item
Use two spaces after end of sentence punctuation:
@example
_ ("Huh?  Not a Request")
@end example

@item
Don't modularise too much; a lot of words cannot be translated
without context.
It's probably safe to treat most occurences of words like
stem, beam, crescendo as separately translatable words.

@item
Please don't run make po/po-update with GNU gettext < 0.10.35

@end itemize

@bye
