% -*-latex-*-

% this document should be run through the mudela-book script after lilypond
% has been installed.  The rules have been precooked into the
% Documentation/Rules.make file; do 
%
%   make out/introduction.dvi
%
% or
%
%   mudela-book --outdir=out/ --outname=introduction.mudtex introduction.doc
%   latex '\nonstopmode \input out/introduction.mudtex'

% Hoi Tim, hier staan wat 'enge' commando's (die dingen met een '\'
% zoals \documentclass en \def\mudela...).
% Daar moet je je niets van aantrekken, ga gewoon naar Introduction
% en begin te tiepen.

\documentclass{article}
\usepackage{a4wide}
\title{Introduction to GNU LilyPond}
\author{Jan Nieuwenhuizen \& Han-Wen Nienhuys}
\date{March 2, 1998}

\def\file#1{\verb+#1+}

% ugh: trick to get examples not generate par
% these are for 16pt
\def\mudelapaperlinewidth{-28.452756}%
\def\mudelapaperindent{28.452756}%
\def\mudelapaperrulethickness{0.400000}%
\def\mudelapaperbarsize{16.000000}%
\def\mudelapaperinterline{4.000000}%
\def\mudelapapernotewidth{5.930000}%
\def\mudelapaperwholewidth{8.640000}%
\def\mudelapaperunitspace{22.000000}%
\def\mudelapaperbasicspace{4.000000}%
\def\mudelapapergeometric{0.000000}%
\def\mudelapaperarithmetic_basicspace{2.000000}%
\def\mudelapaperarithmetic_multiplier{4.800000}%
\def\mudelapaperinterbeam{3.140000}%
\def\mudelapapergourlay_energybound{100000.000000}%
\def\mudelapapergourlay_maxmeasures{14.000000}%
% huh?
% \def\exampleheight{2\mudelapaperbarsize pt}
\def\exampleheight{2cm}

% ful of pars, needs the above
\input lilyponddefs
% generates par
\musixsixteendefs
\def\musixsixteendefs{}
% generates par
\turnOnPostScript%
\def\turnOnPostScript{}
% generates par
\def\interscoreline{}
% 

\begin{document}
\maketitle

%\def\interexample{\hskip15mm$\Longrightarrow$\hskip15mm}
%\def\interexample{\hbox to10mm{\hfill\hbox to0pt{\hss\vbox to\exampleheight{\vss$\Longrightarrow$\vss}\hss}\hfill}}
\def\interexample{}
\def\preexample{\par}
\def\postexample{\par\medskip}

\def\file#1{{\texttt{#1}}}
\setcounter{secnumdepth}{-1}

\emph{\Large ***Under construction***}

\section{Introduction}
This document is a gentle introduction to using LilyPond to typeset
simple music.


LilyPond is a so called ``batch'' program.  This means, that you use a
texteditor (such as emacs or vi) to create an input file.  When you
are done editing your input file, you run LilyPond.  If Lily
finds any errors in your input file she\footnote{ If computer programs
could have gender, we're sure that LilyPond is a female computer
program, so we will refer to the program as a she. This gender-bending
is not to tease you, dear reader.  We do it in real life as well. In
the past two years LilyPond has become sort of a baby daughter to us,
keeping us awake at night, but also providing lots of joy.  We hope
you do not mind our little aberration from computer-manual tradition.
% 
% The name LilyPond is actually sort of a girl's name.  Can you guess which
% one ?
%
} complain.  If everything is well, than she'll generate a file that
you can process further to view or print it.

To get you started we'll run down the full procedure for you once.   

\begin{enumerate}
\item
Fire up your favourite editor (if you know none, try \texttt{joe silly.ly}),
and key in the following text:
\begin{verbatim}
\score {
  	<
	\type Staff = aStaff \melodic { g'2 e'4 }
	\type Lyrics = yell \lyric { Air2 ball!4 }
	>
}
\end{verbatim}

save your file as \file{silly.ly}.   As might have noticed, the input
files to LilyPond have the extension \file{.ly}.

\item
Run LilyPond on your  newly created file: \verb+lilypond silly+.
LilyPond will then print all kinds of mumbo jumbo that can safely
ignored.
You might see something like this:
\begin{verbatim}
GNU LilyPond 0.1.55/FlowerLib 1.1.39
Parsing ... [/home/hanwen/musix/spacer/init/lily-init.ly[/home/hanwen/

	... stuff left out here ...

				Documentation/silly.ly]
Interpreting music ...[1] (time: 0.04 seconds)
Preprocessing elements... 
Calculating column positions ... [2]
Approximated: 1 lines, (with an average of 4.0 columns)
Time: 0.01 seconds
warning: Can not solve this casting problem exactly; revert to Word_wrap
[2]Time: 0.00 seconds

Postprocessing elements...
TeX output to silly.tex ...
\end{verbatim}
  All has gone well; there were some warning but no errors.  The
  output is a \file{TeX}\footnote{%
    \file{TeX} is usually spelled as
  \TeX.  It is batch program for typesetting text, developed by the
  famous programmer and scientist Donald Knuth to typeset his famous The
  Art of Computer Programming bookseries.  As you can see \TeX\ can be
  adapted to do a lot more.  In fact, the document that you are
  reading was also done with \TeX.} file, and it is called
  \file{silly.tex}.
\item
  To do something useful with the output you have to run \TeX\ on it
  first.  type \verb+tex silly+.  The output should resemble this:
\begin{verbatim}
This is TeX, Version 3.14159 (C version 6.1)
(silly.tex
Babel <v3.6h> and hyphenation patterns for american, dutch, loaded.
(/home/hanwen/lib/texmf/tex/lilypond/lilyponddefs.tex
(/home/hanwen/lib/texmf/tex/lilypond/dyndefs.tex)
(/home/hanwen/lib/texmf/tex/lilypond/fetdefs.tex
(/home/hanwen/lib/texmf/tex/lilypond/feta20.tex)
(/home/hanwen/lib/texmf/tex/lilypond/lily-ps-defs.tex))) [1] )
Output written on silly.dvi (1 page, 3084 bytes).
Transcript written on silly.log.
\end{verbatim}
  The human translation is ``everything went OK, the result is one
  page long, and I put it in \file{silly.dvi}''.  The \file{silly.dvi}
  file is a description of how a piece of text looks when it is
  printed.  You can view it, or print it.  If you are using a Unix
  system equipped with X-Windows, issue the command \file{xdvi silly}
  to view the result.  If this is not the case, consult your local
  \TeX\ guru on printing and viewing DVI files.  What is in your
  window should look like this:
\begin{mudela}
\score {
  	<
	\type Staff = aStaff \melodic { g'2 e'4 }
	\type Lyrics = yell \lyric { Air2 ball!4 }
	>
}
\end{mudela}
\end{enumerate}

The remainder of this document is not about \TeX, and mostly not even
about LilyPond.  What you entered into your text editor in step~1. and
fed to LilyPond is a special kind of file composed of notenames,
special words and punctation.  The remainder of this document explains
how to combine these elements to express a piece of music in the
language that LilyPond understands.  So we try to explain how to use
LilyPond, and not how LilyPond works; the input language of LilyPond
is the subject of the document.  For want of a better name we call
this language Mudela (short for Music Description Language).

This document does not cover all of Mudela.  Due to technical details,
the precise working of Mudela is coupled to the innards of LilyPond.
If you really want to know all the details, your best bet would be to
get the sources to LilyPond and read the parser and scanner
source\footnote{ They are in \file{lilypond-x.y.z/lily/parser.y},
\file{lilypond-x.y.z/lily/lexer.l}.  Of course, it would be even
better if you would improve LilyPond and send the resulting diffs to
us.  But that would a really different ballpark (And we
haven't  started on the programming guide yet.)}

In the following sections the basic elements of Mudela are presented.
We don't want to bore you too much with details, so we will leave-out
some red tape that's needed for a valid piece of Mudela: to be
precise, we will write \verb+X Y Z+, when we really mean
\begin{verbatim}
\score {
	\melodic { X Y Z }
	\paper {}
}
\end{verbatim}
Usually, we will also print the resulting fragment of music on the
right just as it was produced by LilyPond.  

For the remainder we will assume that you can carry out steps 1 to 4
from the above instruction.  We will also assume that you know how
music notation works, and that you are familiar with terms such as
``note'', ``clef'', ``slur'' etc.

\section{When you know the notes to print\ldots}

The basic building block of music is the note.  You can have LilyPond
print a note by specifying the pitch and the duration.  The pitch of
the central C, also know as c$^1$ is written as \verb+c'+.  A quarter
note duration is written as \verb+4+:
\begin[fragment,verbatim,center]{mudela}
c'4
\end{mudela}
The \verb+c'+ actually consists of two parts: one for the note name,
and one part for the octave.  The number of apostrophes specifies the
octave to use, and the letter which note name to use.  The duration of
a note is specified as a number: a whole note is denoted by 1, the
half note by 2, the quarter by 4, and so on.  This gives us already
enough material to make simple songs:
\begin[fragment,verbatim]{mudela}
	c''4 d''4 e''4 c''4
	e''4 f''4 g''2
	g''8 a''8 g''8 f''8 e''4 c''4
	c''4 g'4 c''2
\end{mudela}

You might wonder: ``what if I would 


% \subsection{Durations}

However, having only quarter notes may get a bit dull.
Durations are entered as their reciproce values
% a1 a2 a4 a a8 a a16 a a32 a a64 a a a a
\begin[fragment,verbatim,center]{mudela}
a1 a2 a4 a a8 a a16 a32 a64
\end{mudela}
note that you only have to specify
the duration when it changes:
Lily assumes a note has the same duration as the previous one.

Now we can already write a little tune
\begin[fragment,verbatim,center]{mudela}
c d e c | c d e c | e f g2
\end{mudela}
As you'll probably have guessed,
the vertical bar (pipe) \verb+|+ may be used to mark
measures.

In the scale shown above
we left-out the last c note of the next octave.
Postfixing the pitch with a quote \verb+'+
produces a note by one octave higher
\begin[fragment,verbatim,center]{mudela}
c c' c''
\end{mudela}

Prefixing the pitch with a quote \verb+'+
produces a note by one octave lower
\begin[fragment,verbatim,center]{mudela}
a 'a ''a
\end{mudela}

\section{Slurs and Ties}

A tie connects two adjacent noteheads

\begin[fragment,verbatim,center]{mudela}
e' ~ e
\end{mudela}

Whereas a slur rather connects `chords', 
and tries to avoid crossing stems

\begin[fragment,verbatim,center]{mudela}
e'( )e
\end{mudela}

And of course, such a (legato) slur can span several notes
\begin[fragment,verbatim,center]{mudela}
c( d e )f
\end{mudela}

\section{Beams and Plets}

A beam is 
\begin[fragment,verbatim,center]{mudela}
[a8 a] [a16 a a a]
\end{mudela}

Here's a beamed triplet
\begin[fragment,verbatim,center]{mudela}
[/3 a8 a a]/1
\end{mudela}

a triplet without a beam
\begin[fragment,verbatim,center]{mudela}
\[/3 a4 a8\]
\end{mudela}

and a combination
\begin[fragment,verbatim,center]{mudela}
[/3 a8 a16 a] a8 \]
\end{mudela}

Abbreviations
\begin[fragment,verbatim,center]{mudela}
c1:16 [:16 e1 g]
\end{mudela}

\begin[fragment,verbatim,center]{mudela}
c4:32 [:16 c8 d8]
\end{mudela}

\section{Notenames}

Lily has predefined sets of notenames
for various languages%
\footnote{These are Dutch, English, German, Italian and Swedish.
Simply include the language specific init file \file{<language.ly>}.}.
The default set are the ones we like best are the Dutch notenames.

A sharp is formed by adding \verb+is+
\begin[fragment,verbatim,center]{mudela}
cis dis eis fis gis ais bis
\end{mudela}

and a flat is formed by adding \verb+es+%
%\footnote{Exceptions: \verb+es+ and \verb+as+.}
\footnote{Exceptions: {\tt es} and {\tt as}.}
\begin[fragment,verbatim,center]{mudela}
ces des es fes ges as bes
\end{mudela}

With the obvious names for double sharps
\begin[fragment,verbatim,center]{mudela}
cisis disis eisis fisis gisis aisis bisis
\end{mudela}

and double flats
\begin[fragment,verbatim,center]{mudela}
ceses deses eses feses geses ases beses
\end{mudela}
See why we like-em?

There are two special `notenames', the rest
\begin[fragment,verbatim,center]{mudela}
r16 [a a a]
\end{mudela}

and the space
\begin[fragment,verbatim,center]{mudela}
a2 s-"diminuendo" | a
\end{mudela}


\section{Commands}

\begin[fragment,verbatim,center]{mudela}
\clef "bass"; 'c
\end{mudela}

and a clef-change
\begin[fragment,verbatim,center]{mudela}
\clef "violin"; f' e' \clef "alto"; d' c'
\end{mudela}

\begin[fragment,verbatim,center]{mudela}
\meter 3/4; c g g |
\end{mudela}

\begin[fragment,verbatim,center]{mudela}
\key fis cis;
'g 'a 'b cis d e fis g'
\end{mudela}
Note how Mudela allows you to 
convey a musical message
rather than forces you to produce a list of typesetting commands.
If the music a \verb+cis+, you type a \verb+cis+.
Depending on the key and context of the note
Lily will determine what accidentals to typeset.

A reminder accidental can be forced by
using an exclamation mark \verb+!+
on a pitch a reminder accidental
\begin[fragment,verbatim,center]{mudela}
cis d e cis | c! d e c |
\end{mudela}

\begin[fragment,verbatim,center]{mudela}
\meter 2/4;
\bar "|:"; c c \bar ":|:"; c c \bar ":|"; c c \bar "|."; 
\end{mudela}

\section{Chords and Voices}

Here's a simple chord
\begin[fragment,verbatim,center]{mudela}
<c e g>
\end{mudela}

here are a few
\begin[fragment,verbatim,center]{mudela}
<
	{ c()d()c }
	{ e()f()e }
	{ g()a()g }
>
\end{mudela}

and similarly voices
\begin[fragment,verbatim,center]{mudela}
<
	{ \voiceone c g c g }
	{ \voicetwo 'c2 'g2 }
>
\end{mudela}


\section{A complete example}
%\label{se:complete}

A Mudela file needs some red tape

\begin[verbatim,center]{mudela}
\score{
	\melodic {
		\octave c';
		c d e c |
		c d e c |
		e f g2 |
	}
}
\end{mudela}

\section{Lyrics}

\begin[verbatim,center]{mudela}
\score{
	< 
		\melodic{ 
			\octave c'; 
			c d e c | c d e c |
			e f g2 | e4 f g2
			\bar "|.";
		}
		\type Lyrics \lyric{ 
			Fr\`e-4 re Ja- que
			Fr\`e- re Ja- que
			Dor- mez vous?2
			Dor-4 mez vous?2
		}
	>
}
\end{mudela}

\section{Variables}


\section{Ly2dvi}
Check-out this handy little script 
that not only may save you quite some keystrokes,
but produces titles and takes care of
margins and (hopefully) papersizes.
See \file{ly2dvi (1)}.

\end{document}

% kut en peer.

\begin{verbatim}

% twinkle, v1
\score {
        \melodic { 
                c4 c4 g4 g4 a4 a4 g2
                f4 f4 e4 e4 d4 d4 c2
        }
        \paper {}
} 
\end{verbatim}

there are a few things to note about this example:

The braces are grouping characters. In general, in mudela data entry
for a data section called ``foobar'' looks like this:

\begin{verbatim}
\foobar { ...... }
\end{verbatim}

To see if it actually works, we run it through LilyPond.  Invoke the
command 
\begin{verbatim}
        lilypond twinkle.ly
\end{verbatim}
When LilyPond starts working it will produce various ``operator
pacification'' messages, which you can safely ignore for now.  The run
should have left a file called \file{lelie.tex} in your working
directory.  You can process that file with \TeX, and it will look like
this:

\begin{mudela}
\score {
        \melodic { 
                c4 c4 g4 g4 a4 a4 g2
                f4 f4 e4 e4 d4 d4 c2
        }
        \paper {}
} 
\end{mudela}

As you can see, this is the song that we wanted, albeit a little
low-pitched.  You would probably want a version of the song which has
all notes an octave higher.  This can be done by adding a
\verb+\octave+ command to the source.  This sets the default octave
for all notes.  Another convenience is the default duration: if you do
not specify a duration with the notename, the last explicitly entered
is used.  The improved version reads thus


\begin[verbatim]{mudela}
  % twinkle v2
\score {
        \melodic { 
                \octave c';
                c4 c g g a a g2
                f4 f e e d d c2
        }
        \paper {}
} 
\end{mudela}

 

FIXME rewrite starting here.

\begin[verbatim]{mudela}
  \score {
        \melodic {      % {...} is a voice
        c'4 g'4         % c and g are pitches, 4 is the duration
                        % (crotchet/quarter note)
        c''4 ''c4       % c' is 1 octave up, 'c 1 down.
        <c'4 g'4>       % <...> is a chord
        }
} 
\end{mudela}


\begin[fragment,verbatim]{mudela}
  { c4 e4 g4 }
\end{mudela} 

Basics: the \verb+%+ introduces a comment. All music is inside a
\verb+\score+ block which represents one movement, ie one contiguous
block of music.  Voices are grouped by \verb+{+ and \verb+}+ and
chords by \verb+<+ and \verb+>+.


The \verb+\octave+ command controls the default pitch (octave). If you
do not specify duration, the last one entered is used.  The
\verb+\paper+ block contains parameters for spacing and dimensions.

