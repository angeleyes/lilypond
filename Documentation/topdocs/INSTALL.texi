\input texinfo @c -*-texinfo-*-
@setfilename INSTALL.info
@settitle INSTALL - compiling and installing GNU LilyPond

@node Top, , , (dir)
@top

@chapter INSTALL - compiling and installing GNU LilyPond

@section Obtaining

You can get the latest version of LilyPond at
@uref{ftp://ftp.cs.uu.nl/pub/GNU/LilyPond/,
ftp://ftp.cs.uu.nl/pub/GNU/LilyPond/}.


@emph{If you upgrade by patching do remember to rerun autoconf after
applying the patch}.

If you do not want to download the entire archive for each version, the
safest method for upgrading is to use @file{xdelta}, see
@uref{ftp://ftp.xcf.berkeley.edu/pub/xdelta/}.

The following command produces @file{lilypond-1.3.122.tar.gz} from
@file{lilypond-1.3.121} identical (up to compression dates) to the .122 on
the FTP site.
@example
  xdelta patch lilypond-1.3.121-1.3.122.xd lilypond-1.3.121.tar.gz
@end example

@section Prerequisites

For compilation you need:

@itemize @bullet
@item A GNU system: GNU LilyPond is known to run on these GNU systems: Linux
    (PPC, intel), FreeBSD, AIX, NeXTStep, IRIX, Digital Unix and
    Solaris.

@item Lots of disk space: LilyPond takes between 30 and 100 mb to
compile if you use debugging information.  If you are short on
disk-space run configure with @code{--disable-debugging}.

@item
Although we recommend to use Unix, LilyPond is known to run on Windows
NT/95/98 as well.  See Section Windows NT/95,es.

@item A reasonable C++ compiler:  EGCS 1.1, GCC 2.95.2 or newer. Check out @uref{ftp://ftp.gnu.org/gnu/gcc/}.

@item  Python 1.5,
Check out @uref{ftp://ftp.python.org} or
@uref{ftp://ftp.cwi.nl/pub/python}.

@item  GUILE 1.3.4 or newer,  check out
@uref{http://www.gnu.org/software/guile/guile.html,http://www.gnu.org/software/guile/guile.html}.
Version 1.4 is recommended for better performance.

@item GNU Make. 
Check out
@uref{ftp://ftp.gnu.org/gnu/make/,ftp://ftp.gnu.org/gnu/make/}.

@item Flex (version 2.5.4a or newer). 
Check out @uref{ftp://ftp.gnu.org/pub/gnu/non-gnu/flex/,ftp://ftp.gnu.org/pub/gnu/non-gnu/flex/}.

@item Bison (version 1.25 or newer).
Check out @uref{ftp://ftp.gnu.org/gnu/bison/,ftp://ftp.gnu.org/gnu/bison/}.

@item TeX.  If you want LilyPond to use kpathsea support (recommended),
make sure you have tetex 1.0 or newer (1.0.6 is known to work).  You may
need to install a tetex-devel or tetex-dev package too.

@item Texinfo (version 4.0 or newer). 
Check out @uref{ftp://ftp.gnu.org/gnu/texinfo/,ftp://ftp.gnu.org/gnu/texinfo/}.
Most documentation is in texinfo.

@item The geometry package for LaTeX is needed to use ly2dvi.  
Available at 
@uref{ftp://ftp.ctan.org/tex-archive/macros/latex/contrib/supported/geometry,ftp://ftp.ctan.org/tex-archive/macros/latex/contrib/supported/geometry}
or at mirror site @uref{ftp://ftp.dante.de,ftp://ftp.dante.de}

@item MetaPost, needed for generating PostScript fonts. Please
note that tetex-0.4pl8 (included with Red Hat 5.x) does not include
@file{mfplain.mp}, which is needed for producing the scalable font
files.

If you do not want to use PostScript output, edit @file{mf/GNUmakefile},
removing the line saying @code{PFA_FILES=}

@item kpathsea, a library for searching (TeX) files.  @code{kpathsea} is
usually included with your installation of TeX. 

@end itemize

@section Running

GNU LilyPond does use a lot of resources. For operation you need the
following software

@itemize @bullet
@item TeX.
@item A PostScript printer and/or viewer (such as Ghostscript) is strongly
    recommended.  Xdvi will show all embedded PostScript too if you have
    Ghostscript installed.
@item  GUILE 1.3.4, or newer.  Check out @uref{http://www.gnu.org/programs/guile.html,http://www.gnu.org/software/guile/}
@end itemize

For running LilyPond successfully you have to help TeX and MetaFont find
various files.  The recommended way of doing so is adjusting the
environment variables in the start-up scripts of your shell. Appropriate
Csh and sh scripts are left in @file{buildscripts/out/lilypond-profile}
and @file{buildscripts/out/lilypond-login} after compilation.

The empty path component represents TeX and MetaFont's default search
paths.  Scripts with the proper paths for the bourne and C-shell
respectively are generated in @file{buildscripts/out/lilypond-profile}
and @file{buildscripts/out/lilypond-login} during compilation.

LilyPond is a big and slow program.  A fast CPU and plenty of RAM is
recommended for comfortable use.

@section Website

The website is the most convenient form to use for reading the
documentation on-line documentation. It is made by entering @example 

  make htmldoc
 
@end example 
This does require a functioning LilyPond.  The binary doesn't have to
be installed. 

If you want to auto-generate Lily's website, you'll need some additional
conversion tools.

@itemize @bullet
@item xpmtoppm (from the netpbm package: the Portable Bitmap Utilities) (For Red Hat Linux
	     users: it is included within the package libgr-progs).
	The original is at
@uref{ftp://ftp.x.org/contrib/utilities/netpbm-1mar1994.p1.tar.gz,ftp://ftp.x.org/contrib/utilities/netpbm-1mar1994.p1.tar.gz}

@item pnmtopng (also in libgr-progs for Red Hat). The original is
at
@uref{ftp://swrinde.nde.swri.edu/pub/png/applications/pnmtopng-2.37.2.tar.gz,ftp://swrinde.nde.swri.edu/pub/png/applications/pnmtopng-2.37.2.tar.gz}.i

The version of @file{pnmtopng} that is distributed with Red Hat 5.1 and
5.2 contains a bug: pnmtopng is dynamically linked to the wrong
version of libpng.

@item @uref{http://www.lri.fr/~filliatr/ftp/bibtex2html/, Bibtex2html}, or
@uref{http://www.uni-koblenz.de/ag-ki/ftp/bib2html/, Bib2html}.
Bibtex2html is available in debian, while bib2html is in some rpm based
distributions.
Bib2html, in turn depends on man2html for proper installation.
man2html can be had from @uref{http://askdonald.ask.uni-karlsruhe.de/hppd/hpux/Networking/WWW/Man2html-1.05,http://askdonald.ask.uni-karlsruhe.de/hppd/hpux/Networking/WWW/Man2html-1.05}.

The website will build without bib converter utility, but you will not
see our hypertextified bibliography.

@end itemize

@section Configuring and compiling

to install GNU LilyPond, simply type:
@example 
	gunzip -c lilypond-x.y.z | tar xf -
	cd lilypond-x.y.z
	./configure		# fill in your standard prefix with --prefix
	make
	make install
@end example 

This will install a number of files, something close to:

@example 
	/usr/local/man/man1/midi2ly.1
	/usr/local/man/man1/abc2ly.1
	/usr/local/man/man1/etf2ly.1
	/usr/local/man/man1/convert-ly.1
	/usr/local/man/man1/lilypond-book.1
	/usr/local/man/man1/lilypond.1
	/usr/local/bin/lilypond
	/usr/local/bin/midi2ly
	/usr/local/bin/convert-ly
	/usr/local/bin/lilypond-book
	/usr/local/bin/abc2ly
	/usr/local/bin/pmx2ly
	/usr/local/bin/musedata2ly
	/usr/local/bin/etf2ly
	/usr/local/share/lilypond/*
	/usr/local/share/locale/@{....@}/LC_MESSAGES/lilypond.mo
@end example 


The above assumes that you are root and have the GNU development
tools, and your make is GNU make.  If this is not the case, you can
adjust your environment variables to your taste:

@example 

	export CPPFLAGS="-I /home/me/my_include -DWEIRD_FOOBAR" 
	./configure
 
@end example 

@code{CPPFLAGS} are the preprocessor flags. 

The configure script is Cygnus configure, and it will accept
@code{--help}. If you are not root, you will probably have to make it
with a different @code{--prefix} option.  Our favourite location is

@example 

	./configure --prefix=$HOME/usr
 
@end example 

In this case, you will have to set up MFINPUTS, and TEXINPUTS accordingly.

Since GNU LilyPond currently is beta, you are advised to also use

@example 

	--enable-debugging
	--enable-checking
 
@end example 

Options to configure include:

@table @samp
@item @code{--enable-printing}
    Enable debugging print routines (lilypond @code{-D} option)
@item @code{--enable-optimise}
    Set maximum optimisation: compile with @code{-O2}.  This can be
unreliable on some compiler/platform combinations (eg, DEC Alpha and PPC)
@item @code{--enable-profiling}
    Compile with support for profiling.
@item @code{--enable-config=CONF}
    Output to different configuration files.  Enables different binary
    builds alongside eachother, eg, multi-configuration (debugging,
    profiling), or multi-platform builds.  Use `make conf=CONF' to
    build for a specific configuration.
@end table

All options are documented in the @file{configure} help
The option @code{--enable-optimise} is recommended for Real Life usage.

If you do

@example 

	make all
 
@end example 

everything will be compiled, but nothing will be installed.  The
resulting binaries can be found in the subdirectories @file{out/} (which
contain all files generated during compilation).


@section Emacs mode


An emacs mode for LilyPond is included with the source archive as
@file{lilypond-mode.el} and @file{lilypond-font-lock.el}.  If you have
an RPM, it is in @file{/usr/share/doc/lilypond-X/}.  You have to install
it yourself.

Add this to your ~/.emacs or ~/.emacs.el:
@example 
    (load-library "lilypond-mode.el")
    (setq auto-mode-alist
      (cons '("\\.ly$" . LilyPond-mode) auto-mode-alist))
    (add-hook 'LilyPond-mode-hook (lambda () (turn-on-font-lock)))
@end example

If you have the latest LilyPond-1.3.x Debian package, LilyPond-mode
is automatically loaded, so you need not modify your ~/.emacs file.


@section Configuring for multiple platforms

If you want to build multiple versions of LilyPond with different
configuration settings, you can use the @code{--enable-config=CONF}
option.  You should use @samp{make conf=CONF} to generate the output in
@file{out-CONF}.  Example: suppose I want to build with and without
profiling.  Then I'd use the following for the normal build,

@example 

      ./configure --prefix=~ --disable-optimise --enable-checking
      make
      make install
      
@end example 

and for the profiling version, I specify a different configuration.

@example 

      ./configure --prefix=~ --enable-profiling --enable-config=prof --enable-optimise --disable-checking
      make conf=prof
      make conf=prof install

@end example 


@section Installing

if you have done a successful @code{make}, then a simple

@example 

	make install
 
@end example 

should do the trick.

If you are doing an upgrade, please remember to remove obsolete
@file{.pk} and @file{.tfm} files of the fonts.  A script has been
provided to do the work for you, see @file{bin/clean-fonts.sh}.


@section Red Hat Linux

Red Hat Linux users can compile an RPM.  A spec file is in
@file{make/out/lilypond.spec}; it is distributed along with the
sources.

You can make the rpm by issuing
@example 

	rpm -tb lilypond-x.y.z.tar.gz
	rpm -i /usr/src/redhat/RPMS/i386/lilypond-x.y.z
 
@end example 

Precompiled Red Hat 7.0 i386 RPMS are available from
@uref{ftp://ftp.cs.uu.nl/pub/GNU/LilyPond/RedHat/}.

For compilation on a Red Hat system you need these packages,
in addition to the those needed for running:
@itemize @bullet
@item glibc-devel
@item libstdc++-devel
@item guile-devel
@item flex
@item bison
@item texinfo
@item tetex-devel
@end itemize

@section SuSE

[TODO: document this]

Install @code{tetex}, @code{te_mpost}, @code{te_kpath}.


@section Debian GNU/Linux

A Debian package is also available.  You may install it easily by using
apt-get as root:

@example
	apt-get install lilypond1.3
@end example

Alternatively, visit

@itemize @bullet
@item @uref{http://packages.debian.org/lilypond,http://packages.debian.org/lilypond}
@item @uref{http://ftp.debian.org/debian/pool/main/l/lilypond1.3/,http://ftp.debian.org/debian/pool/main/l/lilypond1.3/}
for latest package uploaded to Debian unstable;
@item @uref{http://people.debian.org/~foka/lilypond/,http://people.debian.org/~foka/lilypond/}
for latest semi-unofficial build of LilyPond 1.3.121 for Debian 2.2r2 (potato) users.
The official stable Debian 2.2r2 is stuck with the old LilyPond-1.3.24.
@end itemize

You may contact Anthony Fok @email{foka@@debian.org} for more information.

The build scripts are in the subdirectory @file{debian/}; you can
make the .deb by doing, for example:

@example
	$ su - root
	# dpkg --purge lilypond lilypond1.3
	# exit
	$ tar xzf lilypond-1.3.122.tar.gz
	$ cd lilypond-1.3.122
	$ dch -p -v 1.3.122-0.local.1 "Local build."
	$ debuild
	$ su - root
	# dpkg -i ../lilypond1.3_1.3.122*.deb
	# exit
	$
@end example

For compilation on a Debian GNU/Linux system you need these packages,
in addition to the those needed for running:

@itemize @bullet
@item g++, cpp, libc6-dev, libstdc++<your-libstdc++-version-here>-dev
@item libguile<your-libguile-version-here>-dev
@item make, m4, flex, bison
@item gettext
@item groff, texinfo, bibtex2html (not in 2.2r2)
@item tetex-base, tetex-bin, tetex-extra, libkpathsea-dev or tetex-dev
@item dpkg-dev, debhelper, fakeroot
@item gs, netpbm, pnmtopng
@end itemize

Most of these are listed on the Build-Depends line in the
debian/control file.  To ensure the creation of the lilypond deb is
trouble-free, we recommend that you first install the following packages
before starting dpkg-buildpackage by running apt-get as root.

For Debian 2.2 (or 2.2r2, 2.2r3):

@example
	apt-get install task-debian-devel task-c++-dev \
		python-base libguile6-dev tetex-bin tetex-dev \
		tetex-extra flex bison texinfo groff gs \
		netpbm pnmtopng m4 gettext
@end example

For Debian in development ("unstable", the future 2.3 or 3.0):

@example
	apt-get install task-debian-devel task-c++-dev \
		python-base libguile9-dev tetex-bin libkpathsea-dev \
		tetex-extra flex bison texinfo bibtex2html groff gs \
		netpbm pnmtopng m4 gettext
@end example

And, just so that old fonts from previous versions of LilyPond won't
interfere with your build, you may want to do this before the build too:

@example
	dpkg --purge lilypond lilypond1.3
@end example


@section Windows NT/95

Separate instructions on building for W32 are available; See the files
in @file{Documentation/ntweb/}, included with the sources.

@section Problems

For help and questions use @email{help-gnu-music@@gnu.org} and
@email{gnu-music-discuss@@gnu.org}.  Please consult the faq before
mailing your problems.

If you find bugs, please send bug reports to
@email{bug-gnu-music@@gnu.org}.

Bugs that are LilyPond's fault are listed in our TODO list on the
web, or demonstrated in @file{input/bugs/}.

Bugs that are not LilyPond's fault are documented here.


@unnumbered LinuxPPC Bugs:

@itemize @bullet
@item egcs-1.1.2-12c (stock LinuxPPC R5) has a serious bug, upgrade to 
fixed in egcs-1.1.2-12f or gcc-2.95-0a, @uref{ftp://dev.linuxppc.org/users/fsirl/R5/RPMS/ppc/}

@item egcs-1.0.2 (LinuxPPC R4):
all compiling with @code{-O2} is suspect, in particular guile-1.3, and
Lily herself will break.
@end itemize



@unnumbered Linux-i386

@itemize @bullet
@item SuSE6.2 and similar platforms (glibc 2.1, libstdc++ 2.9.0)

Lily will crash during parsing (which suggests a C++ library
incompatibility).  Precise cause, precise platform description or
solution are not known.

Note that this only happens on some computers with the said platform.

@item libg++ 2.7

LilyPond occasionally crashes while parsing the initialisation files.
This is a very obscure bug, and usually entering the commandline
differently "fixes" it.

@example
	lilypond input.ly 
@end  example

and
@example
	lilypond -I. ./input.ly 
@end example
makes a difference

Typical stacktrace:
@example
	SIGSEGV
	__libc_malloc (bytes=16384)
	?? ()
	yyFlexLexer::yy_create_buffer ()
	Includable_lexer::new_input (this=0x8209a00, s=@{strh_ = @{
@end example

This behaviour has been observed with machines that have old libg++
versions (LinuxPPC feb '98, Red Hat 4.x).  
@end itemize




@unnumbered Solaris:

@itemize @bullet
@item Sparc64/Solaris 2.6, GNU make-3.77

GNU make-3.77 is buggy on this platform, upgrade to 3.78.1 or newer.


@item Sparc64/Solaris 2.6, ld

Not yet resolved.
@end itemize


@unnumbered AIX

@itemize @bullet
@item AIX 4.3 ld

The following is from the gcc install/SPECIFIC file.
@quotation
   Some versions of the AIX binder (linker) can fail with a relocation
   overflow severe error when the -bbigtoc option is used to link
   GCC-produced object files into an executable that overflows the TOC.
   A fix for APAR IX75823 (OVERFLOW DURING LINK WHEN USING GCC AND  
   -BBIGTOC) is available from IBM Customer Support and from its
   27service.boulder.ibm.com website as PTF U455193.   

   Binutils does not support AIX 4.3 (at least through release 2.9). GNU
   as and GNU ld will not work properly and one should not configure GCC
   to use those GNU utilities. Use the native AIX tools which do
   interoperate with GCC.
@end quotation

add -Wl,-bbigtoc to USER_LDFLAGS, ie:
@example
    LDFLAGS='-Wl,-bbigtoc' ./configure
@end example

@end itemize


@bye
        
