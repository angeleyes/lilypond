@node Top, , , (dir)
@top
@comment  node-name,  next,  previous,  up\input texinfo @c -*-texinfo-*-
@setfilename INSTALL.info
@settitle INSTALL - compiling and installing GNU LilyPond

@comment  FIXME -- this information is getting rather stale

@contents

@chapter Compiling and installing on Unix


@html
<a name="download-source">
@end html

@section Downloading

Even numbered versions are `stable' (2.0, 1.8 etc), while odd version
are development releases (2.1, 1.9, etc).  Building LilyPond is an
involved process, so if possible, download a precompiled binary from
@uref{http://lilypond.org/,the lilypond site}.


@subsection Source code

Download source tarballs from here:
@itemize @bullet
@item Download development releases from
@uref{http://lilypond.org/download/} by HTTP.
@item @uref{ftp://sca.uwaterloo.ca/pub/} by FTP (Canadian mirror).
@end itemize


Use Xdelta to patch tarballs, e.g. to patch  
@file{lilypond-1.4.2.tar.gz} to @file{lilypond-1.4.3.tar.gz}, do
@example
	xdelta patch lilypond-1.4.2-1.4.3.xd lilypond-1.4.2.tar.gz
@end example

For information on packaging and CVS, see  
@uref{http://lilypond.org/}, under ``development''.


@subsection Precompiled binaries

Check out @uref{http://lilypond.org} for up to date information on
binary packages.


@subsection Font problems

If you are upgrading from a previous version of LilyPond, be sure to
remove all old font files. These include @file{.pk} and @file{.tfm} files
that may be located in @file{/var/lib/texmf}, @file{/var/spool/texmf},
@file{/var/tmp/texmf} or @file{@var{prefix}/share/lilypond/fonts/}.  A
script automating this has been included, see
@file{buildscripts/out/clean-fonts}.




@section Requirements

@subsection Compilation

You need the following packages to compile LilyPond:

@itemize

@item @uref{http://www.freetype.org/,Freetype} version 2.

@item @uref{http://fontforge.sf.net/,FontForge} 20041211 or newer.

@item @uref{http://www.xs4all.nl/~hanwen/mftrace/,mftrace} (1.0.33 or
newer),

  You will need to install some additional packages to get mftrace to
work.

@item @uref{http://www.gnu.org/software/guile/guile.html,GUILE} (version 1.6.0 or newer).
If you are installing a binary packages, you may need to install
guile-devel or guile-dev or libguile-dev too.

@item  @uref{http://www.gnu.org/software/flex/,Flex} (version 2.5.4a or newer). 

WARNING: plain Flex 2.5.4(a) generates invalid C++ code.  GCC 3.x
chokes on this.  If you wish to use GCC 3.x, make sure that your
distribution supports g++ 3.x and flex.  For workarounds, see
lexer-gcc-3.1.sh in the source directory.

@item @TeX{}.

@TeX{} is used as an output backend.

Also, @TeX{}'s libkpathsea is used to find the fonts (@file{.mf},
@file{.afm}, @file{.tfm}).  Make sure you have tetex 1.0 or newer
(1.0.6 is known to work).  If you are installing binary packages, you
may need to install tetex-devel, tetex-dev or libkpathsea-dev too.

@item @uref{ftp://ftp.gnu.org/gnu/texinfo/,Texinfo} (version 4.7 or newer).

@item kpathsea, a library for searching (@TeX{}) files.

@item
 @uref{http://gcc.gnu.org/, The GNU c++ compiler} (version 3.1 or
newer).  EGCS and 2.x are known to cause crashes.

@item @uref{http://www.python.org,Python} (version 2.1 or newer).

@item @uref{ftp://ftp.gnu.org/gnu/make/,GNU Make} (version 3.78 or newer).

@item @uref{http://www.gnu.org/software/bison/,Bison} (version 1.29 or
newer, but not 1.50 or 1.75).

@item @uref{http://www.gnu.org/software/gettext/gettext.html,gettext}.
@end itemize

@subsection Running requirements

GNU LilyPond does use a lot of resources. For operation you need the
following software:

@itemize @bullet
@item @uref{http://lilypond.org/download/fonts,ec-fonts-mftraced}  (version 1.0.5 or newer).
@item @uref{http://www.gnu.org/software/guile/guile.html,GUILE} (version 1.6.0 or newer).
@item @uref{http://www.python.org,Python} (version 2.1 or newer).
@item @TeX{}.
@item @uref{http://www.ghostscript.com,Ghostscript} (version 8.15 or
newer)
@end itemize

You have to help @TeX{} and MetaFont find LilyPond support
files. After compiling, scripts to do this can be found in
@file{buildscripts/out/lilypond-profile} and
@file{buildscripts/out/lilypond-login}.

@subsection Building documentation

You can view the documentation online at
@uref{http://lilypond.org/doc/}, but you can also build it
locally. This process requires a successful compile of lilypond. The
documentation is built by issuing:
@example 
	make web
@end example 

Building the website requires some additional tools and packages:

@itemize @bullet
@item @uref{http://lilypond.org/download/fonts,ec-fonts-mftraced}
@item The @uref{http://netpbm.sourceforge.net/,netpbm utilities} 
@item ImageMagick
@end itemize

The HTML files can be installed into the standard documentation path
by issuing

@example
        make out=www web-install
@end example


@section Building LilyPond

To install GNU LilyPond, type
@example 
gunzip -c lilypond-x.y.z | tar xf -
cd lilypond-x.y.z
./configure		# run with --help to see appropriate options
make
make install
sh buildscripts/clean-fonts.sh      
@end example 

The most time-consuming part of compiling LilyPond is tracing the
Type1 fonts. You can shortcut this operation by issuing
one of the following commands:

@example
  make -C mf get-pfa                # requires rpm2cpio
  make -C mf get-debian-pfa         # may not be up to date   
@end example

If you are doing an upgrade, you should remove all @file{feta}
@code{.pk} and @code{.tfm} files.  A script has been provided to do the
work for you, see @file{buildscripts/out/clean-fonts}.

If you are not root, you should choose a @code{--prefix} argument that
points into your home directory, e.g.:
@example 
	./configure --prefix=$HOME/usr
@end example 

In this case, you have to insert the contents of
@code{buildscripts/out/lilypond-login} or
@code{buildscripts/out/lilypond-profile} into your start up scripts by
hand.



@subsection Configuring for multiple platforms

If you want to build multiple versions of LilyPond with different
configuration settings, you can use the @code{--enable-config=CONF}
option of configure.  You should use @samp{make conf=CONF} to generate
the output in @file{out-CONF}.  Example: Suppose I want to build with
and without profiling.  Then I'd use the following for the normal
build:

@example 
	./configure --prefix=$HOME/usr/ --enable-checking
	make
	make install
@end example 

and for the profiling version, I specify a different configuration:

@example 
	./configure --prefix=$HOME/usr/ --enable-profiling --enable-config=prof --disable-checking
	make conf=prof
	make conf=prof install
@end example 



@section Emacs mode

An Emacs mode for entering music and running LilyPond is contained in
the source archive in the @file{elisp} directory.  Do @command{make
install} to install it to @var{elispdir}.  The file @file{lilypond-init.el}
should be placed to @var{load-path}@file{/site-start.d/} or appended
to your @file{~/.emacs} or @file{~/.emacs.el}.

As a user, you may want add your source path (e.g. @file{~/site-lisp/}) to
your @var{load-path} by appending the following line (as modified) to your 
@file{~/.emacs}:
@c any reason we do not advise:  (push "~/site-lisp" load-path)
@quotation
@example
(setq load-path (append (list (expand-file-name "~/site-lisp")) load-path))
@end example
@end quotation


@section Vim mode

A Vim mode for entering music and running LilyPond is contained in the 
source archive in @code{$VIM} directory.  For version 6.2 and newer, 
Vim-mode works directly after installing LilyPond.  Otherwise, 
complete the following two steps.

For earlier versions (and if @code{$VIM} environment variable does not
fall-back to @file{/usr/local/share/vim}, see @code{:version} in vim), 
the LilyPond file type is detected if your file @file{~/.vim/filetype.vim} @c
has the following content:
@example
	if exists("did_load_filetypes")
  	  finish
	endif
	augroup filetypedetect
  	  au! BufNewFile,BufRead *.ly           setf lilypond
	augroup END
@end example
If Vim has been (pre-)installed to @file{/usr/...} (or any other place) 
instead of @file{/usr/local/...}, then @file{/usr/local/share/vim} may not 
be specified in your @code{$VIMRUNTIME} environment variable and you have to 
include this path explicitly by appending the following line to your 
@file{~/.vimrc}:
@example
	set runtimepath+=/usr/local/share/vim/
@end example

@section Problems

For help and questions use @email{lilypond-user@@gnu.org}.  Send bug
reports to @email{bug-lilypond@@gnu.org}.

Bugs that are not fault of LilyPond are documented here.

@subsection Bison 1.875

There is a bug in bison-1.875: compilation fails with "parse error
before `goto'" in line 4922 due to a bug in bison. To fix, either
recompile bison 1.875 with the following fix:

@example
   $ cd lily; make out/parser.cc
   $ vi +4919 out/parser.cc
   # append a semicolon to the line containing "__attribute__ ((__unused__))
   # save
   $ make
@end example

@subsection Linking to kpathsea

If kpathsea and the corresponding header files are installed in some
directory where GCC does not search by default, for example in
@file{/usr/local/lib/} and @file{/usr/local/include/} respectively,
you have to explicitly tell configure where to find it. To do this:

@itemize
@item @code{rm config.cache}
@item @code{export LDFLAGS=-L/usr/share/texmf/lib}
@item @code{export CPPFLAGS=-I/usr/share/texmf/include}
@item @code{./configure}
@end itemize
Once configure has found them, the paths are stored in
@file{config.make} and will be used even if you don't have the
environment variables set during make.


@unnumberedsubsec Gcc-3.0.4

Gcc 3.0.4 is flaky;  upgrade GCC.

@unnumberedsubsec Flex-2.5.4a and gcc-3.x

Flex 2.5.4a does not produce g++-3.1.1 compliant C++ code.  To compile
LilyPond with gcc-3.1.1 you may do

@example
	CONF=gcc-3.1 ./lexer-gcc-3.1.sh
	CPPFLAGS=-I$(pwd)/lily/out-gcc-3.1 CC=gcc-3.1 CXX=g++-3.1 \
	    ./configure --enable-config=gcc-3.1
	CONF=gcc-3.1 ./lexer-gcc-3.1.sh
	make conf=gcc-3.1
@end example


@unnumberedsubsec OpenBSD

@itemize @bullet
@item
 Refer to the section ``Linking to kpathsea'': GCC on OpenBSD doesn't
set include paths for kpathsea.
@end itemize

@unnumberedsubsec NetBSD

@itemize @bullet
@item The flex precompiled in NetBSD-1.4.2 is broken.
Upgrade to flex-2.5.4a.
@end itemize

@unnumberedsubsec  Solaris

@itemize @bullet
@item Solaris7, ./configure

@file{./configure} needs a POSIX compliant shell.  On Solaris7,
@file{/bin/sh} is not yet POSIX compliant, but @file{/bin/ksh} or bash
is.   Run configure like:
@example
	CONFIG_SHELL=/bin/ksh ksh -c ./configure
@end example
or:
@example
	CONFIG_SHELL=/bin/bash bash -c ./configure
@end example

@end itemize

@bye
        
