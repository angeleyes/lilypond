@c -*- coding: utf-8; mode: texinfo; -*-
@ignore
    Translation of GIT committish: FILL-IN-HEAD-COMMITTISH

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  See TRANSLATION for details.
@end ignore

@c \version "2.11.38"

@node Simultaneous notes
@section Simultaneous notes

@lilypondfile[quote]{simultaneous-headword.ly}

Polyphony in music refers to having more than one voice occurring
in a piece of music.  Polyphony in LilyPond refers to having more
than one voice on the same staff.

@menu
* Single voice::                
* Multiple voices::             
@end menu


@node Single voice
@subsection Single voice

This section discusses simultaneous notes inside the same voice.

@menu
* Chorded notes::                      
* Clusters::                    
@end menu

@node Chorded notes
@subsubsection Chorded notes

@cindex chords
@cindex brackets, angle
@funindex <
@funindex >
@funindex <...>

A chord is formed by a enclosing a set of pitches between @code{<} and
@code{>}.  A chord may be followed by a duration and/or a set of
articulations, just like simple notes:

@lilypond[verbatim,quote,relative=1]
<c e g>2 <c f a>4-> <e g c>-.
@end lilypond

For more information about chords, see @ref{Chord notation}.

@seealso

Music Glossary:
@rglos{chord}.

Learning Manual:
@rlearning{Combining notes into chords}.

Notation Reference:
@ref{Chord notation}.

Snippets:
@rlsr{Simultaneous notes}.

@ignore
@knownissues

For some reason, music expressions like @code{<< @{ g8 e8 @} a4 >>}
that should automatically turn into chords, appear split in two
staves.  To avoid this, use explicit chords instead as in
@code{<g a>8 <e a>8}.
@end ignore

@node Clusters
@subsubsection Clusters

@cindex cluster
@funindex \makeClusters

A cluster indicates a continuous range of pitches to be played.  They
can be denoted as the envelope of a set of notes.  They are entered by
applying the function @code{\makeClusters} to a sequence of chords,
e.g.,

@lilypond[quote,relative=2,verbatim]
\makeClusters { <g b>2 <c g'> }
@end lilypond

Ordinary notes and clusters can be put together in the same staff,
even simultaneously.  In such a case no attempt is made to
automatically avoid collisions between ordinary notes and clusters.

@seealso

Music Glossary:
@rglos{cluster}.

Snippets:
@rlsr{Simultaneous notes}.

Internals Reference:
@rinternals{ClusterSpanner},
@rinternals{ClusterSpannerBeacon},
@rinternals{Cluster_spanner_engraver}.

@knownissues

Clusters look good only if they span at least two chords; otherwise
they appear too narrow.

Clusters do not have a stem and cannot indicate durations by
themselves.  Separate clusters would need a separating rest between
them.

@node Multiple voices
@subsection Multiple voices

This section discusses simultaneous notes in multiple voices or
multiple staves.

@menu
* Collision resolution::        
* Automatic part combining::    
* Writing music in parallel::   
@end menu

@node Collision resolution
@subsubsection Collision resolution

@cindex merging notes
@cindex note collisions
@cindex collisions
@funindex \shiftOn
@funindex \shiftOnn
@funindex \shiftOnnn
@funindex \shiftOff
@cindex shift rest, automatic

Note heads with equal durations are automatically merged, while
note heads with unequal durations are not merged.  Rests opposite
a stem are shifted vertically.

@lilypond[quote,verbatim,relative=2]
<<
  {
    c8 d e d c d c4
    g'2 fis
  } \\ {
    c2 c8. b16 c4
    e,2 r
  } \\ {
    \oneVoice
    s1
    e8 a b c d2
  }
>>
@end lilypond

Note heads with different note heads may be merged, with the exception
of half-note heads and quarter-note heads:

@lilypond[quote,verbatim,relative=2]
<<
  {
    \mergeDifferentlyHeadedOn
    c8 d e d c d c4
    g'2 fis
  } \\ {
    c2 c8. b16 c4
    e,2 r
  } \\ {
    \oneVoice
    s1
    e8 a b c d2
  }
>>
@end lilypond

Note heads with different dots may be merged:

@lilypond[quote,relative=2,verbatim]
<<
  {
    \mergeDifferentlyHeadedOn
    \mergeDifferentlyDottedOn
    c8 d e d c d c4
    g'2 fis
  } \\ {
    c2 c8. b16 c4
    e,2 r
  } \\ {
    \oneVoice
    s1
    e8 a b c d2
  }
>>
@end lilypond

@cindex shift note

The collision on the second measure happens because
@code{merge-differently-headed} cannot successfully complete the merge
when three or more notes line up in the same column -- in fact, you
will obtain a warning for this reason.  To allow the merge to work
properly, apply a @code{\shift} to the note that should not be merged.
Here, @code{\shiftOn} is applied to move the top @code{g} out of the
column, and @code{merge-differently-headed} works properly.

@lilypond[quote,relative=2,verbatim]
<<
  {
    \mergeDifferentlyHeadedOn
    \mergeDifferentlyDottedOn
    c8 d e d c d c4
    \shiftOn
    g'2 fis
  } \\ {
    c2 c8. b16 c4
    e,2 r
  } \\ {
    \oneVoice
    s1
    e8 a b c d2
  }

>>
@end lilypond

The @code{\shiftOn}, @code{\shiftOnn}, and @code{\shiftOnnn} commands
specify the degree to which chords of the current voice should be
shifted.  The outer voices (normally: voices one and two) have
@code{\shiftOff}, while the inner voices (three and four) have
@code{\shiftOn}.  @code{\shiftOnn} and @code{\shiftOnnn} define
further shift levels.

Notes are only merged if they have opposing stem directions (i.e., in
@code{Voice} 1 and 2).

@cindex multiple voices
@cindex polyphonic music
@cindex shifting voices

@predefined

@funindex \mergeDifferentlyDottedOn
@code{\mergeDifferentlyDottedOn},
@funindex \mergeDifferentlyDottedOff
@code{\mergeDifferentlyDottedOff},
@funindex \mergeDifferentlyHeadedOn
@code{\mergeDifferentlyHeadedOn},
@funindex \mergeDifferentlyHeadedOff
@code{\mergeDifferentlyHeadedOff}.
 
@funindex \oneVoice
@code{\oneVoice},
@funindex \voiceOne
@code{\voiceOne},
@funindex \voiceTwo
@code{\voiceTwo},
@funindex \voiceThree
@code{\voiceThree},
@funindex \voiceFour
@code{\voiceFour}.

@funindex \voiceNeutralStyle
@code{\voiceNeutralStyle},
@funindex \voiceOneStyle
@code{\voiceOneStyle},
@funindex \voiceTwoStyle
@code{\voiceTwoStyle},
@funindex \voiceThreeStyle
@code{\voiceThreeStyle},
@funindex \voiceFourStyle
@code{\voiceFourStyle}.

@funindex \shiftOn
@code{\shiftOn},
@funindex \shiftOnn
@code{\shiftOnn},
@funindex \shiftOnnn
@code{\shiftOnnn},
@funindex \shiftOff
@code{\shiftOff}.

@snippets

@lilypondfile[verbatim,lilyquote,texidoc,doctitle]
{additional-voices-to-avoid-collisions.ly}

@lilypondfile[verbatim,lilyquote,texidoc,doctitle]
{forcing-horizontal-shift-of-notes.ly}

@seealso

Music Glossary:
@rglos{polyphony}.

Learning Manual:
@rlearning{Multiple notes at once},
@rlearning{Voices contain music},
@rlearning{Collisions of objects}.

Snippets:
@rlsr{Simultaneous notes}.

Internals Reference:
@rinternals{NoteColumn}.
The objects responsible for resolving collisions
are
@rinternals{NoteCollision} and
@rinternals{RestCollision}.


@knownissues

When using @code{merge-differently-headed} with an upstem eighth or a
shorter note, and a downstem half note, the eighth note stem gets a
slightly wrong offset because of the different width of the half note
head symbol.

@c investigate! Sometimes it works, sometimes not. --FV
It is not clear in which circumpstances you can succesfully merge
different note heads that are at the same time differently dotted.

There is no support for chords where the same note occurs with
different accidentals in the same chord.  In this case, it is
recommended to use enharmonic transcription, or to use special
cluster notation (see @ref{Clusters}).


@node Automatic part combining
@subsubsection Automatic part combining

@cindex automatic part combining
@cindex part combiner
@cindex combining parts
@funindex \partcombine

Automatic part combining is used to merge two parts of music onto a
staff.  It is aimed at typesetting orchestral scores.  When the two
parts are identical for a period of time, only one is shown.  In
places where the two parts differ, they are typeset as separate
voices, and stem directions are set automatically.  Also, solo and
@notation{a due} parts are identified and marked by default.

The syntax for part combining is:

@example
\partcombine @var{musicexpr1} @var{musicexpr2}
@end example

The following example demonstrates the basic functionality of the part
combiner: putting parts on one staff and setting stem directions and
polyphony.  The same variables are used for the independent
parts and the combined staff.

@lilypond[quote,verbatim]
instrumentOne = \relative c' {
  c4 d e f
  R1
  d'4 c b a
  b4 g2 f4
  e1
}

instrumentTwo = \relative g' {
  R1
  g4 a b c
  d c b a
  g f( e) d
  e1
}

<<
  \new Staff \instrumentOne
  \new Staff \instrumentTwo
  \new Staff \partcombine \instrumentOne \instrumentTwo
>>
@end lilypond

The notes in the third measure appear only once, although they were
specified in both parts.  Stem, slur, and tie directions are set
automatically, depending whether there is a solo or unison.  When
needed in polyphony situations, the first part (with context called
@code{one}) always gets up stems, while the second (called @code{two})
always gets down stems.  In solo situations, the parts get marked with
@q{Solo} and @q{Solo II}, respectively.  The unisono (@notation{a due})
parts are marked by default with the text @qq{a2}.

Both arguments to @code{\partcombine} will be interpreted as
@code{Voice} contexts.  If using relative octaves,
@code{\relative} should be specified for both music expressions,
i.e.,

@example
\partcombine
  \relative @dots{} @var{musicexpr1}
  \relative @dots{} @var{musicexpr2}
@end example

@noindent
A @code{\relative} section that is outside of @code{\partcombine}
has no effect on the pitches of @var{musicexpr1} and
@var{musicexpr2}.

@snippets

Parts may be merged without printing text:

@lilypond[quote,verbatim]
\new Staff <<
  \set Staff.printPartCombineTexts = ##f
  \partcombine
    \relative g' { g a( b) r }
    \relative g' { g r4 r f }
>>
@end lilypond

The printed text may be changed:

@lilypond[quote,verbatim]
\new Staff <<
  \set Score.soloText = #"girl"
  \set Score.soloIIText = #"boy"
  \set Score.aDueText = #"together"
  \partcombine
    \relative g' { g4 g r r a2 g }
    \relative g' { r4 r a( b) a2 g }
>>
@end lilypond


@seealso

Music Glossary:
@rglos{a due},
@rglos{part}.

Notation Reference:
@ref{Writing parts}.

Snippets:
@rlsr{Simultaneous notes}.


Internals Reference:
@rinternals{PartCombineMusic},
@rinternals{Voice}.

@knownissues

When @code{printPartCombineTexts} is set, if the two voices play
the same notes on and off, the part combiner may typeset @code{a2}
more than once in a measure.

@code{\partcombine} cannot be inside @code{\times}.

@code{\partcombine} cannot be inside @code{\relative}.

Internally, the @code{\partcombine} interprets both arguments as
@code{Voice}s named @code{one} and @code{two}, and then decides
when the parts can be combined.  Consequently, if the arguments
switch to differently named @rinternals{Voice} contexts, the
events in those will be ignored.

@c IIRC in users list someone pointed out more issues. TODO: lookup FV

@node Writing music in parallel
@subsubsection Writing music in parallel

@cindex Writing music in parallel
@cindex Interleaved music
@funindex parallelMusic

Music for multiple parts can be interleaved in input code.  The
function @code{\parallelMusic} accepts a list with the names of a
number of variables to be created, and a musical expression.  The
content of alternate measures from the expression become the value of
the respective variables, so you can use them afterwards to print the
music.

@warning{Bar checks @code{|} must be used, and the measures must
be of the same length.}

@lilypond[quote,verbatim]
\parallelMusic #'(voiceA voiceB) {
  % Bar 1
  r8 g'16[ c''] e''[ g' c'' e''] r8 g'16[ c''] e''[ g' c'' e''] |
  c'2                               c'2                         |

  % Bar 2
  r8 a'16[ d''] f''[ a' d'' f''] r8 a'16[ d''] f''[ a' d'' f''] |
  c'2                               c'2                         |
}
\new StaffGroup <<
  \new Staff  \voiceA
  \new Staff  \voiceB
>>
@end lilypond

Relative mode may be used.  Note that the @code{\relative} command
is not used inside @code{\parallelMusic} itself.  The notes are
relative to the preceding note in the voice, not to the previous
note in the input -- in other words, relative notes for
@code{voiceA} ignore the notes in @code{voiceB}.

@lilypond[quote,verbatim]
\parallelMusic #'(voiceA voiceB) {
  % Bar 1
  r8 g16 c e g, c e r8 g,16 c e g, c e  |
  c2                c                   |

  % Bar 2
  r8 a,16 d f a, d f r8 a,16 d f a, d f |
  c2                 c                  |
 }
\new StaffGroup <<
  \new Staff \relative c'' \voiceA
  \new Staff \relative c'  \voiceB
>>
@end lilypond

This works quite well for piano music.  This example maps four
consecutive measures to four variables:

@lilypond[quote,verbatim]
global = {
  \key g \major
  \time 2/4
}

\parallelMusic #'(voiceA voiceB voiceC voiceD) {
  % Bar 1
  a8    b     c   d     |
  d4          e         |
  c16 d e fis d e fis g |
  a4          a         |

  % Bar 2
  e8      fis  g     a   |
  fis4         g         |
  e16 fis g  a fis g a b |
  a4           a         |

  % Bar 3 ...
}

\score {
  \new PianoStaff <<
     \new Staff {
       \global
       <<
         \relative c'' \voiceA
         \\
         \relative c'  \voiceB
       >>
     }
     \new Staff {
       \global \clef bass
       <<
         \relative c \voiceC
         \\
         \relative c \voiceD
       >>
     }
  >>
}
@end lilypond

@seealso

Learning Manual:
@rlearning{Organizing pieces with variables}.

Snippets:
@rlsr{Simultaneous notes}.
