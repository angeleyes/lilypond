@c -*- coding: utf-8; mode: texinfo; -*-
@ignore
    Translation of GIT committish: FILL-IN-HEAD-COMMITTISH

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  See TRANSLATION for details.
@end ignore

@c \version "2.11.38"

@node Simultaneous notes
@section Simultaneous notes

@lilypondfile[quote]{simultaneous-headword.ly}

Polyphony in music refers to having more than one voice occurring
in a piece of music.  Polyphony in LilyPond refers to having more
than one voice on the same staff.

@menu
* Single voice::                
* Multiple voices::             
@end menu


@node Single voice
@subsection Single voice

@menu
* Chorded notes::                      
* Clusters::                    
@end menu

@node Chorded notes
@subsubsection Chorded notes

@cindex chords
@cindex brackets, angle
@funindex <
@funindex >
@funindex <...>

A chord is formed by a enclosing a set of pitches between @code{<} and
@code{>}.  A chord may be followed by a duration and/or a set of
articulations, just like simple notes:

@lilypond[verbatim,ragged-right,fragment,quote,relative=1]
<c e g>2 <c f a>4-> <e g c>-.
@end lilypond

For more information about chords, see @ref{Modern chords}.

@seealso

Music Glossary:
@rglos{chord}.

Learning Manual:
@rlearning{Combining notes into chords}.

Notation Reference:
@ref{Modern chords}.

Snippets:
@rlsr{Simultaneous notes}.

@knownissues

For some reason, music expressions like @code{<< @{ g8 e8 @} a4 >>}
that should automatically turn into chords, appear splitted in two
staves.  To avoid this, use explicit chords instead as in
@code{<g a>8 <e a>8}.


@node Clusters
@subsubsection Clusters

@cindex cluster
@funindex \makeClusters

A cluster indicates a continuous range of pitches to be played.  They
can be denoted as the envelope of a set of notes.  They are entered by
applying the function @code{\makeClusters} to a sequence of chords,
e.g.,

@lilypond[quote,ragged-right,relative=2,fragment,verbatim]
\makeClusters { <g b>2 <c g'> }
@end lilypond

Ordinary notes and clusters can be put together in the same staff,
even simultaneously.  In such a case no attempt is made to
automatically avoid collisions between ordinary notes and clusters.

@seealso

Music Glossary:
@rglos{cluster}.

Snippets:
@rlsr{Simultaneous notes}.

Internals Reference:
@rinternals{ClusterSpanner},
@rinternals{ClusterSpannerBeacon},
@rinternals{Cluster_spanner_engraver}.

@c Examples: @rlsr{contemporary,cluster@/.ly}.

@knownissues

Clusters only look good if they span at least two chords; otherwise
they appear too narrow.

Clusters do not have a stem and can not indicate durations by
themselves.  Separate clusters would need a separating rest between
them.

@node Multiple voices
@subsection Multiple voices

@menu
* Collision resolution::        
* Automatic part combining::    
* Writing music in parallel::   
@end menu

@node Collision resolution
@subsubsection Collision resolution

@cindex merging notes
@cindex note collisions

Normally, note heads with a different number of dots are not
merged, but when the object property
@code{merge-differently-dotted} is set in the
@rinternals{NoteCollision} object, they are merged:

@lilypond[quote,verbatim,fragment,ragged-right,relative=2]
\new Voice << {
  g8 g8
  \override Staff.NoteCollision
    #'merge-differently-dotted = ##t
  g8 g8
} \\ { g8.[ f16] g8.[ f16] } >>
@end lilypond

Similarly, you can merge half note heads with eighth notes, by
setting @code{merge-differently-headed}:

@lilypond[quote,ragged-right,fragment,relative=2,verbatim]
\new Voice << {
  c8 c4.
  \override Staff.NoteCollision
    #'merge-differently-headed = ##t
c8 c4. } \\ { c2 c2 } >>
@end lilypond

@noindent
@code{merge-differently-headed} and
@code{merge-differently-dotted} only apply to opposing stem
directions (i.e. Voice 1 & 2).

LilyPond also vertically shifts rests that are opposite of a stem,
for example

@lilypond[quote,ragged-right,fragment,verbatim]
\new Voice << c''4 \\ r4 >>
@end lilypond

@cindex shift note

If three or more notes line up in the same column,
@code{merge-differently-headed} cannot successfully complete the
merge of the two notes that should be merged.  To allow the merge
to work properly, apply a @code{\shift} to the note that should
not be merged.  In the first measure of following example,
@code{merge-differently-headed} does not work (the half-note head
is solid).  In the second measure, @code{\shiftOn} is applied to
move the top @code{g} out of the column, and
@code{merge-differently-headed} works properly.

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
\override Staff.NoteCollision #'merge-differently-headed = ##t
<<
  { d=''2 g2 } \\
  { \oneVoice d=''8 c8 r4 e,8 c'8 r4 } \\
  { \voiceFour e,,2 e'2}
>>
<<
  { d'=''2 \shiftOn g2 } \\ 
  { \oneVoice d=''8 c8 r4 e,8 c'8 r4 } \\
  { \voiceFour e,,2 e'2}
>>
@end lilypond

@cindex multiple voices
@cindex polyphonic music
@cindex shifting voices

In some instances of complex polyphonic music, you may need
additional voices to avoid collisions between notes.  Additional
voices are added by defining an variable, as shown below:

@lilypond[quote,verbatim,ragged-right]
voiceFive = #(context-spec-music (make-voice-props-set 4) 'Voice)

\relative c''' <<
  { \voiceOne g4 ~  \stemDown g32[ f( es d c b a b64 )g] } \\
  { \voiceThree  b4} \\
  { \voiceFive d,} \\
  { \voiceTwo g,}
>>
@end lilypond



@predefined

@funindex \oneVoice
@code{\oneVoice},
@funindex \voiceOne
@code{\voiceOne},
@funindex \voiceTwo
@code{\voiceTwo},
@funindex \voiceThree
@code{\voiceThree},
@funindex \voiceFour
@code{\voiceFour}.

@funindex \voiceNeutralStyle
@funindex \voiceOneStyle
@funindex \voiceTwoStyle
@funindex \voiceThreeStyle
@funindex \voiceFourStyle
@example
\voiceNeutralStyle
\voiceOneStyle
\voiceTwoStyle
\voiceThreeStyle
\voiceFourStyle
@end example

@funindex \shiftOn
@code{\shiftOn},
@funindex \shiftOnn
@code{\shiftOnn},
@funindex \shiftOnnn
@code{\shiftOnnn},
@funindex \shiftOff
@code{\shiftOff}: these commands specify the degree to which
chords of the current voice should be shifted.  The outer voices
(normally: voice one and two) have @code{\shiftOff}, while the
inner voices (three and four) have @code{\shiftOn}.
@code{\shiftOnn} and @code{\shiftOnnn} define further shift
levels.

When LilyPond cannot cope, the @code{force-hshift} property of the
@rinternals{NoteColumn} object and pitched rests can be used to
override typesetting decisions.

@lilypond[quote,verbatim,ragged-right]
\relative <<
{
  <d g>
  <d g>
} \\ {
  <b f'>
  \once \override NoteColumn #'force-hshift = #1.7
  <b f'>
} >>
@end lilypond


@seealso

Snippets:
@rlsr{Simultaneous notes}.

Internals Reference: the objects responsible for resolving collisions
are
@rinternals{NoteCollision} and
@rinternals{RestCollision}.


@knownissues

When using @code{merge-differently-headed} with an upstem eighth
or a shorter note, and a downstem half note, the eighth note gets
the wrong offset.

There is no support for clusters where the same note occurs with
different accidentals in the same chord.  In this case, it is
recommended to use enharmonic transcription, or to use special
cluster notation (see @ref{Clusters}).

@node Automatic part combining
@subsubsection Automatic part combining

@cindex automatic part combining
@cindex part combiner
@cindex combining parts
@funindex \partcombine

Automatic part combining is used to merge two parts of music onto a
staff.  It is aimed at typesetting orchestral scores.  When the two
parts are identical for a period of time, only one is shown.  In
places where the two parts differ, they are typeset as separate
voices, and stem directions are set automatically.  Also, solo and
@notation{a due} parts are identified and marked by default.

The syntax for part combining is:

@example
\partcombine @var{musicexpr1} @var{musicexpr2}
@end example

The following example demonstrates the basic functionality of the part
combiner: putting parts on one staff and setting stem directions and
polyphony.  The same variables are used for the independent
parts and the combined staff.

@lilypond[quote,verbatim,ragged-right]
instrumentOne = \relative c' {
  c4 d e f
  R1
  d'4 c b a
  b4 g2 f4
  e1
}

instrumentTwo = \relative g' {
  R1
  g4 a b c
  d c b a
  g f( e) d
  e1
}

<<
  \new Staff \instrumentOne
  \new Staff \instrumentTwo
  \new Staff \partcombine \instrumentOne \instrumentTwo
>>
@end lilypond

The notes in the third measure appear only once, although they were
specified in both parts.  Stem, slur, and tie directions are set
automatically, depending whether there is a solo or unison.  When
needed in polyphony situations, the first part (with context called
@code{one}) always gets up stems, while the second (called @code{two})
always gets down stems.  In solo situations, the parts get marked with
@q{Solo} and @q{Solo II}, respectively.  The unisono (@notation{a due})
parts are marked by default with the text @qq{a2}.

Both arguments to @code{\partcombine} will be interpreted as
@code{Voice} contexts.  If using relative octaves,
@code{\relative} should be specified for both music expressions,
i.e.,

@example
\partcombine
  \relative @dots{} @var{musicexpr1}
  \relative @dots{} @var{musicexpr2}
@end example

@noindent
A @code{\relative} section that is outside of @code{\partcombine}
has no effect on the pitches of @var{musicexpr1} and
@var{musicexpr2}.

@snippets

Parts may be merged without printing text:

@lilypond[quote,verbatim,ragged-right]
\new Staff <<
  \set Staff.printPartCombineTexts = ##f
  \partcombine
    \relative g' { g a( b) r }
    \relative g' { g r4 r f }
>>
@end lilypond

The printed text may be changed:

@lilypond[quote,verbatim,ragged-right]
\new Staff <<
  \set Score.soloText = #"girl"
  \set Score.soloIIText = #"boy"
  \set Score.aDueText = #"together"
  \partcombine
    \relative g' { g4 g r r a2 g }
    \relative g' { r4 r a( b) a2 g }
>>
@end lilypond


@seealso

Music Glossary:
@rglos{a due},
@rglos{part}.

Notation Reference:
@ref{Writing parts}.

Snippets:
@rlsr{Simultaneous notes}.


Internals Reference:
@rinternals{PartCombineMusic},
@rinternals{Voice}.

@knownissues

When @code{printPartCombineTexts} is set, if the two voices play
the same notes on and off, the part combiner may typeset @code{a2}
more than once in a measure.

@code{\partcombine} cannot be inside @code{\times}.

@code{\partcombine} cannot be inside @code{\relative}.

Internally, the @code{\partcombine} interprets both arguments as
@code{Voice}s named @code{one} and @code{two}, and then decides
when the parts can be combined.  Consequently, if the arguments
switch to differently named @rinternals{Voice} contexts, the
events in those will be ignored.

@c IIRC in users list someone pointed out more issues. FV

@node Writing music in parallel
@subsubsection Writing music in parallel

@cindex Writing music in parallel
@cindex Interleaved music
@funindex parallelMusic

Music for multiple parts can be interleaved in input code.  The
function @code{\parallelMusic} accepts a list with the names of a
number of variables to be created, and a musical expression.  The
content of alternate measures from the expression become the value of
the respective variables, so you can use them afterwards to print the
music.

@lilypond[quote,fragment,verbatim]
\parallelMusic #'(voiceA voiceB) {
  r8 g'16[ c''] e''[ g' c'' e''] r8 g'16[ c''] e''[ g' c'' e''] |
  c'2                               c'2                         |
  r8 a'16[ d''] f''[ a' d'' f''] r8 a'16[ d''] f''[ a' d'' f''] |
  c'2                               c'2                         |
}
\new StaffGroup <<
  \new Staff  \voiceA
  \new Staff  \voiceB
>>
@end lilypond

This works quite well for piano music.  This example maps four
consecutive measures to four variables:

@lilypond[quote,verbatim]
global = { \key g \major  \time 2/4 }
music = {
  \parallelMusic #'(voiceA voiceB voiceC voiceD) {
    % Bar 1 
    a'8 b'      c'' d''   |
    d'4         e'        |
    c16 d e fis d e fis g |
    a,4         a,4       |

    % Bar 2
    e''8 fis''  g'' a''   |
    fis'4       g'        |
    e16 fis g a fis g a b |
    a,4         a,4       |

    % Bar 3 ...
  }
}

\score {      
  \new PianoStaff <<
    \new Staff {
      \global
      <<
        \voiceA \\
        \voiceB
      >>
    }
    \new Staff {
      \global \clef bass
      <<
        \voiceC \\
        \voiceD
      >>
    }
  >>
}
@end lilypond

@seealso

Learning Manual:
@rlearning{Organizing pieces with variables}

Snippets:
@rlsr{Simultaneous notes}.

