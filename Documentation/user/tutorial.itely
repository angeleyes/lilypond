@c -*-texinfo-*-

@c TODO: LilyPond Lilypond lilypond


@node Tutorial
@chapter Tutorial
  
@menu
* Running LilyPond::            Getting started
* First steps::                 
* The first tune::              The first tune
* Lyrics and chords::           Lyrics and chords
* More movements ::             
* A piano excerpt::             Piano music
* An orchestral score::         
* Other ways to run LilyPond::  
* Integrating text and music::  
* end of tutorial::             The end
@end menu


@node Running LilyPond
@section Running LilyPond

You make music notation with LilyPond as follows: first you edit a text
file containing a description of the notes. Then you run LilyPond on the
file. This leaves you with an output file, which you can view or print.

In this section we explain how to run LilyPond, and view or print the
output.  If you want to test your setup of LilyPond, or try to run an
example file yourself, then read this section. Otherwise, you can skip
to the next section, which explains how to
write LilyPond input.

The instructions that follow are for Unix. Windows instructions are
given at the end of this section. Start with opening a terminal window,
and start up a text editor.  For example, start an xterm and execute
@code{joe}.   Enter the following
input, and save the file as @file{test.ly}.
@example
\score @{
  \notes @{ c'4 e' g' @}
@} 
@end example
If this code looks intimidating you, then don't worry, we explain all
about it in the next section.

@cindex ly2dvi

@c dit is dus raar, dat je ly2dvi draait om lelie te draaien
@c (therefore name change proposal) 

Invoke the program  @code{ly2dvi} to run lilypond on your source file:
@example
ly2dvi -P test
@end example

You will see the following on your screen:
@example
GNU LilyPond 1.4.0
Now processing: `/home/fred/ly/test.ly'
Parsing...
Interpreting music...[1]
 @emph{ ... more interesting stuff ... }
PS output to `test.ps'...
DVI output to `test.dvi'...
@end example

@cindex DVI file
@cindex Viewing music
@cindex xdvi

The results of the ly2dvi run are two files, @file{test.dvi} and
@file{test.ps}.  The PS file (@file{test.ps}) is the one you can
print. You can view the PS file using the program ghostview.  If a
version of ghostview is installed on your system, one of these commands
will produce a window with some music notation on your screen.
@example
kghostview test.ps
ggv test.ps
ghostview test.ps
gv test.ps
@end example
When you're satisfied with the result, you can print the PS file by
clicking File/Print inside ghostview.

The DVI file (@file{test.dvi}) contains the same sheet music in a
different format. DVI files are more easily processed by the computer,
so viewing them usually is quicker. Execute @code{xdvi test}
to view the DVI file.

If your DVI viewer does not have a "Print" button, you can print the
file by executing @code{lpr test.ps}.

@c volgende alinea schrappen?  

If you can't get the examples to print, then you should look into
installing and configuring ghostscript.  Refer to GhostScript's website
at @uref{http://www.ghostscript.com}.

@cindex GhostScript
@cindex @code{lpr}
@cindex Printing output
@cindex PostScript


Windows users start the terminal by clicking on the lilypond icon.
Notepad is sufficient for editing the lilypond file. Viewing the PS file
can be done with @code{gsview32 test.ps}. Viewing DVI files can be done
with @code{yap test}. The "print" button in Yap will print files.  You
can also print from the command line by executing @code{gsview32 /s
test.ps}


@c titel?

@node First steps
@section First steps

Let's try to explain this example:

The basics of any piece of music are notes.Notes are entered 
with letters @code{a} to @code{g} followed by a
number that represents the duration: a @code{2} is a half note, a
@code{4} is a quarter note. A period is used for augmentation dots, so
entering @code{2.} gives a dotted half note. 
@example
     c2 e4 g2.
@end example
@lilypond[fragment]
\property Score.timing  = ##f
\property Staff.TimeSignature  = \turnOff
\property Staff.Clef  = \turnOff
\clef bass c2 e4 g2.
@end lilypond
If you don't specify a duration, then the duration last entered is used:
@c
@example
  f4 e d c2.
@end example
@lilypond[fragment]
\property Score.timing  = ##f
\property Staff.TimeSignature  = \turnOff
\property Staff.Clef  = \turnOff
\clef bass  f4 e d c2.
@end lilypond
The time signature can be set with a command of the form @code{\time},
and the clef with @code{\clef} as follows:
@example
     \time 3/4
     \clef bass
@end example
@lilypond[fragment]
        \time 3/4
        \clef bass
        s2._" "
@end lilypond

The commands together with the notes are combined to form a snippet of
music. They are combined by enclosing them with @code{\notes @{ @}}.
@example
  \notes @{
     \time 3/4
     \clef bass
     c2 e4 g2.
     f4 e d c2.
  @}
@end example

This snippet is ready to be printed. This is done by combining the music
with a printing command. The printing command is the so-called
@code{\paper} block.  The music and paper block are combined by
enclosing them in @code{\score}.

@lilypond[verbatim]
\score {
  \notes {
     \time 3/4
     \clef bass
     c2 e4  g2.
     f4 e d c2.
  }
  \paper { }
}
@end lilypond

@ignore
The @code{\paper} block looks empty, which means that we get default. That is because we did not contains page layout settings, such as the linewidth and
the staff size. For now, we'll use standard settings, hence the paper
block is empty (its braces enclose a blank space).
@end ignore

Rests are entered just like notes with the name @code{r}
@lilypond[fragment,verbatim]
r4 r8 r16
@end lilypond

Octaves are entered by adding apostrophes or commas to note names. For
example, the central C is entered as @code{c'}.

Pitches can be octaviated by adding  apostrophes or commas. The central C is
@code{c'}. Going up octave by octave we get @code{c''},
@code{c'''}. Going down from central C, we get @code{c} @code{c,}
@code{c,,} etc.

@lilypond[verbatim,fragment]
c'4 c'' c''' c c,
@end lilypond

LilyPond uses Dutch note names: you can make a note sharp by appending
@code{is} to the name, and flat by appending @code{es} to the name.
@lilypond[verbatim,fragment]
fis'4 bes'4 aeses'4
@end lilypond

Ties are created by entering a tilde (@code{~}) between the notes to be
tied:
@lilypond[fragment,verbatim]
  g'4 ~ g' a'2 ~ a'4
@end lilypond
Ties look almost the same as slurs, but they are different. Ties can
only indicate the extension of a note. Ties connect two note heads with
the same pitch.  Slurs on the other hand, can be drawn across many
notes, and indicate bound articulation.
 
The key signature is set with the command @code{\key}:
@lilypond[fragment,verbatim]
  \key d \major
  g'1
  \key c \minor
  g'
@end lilypond

The next example shows octave marks, ties, and rests in action. 
@lilypond[verbatim]
\score {
  \notes {
    \time 4/4
    \clef treble
    \key d \minor
    r4 r8 d''8 cis''4 e''
    d''8 a'4. ~ a'  b'8
    cis''4 cis''8 cis'' bis'4 d''8 cis'' ~
    cis''2 r2
  }
  \paper { }
}
@end lilypond
There is one interesting point to note in this example: accidentals
don't have to be marked explicitly. You just enter the pitch, and
LilyPond determines wether or not to print an accidental.

Managing larger pieces. 

If you look at the last piece, it is already apparent that entering
octaves using quotes is not very convenient. A score written in high
register will be encoded using lots quotes. This makes the input file
unreadable, and it also is a source of many errors.

This problem is solved by relative octave mode. In this mode, the quotes
are used to mark large jumps in the melody. Without any quotes or
commas, the interval between a note and its predecessor is assumed to be
a fourth or less. Quotes and commas add octaves in up and down
direction.  Relative octaves are introduced by @code{\relative} followed
by a starting pitch
@lilypond[fragment,verbatim]
\relative c'' { c4 d4 b4 e4 a,4 f'4 g,4 a'4 }
@end lilypond

Slurs (not to be confused with ties) are entered with parentheses. You
mark the starting note and ending note with a @code{(} and a
@code{)} respectively.

@lilypond[fragment,relative 2, verbatim]
c8( cis d ) e 
@end lilypond

If you need two slurs at the same time (one for articulation, one for
phrasing), you can also make phrasing slurs with @code{\(} and
@code{\)}.

@c lousy example
@lilypond[fragment,relative 1, verbatim]
a8(\( ais b ) c cis2 b'2 a4 cis, \) c
@end lilypond

Beams are drawn automatically, but if you don't like the choices, you
can enter beams by hand. Surround the notes to be grouped with @code{[}
and @code{]}:
@lilypond[fragment,relative 1, verbatim]
[a8 ais] [d es r d]
@end lilypond

You can make more than one staff, by specifying @code{\context Staff} before 
snippets of music, and combining those snippets in @code{<} and
@code{>}, as is demonstrated here:

@lilypond[fragment,verbatim]
< \context Staff = staffA { \clef treble c'' }
  \context Staff = staffB { \clef bass c }
>
@end lilypond
Here, @code{staffA} and @code{staffB} are names that you give to the
staff. For now, it doesn't matter what names you give, as long as they
are different.

We can typeset a melody with two staffs now:

@lilypond[verbatim]
\score {
  \notes 
  < \context Staff = staffA {
      \time 3/4
      \clef treble
      \relative c'' { e2 ( d4 c2 b4 [a8 a] [b b] [g g] )a2. }  
    }
    \context Staff = staffB {
       \clef bass
       c2 e4  g2.
       f4 e d c2.
    }
  >
  \paper {} 
}
@end lilypond

Notice that the time signature is specified in one melody staff only
(the top staff), but is printed on both. LilyPond knows that the time
signature should be the same for all staffs.

[TODO add some more here


* \header

* dynamics , articulation

* <chords>

* identifiers?

]

This is the end of the simple tutorial. What follows is also a manual in
tutorial-style, but it is much more in-depth, and alas more
intimidating.  You should read it if you want to know about the more
advanced features of lilypond, such as producing orchestral scores and
parts, fine tuning output, writing polyphonic music, etc.



@node The first tune
@section The first tune


This tutorial will demonstrate how to use Lilypond by presenting
examples of input along with resulting output.  We will use English
terms for notation.  In case you are not familiar with those, you may
consult the glossary that is distributed with LilyPond.

The examples discussed are included in the distribution, in the
subdirectory @file{input/tutorial/}@footnote{When we refer to filenames,
they are relative to the top directory of the source package. }


To demonstrate what LilyPond input looks like, we start off with a
full-fledged, yet simple example. It is a convoluted version
of the famous minuet in J. S. Bach's @emph{Klavierb@"uchlein}. The file
is included in the distribution as  @file{minuet.ly}.
@cindex Bach, Johann Sebastian 

@lilypond[verbatim]
% all text after a percent sign is a comment
% and is ignored by Lilypond
\include "paper16.ly"
\score {
    \notes                        
    \relative c'' \sequential {
            \time 3/4                
            \key g \major

        \repeat "volta" 2 {
            d4 g,8 a b c d4 g, g |
            e'4 c8 d e fis g4 g, g |
            c4 d8( )c b a( )b4 c8 b a g |
            a4 [b8 a] [g fis] g2.  |
        }

        b'4 g8 a b g
        a4 d,8 e fis d |
        g4 e8 fis g d cis4 b8 cis a4 |
        a8-. b-. cis-. d-. e-. fis-.
        g4 fis e |
        fis a,  r8 cis8
        d2.-\fermata
        \bar "|."
    }
    \paper {
       % standard settings are too wide for a book
       linewidth = 14.0 \cm
   }
}
@end lilypond

We will analyse the input, line by line.
@separate
@example
        % all text after a percent sign is a comment
        % and is ignored by Lilypond
@end example 
The percent sign, @code{%}, introduces a line comment.  You can also
comment out a block of several lines, by enclosing them in
@code{%@{} and @code{%@}}.
@cindex comment
@cindex block comment
@cindex line comment
@separate
@example 

        \include "paper16.ly"
 
@end example
@cindex @code{\include}
@cindex point, printer's
@cindex staff size setting 
By default, LilyPond will typeset the music in a size such that each 
staff is 20 point@footnote{A point is the standard measure of length for
printing; one point is 1/72.27 inch.} high.  We want smaller
output (16 point staff height), so we must import the settings for that
size, which is done here.
@separate
@example 

        \score @{
 
@end example 
Music is printed by combining a piece of music with directions for
outputting it.  This combination is formed in the @code{\score} block.
@separate
@example 

        \notes                
 
@end example 
Prepare LilyPond for accepting notes.
@cindex octaves, choosing
@cindex pitch
@separate
@example 

        \relative c''
 
@end example
@cindex relative
As we will see, each note is described by its note name, duration,
octave and possibly a chromatic alteration.  In this setup, the octave
is indicated by using high quotes (@code{'}) and ``lowered quotes''
(commas: @code{,}).  The central C is denoted by @code{c'}.  The C one
octave higher is @code{c''}.  One and two octaves below the central C is
denoted by @code{c} and @code{c,} respectively.

Even though a piece of music often spans a range of several octaves, it
mostly moves in small intervals.  LilyPond has a special entry mode to
save typing in this situation.  In this ``relative'' octave mode,
octaves of notes without quotes are chosen such that a note is as close
as possible (graphically, on the staff) to the preceding note.  If you
add a high-quote an extra octave is added.  A lowered quote (a comma)
will subtract an extra octave.

Because the first note has no predecessor,
you have to give the (absolute) pitch of the note to start with.
@separate
@example 

        \sequential @{
 
@end example 
What follows is sequential music, i.e.,
@cindex sequential music
notes that are to be played and printed after each other.
@separate
@example 

        \time 3/4
 
@end example
@cindex time signature, setting
@cindex @code{\time}
Set (or change) the time signature of the current piece: a 3/4 sign is
printed.  The time signature setting is also used to generate bar lines
at the right spots.
@separate
@example 

        \key g \major
 
@end example
@cindex key signature, setting
@cindex @code{\key}
Set (or change) the current key signature to G-major.  Although in this
example, the @code{\key} command happened to be entered after the
@code{\time} command, in the output the time signature will be printed
after the key signature; LilyPond knows about music typesetting
conventions.
@separate
@example 

        \repeat "volta" 2
 
@end example 
The following piece of music is played twice.  The first argument
indicates the type of repeat.  In this case, @code{"volta"} means that
prima volta/secunda volta brackets are used for the alternative
endings---if there were any.
@separate
@example 

        @{
 
@end example 
The subject of the repeat is again sequential music.  Since
@code{\sequential} is such a common construct, a shorthand is provided:
just leave off @code{\sequential}, and the result is the same.
@separate
@example 

        d4 g,8
 
@end example 
Two notes.  The first note is a quarter note with relative pitch
@code{d}.  The relative music was started with a @code{c''}, so the real
pitch of this note is @code{d''}.  The duration of a note is designated
by a number; the @code{4} here represents a quarter note.

The second note is an eight note with relative pitch @code{g,}.  The
pitch is taken relative to the previous @code{d''}, making this
note have real pitch @code{g'}.  The @code{8} represents an eight note.
@separate
@example 

        a b
 
@end example 
Two more notes, with pitch @code{a} and @code{b}.  Because their
duration is the same as the @code{g,8}, there is no need to enter the
duration, but you may enter it anyway, i.e., @code{a4 b4}
@separate
@example 

        d4 g, g |
 
@end example
@cindex bar check
@cindex @code{|}
@cindex errors, finding 
Three more notes.  The @code{|} character is a ``bar check''.  LilyPond
will verify that bar checks are found at the start of a measure.  This can
help you track down typing errors.

@cindex alteration, chromatic
@cindex chromatic alteration
@separate
@example 

        c8 d e fis

@end example 
So far, no notes were chromatically altered.  Here is the first one that
is: @code{fis}.  Lilypond by default uses Dutch@footnote{Note names are
available in several languages, but we find the Dutch names quite
convenient.} note names, and ``Fis'' is the Dutch note name for ``F
sharp''.  However, there is no sharp sign in the output. The program
keeps track of key signatures, and will only print accidentals if they
are needed.

For groups of eighth notes and shorter, LilyPond can determine how the
notes should form a beam.  In this case, the 4 eights are automatically
printed as a beam.
@separate
@example 

        c4 d8( )c b a( )b4 c8 b a g |
 
@end example 
The beginning and ending notes of a slur are marked with parentheses,
@code{(} and @code{)} for start and end respectively.  The line above
indicates two slurs.  These slur markers (parentheses) are entered
between the slurred notes.
@separate
@example 

        a4 [b8 a] [g fis] 
 
@end example 
Automatic beaming can be overridden by inserting beam marks, @code{[}
and @code{]}.  These beam markers (brackets) are put around the notes
you want beamed.
@separate
@example 

        g2.  |
 
@end example
@cindex augmentation dot
@cindex dot
A period adds an augmentation dot to the note.
@separate
@example 

        @}
 
@end example 
The end of the sequential music to be repeated.  LilyPond will typeset a
repeat bar.
@separate
@example 

        cis'4 b8 cis a4 |
 
@end example 
Accidentals are printed whenever necessary: the first C sharp of the bar
will be printed with an accidental, the second one without.
@separate
@example 

        a8-. b-. cis-. d-. e-. fis-.
 
@end example
@cindex articulation
You can enter articulation signs either in a verbose form or using a
shorthand.  Here we demonstrate the shorthand: it is formed by a dash
and the character for the articulation to use, e.g. @code{-.} for
staccato as shown above.
@separate
@example 

        fis a, r8 cis8
 
@end example 
 
Rests are denoted by the special notename @code{r}.  
@separate
@example 

        d2.-\fermata
 
@end example 
All articulations have a verbose form, like @code{\fermata}.  The
command @code{\fermata} is not part of the core of the language, but it
is a shorthand for a more complicated description of a fermata symbol.
@code{\fermata} names that description and is therefore called an
identifier.
@cindex identifier
@cindex @code{\fermata}
@separate
@example
        \bar "|."
        @}
@end example 
Here the music ends.  LilyPond does not automatically typeset and end
bar, we must explicitely request one, using @code{"|."}.

@separate
@example 

        \paper @{
                linewidth = 14.0\cm
        @}
 
@end example 
The @code{\paper} block specifies how entered music should be converted
to notation output.  Most of the details of the conversion (font sizes,
dimensions, etc.) have been taken care of, but to fit the output in this
document, it has to be narrower.  We do this by setting the line width
to 14 centimeters (approximately 5.5 inches).
@separate
@example 

        @}
 
@end example 
The last brace ends the @code{\score} block.




@node Lyrics and chords
@section Lyrics and chords

In this section we show how to typeset a song. This file is
included as @file{flowing.ly}.

@example 
\header @{
        title = "The river is flowing"
        composer = "Traditional"
@}
\include "paper16.ly"
melody = \notes \relative c' @{
        \partial 8
        \key c \minor
        g8 |
        c4 c8 d [es () d] c4 | f4 f8 g [es() d] c g |
        c4 c8 d [es () d] c4 | d4 es8 d c4.
        \bar "|."
@}

text = \lyrics @{
        The ri -- ver is flo- __ wing, flo -- wing and gro -- wing, the
        ri -- ver is flo -- wing down to the sea.
@}

accompaniment =\chords @{
        r8
        c2:3- f:3-.7 d:min es4 c8:min r8
        c2:min f:min7 g:7^3.5 c:min @}

\score @{
        \simultaneous @{
          %\accompaniment
          \context ChordNames \accompaniment

          \addlyrics
            \context Staff = mel @{        
              \property Staff.noAutoBeaming = ##t
              \property Staff.automaticMelismata = ##t
              \melody 
            @}
            \context Lyrics \text
        @}
        \midi  @{ \tempo 4=72 @}
        \paper @{ linewidth = 10.0\cm @}
@} 
@end example 


The result would look this.@footnote{The titling and font size shown
may differ, since the titling in this document is not generated by
@code{ly2dvi}.}

@center @strong{The river is flowing}
@center Traditional 

@lilypond[center]
\header {
        title = "The river is flowing"
        composer = "Traditional"
}
\include "paper16.ly"
melody = \notes \relative c' {
        \partial 8
        \key c \minor
        g8 |
        c4 c8 d [es () d] c4 | f4 f8 g [es() d] c g |
        c4 c8 d [es () d] c4 | d4 es8 d c4.
        \bar "|."
}

text = \lyrics {
        The ri -- ver is flo- __ wing, flo -- wing and gro -- wing, the
        ri -- ver is flo -- wing down to the sea.
}

accompaniment =\chords {
        r8
        c2:3- f:3-.7 d:min es4 c8:min r8
        c2:min f:min7 g:7^3.5 c:min }

\score {
        \simultaneous {
          %\accompaniment
          \context ChordNames \accompaniment

          \addlyrics
            \context Staff = mel {
              \property Staff.noAutoBeaming = ##t
              \property Staff.automaticMelismata = ##t
              \melody 
            }
            \context Lyrics \text
        }
        \midi  { \tempo 4=72 }
        \paper { linewidth = 10.0\cm }
}
@end lilypond

Again, we will dissect the file line by line.
@separate
@example 

        \header @{
 
@end example
@cindex @code{\header}
Information about the music you are about to typeset goes into a
@code{\header} block.  The information in this block is not used by
LilyPond, but it is passed into the output.  @file{ly2dvi} uses this
information to print titles above the music.
@separate
@example 

        title = "The river is flowing"
        composer = "Traditional (?)"
@end example
@cindex assignments
@cindex identifier assignment
the @code{\header} block contains assignments.  In each assignment, a
variable is set to a value. Lexically, both the variable name and the
assigned value are strings. The values have to be quoted here, because
they contain spaces, the variable names could also be put within quotes
but it is not necessary. 
@separate
@example 

        \include "paper16.ly"
 
@end example
Smaller size for inclusion in a book.
@separate
@example 

        melody = \notes \relative c' @{
 
@end example 
The structure of the file will be the same as the previous one, a
@code{\score} block with music in it.  To keep things readable, we will
give names to the different parts of music, and use the names to
construct the music within the score block.

@separate
@example 
        \partial 8
@end example 

@cindex @code{\partial}
@cindex anacrusis
The piece starts with an anacrusis of one eighth.
@separate
@example
        \key c \minor
@end example
The key is C minor: we have three flats.

@separate
@example 

        c4 c8 d [es () d] c4 | f4 f8 g [es() d] c g |
        c4 c8 d [es () d] c4 | d4 es8 d c4.
        \bar "|."
 
@end example 

@cindex manual beaming
@cindex automatic beaming, turning off
We use explicit beaming.  Since this is a song,  we turn automatic
beams off, and use explicit beaming where needed.
@separate
@example 

        @}
 
@end example 
This ends the definition of @code{melody}.  

@separate
@example 

        text = \lyrics @{
 
@end example
@cindex lyrics
@cindex identifier assignment
@cindex syllables, entering
Another identifier assignment.  This one is for the lyrics. 
Lyrics are formed by syllables that have duration, and not by
notes. To make LilyPond parse words as syllables,  switch it  into
lyrics mode with @code{\lyrics}.  Again, the brace after @code{\lyrics}
is a shorthand for @code{\sequential @{}.
@separate
@example 

  The4 ri -- ver is flo- __ wing,  flo -- wing and gro -- wing, the
  ri- ver is flo- __ wing down to the sea.
@}
 
@end example
@cindex extenders, lyric
@cindex hyphens, lyric 
The syllables  themselves are  separated by spaces.  You can get syllable
extenders by entering @code{__}, and centered hyphens with
@code{-}@code{-}.  We enter the syllables as if they are all quarter notes
in length (hence the @code{4}), and use a feature to align the
syllables to the music, which obviously isn't all quarter notes.
@separate
@example 

        accompaniment =\chords @{
 
@end example
@cindex chords
@cindex mode, chords
We'll put chords over the music. To enter them, there is a special mode
analogous to @code{\lyrics} and @code{\notes} mode, where you can give
the names of the chords you want, instead of listing the notes
comprising the chord.
@separate
@example 

        r8
 
@end example 
There is no accompaniment during the anacrusis.
@separate
@example 

        c2:3- f:3-.7
 
@end example

@cindex tonic
@cindex chord modifier
@cindex modifier, chord 
A chord is started by  the tonic of the chord. The
first one lasts a half note.  An unadorned note creates a major
triad. Since a minor triad is wanted, @code{3-} is added to modify the
third to be small. @code{7} modifies (adds) a seventh, which is small by
default to create the @code{f a c es} chord.  Multiple modifiers must be
separated by dots.
@separate
@example 

        d:min es4 c8:min r8
 
@end example

Some modifiers have predefined names, eg. @code{min} is  the same as
@code{3-}, so @code{d-min} is a minor @code{d} chord.
@separate
@example 

        c2:min f:min7 g:7^3.5 c:min @}
 
@end example
@cindex named modifier

A named modifier @code{min} and a normal modifier @code{7} do not have
to be separated by a dot.  Tones from a chord are removed with chord
subtractions.  Subtractions are started with a caret, and they are
also separated by dots.  In this example, @code{g:7^3.5} produces a
minor seventh.  The brace ends the sequential music.
@separate
@example 

        \score @{
                \simultaneous @{
 
@end example 
We assemble the music in the @code{\score} block.  Melody, lyrics and
accompaniment have to sound at the same time, so they should be
@code{\simultaneous}.
@cindex @code{\simultaneous}
@separate
@example 

        %\accompaniment
 
@end example 
Chord mode generates notes grouped in @code{\simultaneous} music.  If
you remove the comment sign, you can see the chords in normal
notation: they will be printed as note heads on a separate
staff. To print them as chords names, they have to be interpreted as
being chords, not notes. This is done with the following command:  
@separate
@example 

        \context ChordNames \accompaniment
 
@end example
@cindex context
@cindex interpretation context
@cindex notation context


Normally, the notes that you enter are transformed into note heads.
Note heads alone make no sense, they need surrounding information: a key
signature, a clef, staff lines, etc.  They need @emph{context}.  In
LilyPond, these symbols are created by objects called `interpretation
contexts'.  Interpretation contexts exist for generating notation
(`notation context') and for generating sound (`performance
context'). These objects only exist during a run of LilyPond.

By default, LilyPond will create a Staff context for you.  If you would
remove the @code{%} sign in the previous line, you would see that
mechanism in action.

We don't want that default here, because we want chord names.  The
command above explicitly creates an interpretation context of 
@code{ChordNames} type to interpret the music @code{\accompaniment}. 
@separate
@example 

        \addlyrics
 
@end example
@cindex @code{\addlyrics}
@cindex lyrics and melody, combining
@cindex combining lyrics and melody

The lyrics should be aligned with the melody.  This is done by
combining both with @code{\addlyrics}.  @code{\addlyrics} takes two
pieces of music (usually a melody and lyrics, in that order) and
aligns the syllables of the second piece under the notes of the
first piece.  If you would reverse the order, the notes would be
aligned on the lyrics, which is not very useful, and looks
silly.
@separate
@example 

        \context Staff = mel @{
 
@end example

The second argument of @code{\addlyrics} is the melody.  We instantiate
a @code{Staff} context explicitly: should you choose to remove the
comment before the ``note heads'' version of the accompaniment, the
accompaniment will be on a nameless staff.  The melody has to be on
staff different from the accompaniment.  This is accomplished by giving
the melody and accompaniment staffs different names.
@separate
@example 

        \property Staff.noAutoBeaming = ##t
 
@end example
@cindex \property
@cindex context variables
@cindex setting context variables
An interpretation context has variables, called properties, that tune
its behaviour.  One of the variables is @code{noAutoBeaming}.  Setting
this Staff's property to @code{##t}, which is the boolean value @var{true},
turns the automatic beaming mechanism off for the current staff.
@cindex GUILE
@cindex Scheme
@cindex accessing Scheme
@cindex evaluating Scheme
@cindex LISP

LilyPond internally uses GUILE, a Scheme-interpreter. Scheme is a
language from the LISP family. You can learn more about Scheme at
@uref{http://www.scheme.org}. It is used to represent data throughout
the whole program. The hash-sign (@code{#}) accesses GUILE directly: the
code following the hash-sign is evaluated as Scheme.  The boolean value
@var{true} is @code{#t} in Scheme, so for LilyPond @var{true} looks like
@code{##t}.

If Scheme scares you, don't worry. You don't need to know Scheme to
create beautiful sheet music.



@separate
@example 

        \property Staff.automaticMelismata = ##t
 
@end example
@cindex automaticMelismata
@cindex melismata
@cindex @code{\addlyrics} and slurs
Similarly, we  don't want to print a  syllable when there is
a slur. This sets up @code{\addlyrics} to not put lyrics under each
separate note while there is a slur.
@separate
@example 

          \melody
        @}
 
@end example 
Finally, we put the melody on the current staff.  Note that the
@code{\property} directives and @code{\melody} are grouped in sequential
music,  so the property settings are done before the melody is
processed.
@separate
@example 

        \context Lyrics \text
 
@end example 
The second argument of @code{\addlyrics} is the text. The text also
should not land on a Staff, but on a interpretation context for
syllables, extenders, hyphens etc.  This context is called
Lyrics.
@separate
@example 

        \midi  @{ \tempo 4=72@}
 
@end example 
MIDI (Musical Instrument Digital Interface) is a standard for
connecting and recording digital instruments. So a MIDI file is like a
tape recording of an instrument. The @code{\midi} block causes makes the
music go to a MIDI file, so you can listen to the music you entered.  It
is great for checking the music.  Whenever you hear something weird, you
probably hear a typing error.

Syntactically, @code{\midi} is similar to @code{\paper @{ @}}, since it
also specifies an output method. You can specify the tempo using the
@code{\tempo} command, in this case the tempo of quarter notes is set to
72 beats per minute.
@separate
@example 

        \paper @{ linewidth = 10.0\cm @}
 
@end example 
We also want notation output.  The linewidth is short so the piece
will be set in two lines.

@node More movements 
@section More movements

[FIXME: merge here with, or move this to: Other ways to run LilyPond]

You probably ran @file{ly2dvi} on the last example, and ended up with a
viewable @file{.dvi} file.  However, between there are a few steps of
which LilyPond is only one. To enhance your understanding of what's
happening under the hood when you run @code{ly2dvi}, we explain what
programs are run.

@code{ly2dvi} is a program that calls a number of programs  in sequence.
The first thing it does, is running LilyPond on the input file. After
some calculations, a @file{.tex} is produced. The contents
of this file are very  low-level instructions.

For example,  the following file (@file{miniatures.ly}) 

@example
\version "1.3.124"
\header @{ title = "Two miniatures"  @}

#(set! point-and-click line-column-location)

\paper @{ linewidth = -1.0 @}

\score @{
    \notes @{ c'4 d'4 @}
    \header @{
        opus = "Opus 1."
        piece = "Up" @}
@}
\score @{
    \notes @{ d'4 c'4 @}
    \header @{
        opus = "Opus 2."
        piece = "Down" @}
@}
@end example

The titling in this manual was not generated by ly2dvi, so we can't
exactly show it would look, but the result should resemble this:

@center @strong{Two miniatures}
@flushright
Opus 1.
@end flushright
@flushleft
@var{Up}
@end flushleft
@lilypond
  \score {
    \notes { c'4 d'4 }
    \paper { linewidth = -1.0 }
  }
@end lilypond
@flushright
Opus 2.
@end flushright
@flushleft
@var{Down}
@end flushleft
@lilypond
  \score {
    \notes { d'4 c'4 }
    \paper { linewidth = -1.0 }
  }
@end lilypond

This file is produced by ly2dvi in a few stages, with the help of text
formatting tools. LilyPond produces two output files, @file{miniatures.tex}
and @file{miniatures-1.tex}.  They both look like this:

@example
        ...
  \placebox@{-5  \outputscale @}%
  @{  8.7229  \outputscale @}%
  @{\magfontWXGEomMMBo\char90 @}%
  
  \placebox@{-4  \outputscale @}%
  @{ 81.0647  \outputscale @}%
        ...
@end example

@file{ly2dvi} looks at what output LilyPond produces, and generates a
file called @file{ly2dvi.out.tex}. This file contains formatting
instructions for the title and page layout.  A fragment might look like

@example

        \def\lilypondopus@{Opus 1.@}
        \def\lilypondpiece@{Up@}
        \def\mustmakelilypondtitle@{@}
        \input miniatures.tex
        \def\lilypondtitle@{Two miniatures@}

@end example

@file{ly2dvi} runs it through LaTeX. LaTeX is a text-formatting system
built on top of @TeX{}. It's very popular in the academic world. If LaTeX
is successful, this will produce a @file{.dvi} file, containing both the
titling and the actual music.  @code{ly2dvi} completes its task by
deleting the two temporary files, leaving only @file{miniatures.dvi}.

Next, now we'll look at the example line by line to explain new things.

@separate
@example 
\version "1.3.124"
@end example 
Lilypond and its language are still under development, and occasionally,
details of the syntax are changed. This fragment indicates for which
version the input file was written. When you compile this file, the
version number will be checked, and you will get a warning when the file
is too old.

This version number is also used by the @code{convert-ly} program (See
@ref{convert-ly}), which uses it to update the file to the latest lily
version.

@separate
@example
  \header @{ title = "Two miniatures"  @}
@end example
This sets the titling information for the entire file.

@separate
@example
        #(set! point-and-click line-column-location)
@end example

This piece of Scheme code sets the Scheme variable
@code{point-and-click} to the value @var{line-column-location} (which
itself is a Scheme procedure).

Editing input files can be quite complicated if you're working with
large files: if you're digitizing existing music, you have to
synchronize the .ly file, the sheet music on your lap and the sheet
music on the screen.  The point-and-click mechanism makes it easy to
find the origin of an error in the .ly file: when you view the file with
Xdvi and click on a note, your editor will jump to the spot where that
note was entered.  For more information, see @ref{Point and click}.

@separate
@example
  \paper @{ 
@end example

The @code{\score} blocks that follow in the file don't have
@code{\paper} sections, so the settings of this block are substituted: A
paper block, at top-level, i.e. not in a @code{\score} block sets the
default page layout.

@separate
@example
  linewidth = -1.0 @}
@end example



The variable @code{linewidth} normally sets the length of the systems on
the page. However, a negative value has a special meaning. If
@code{linewidth} is less than 0, no line breaks are inserted into the
score, and the spacing is set to natural length: a short phrase takes up
little space, a longer phrase more space.

@separate
@example
  \score @{
    \notes @{ c'4 d'4 @}
@end example

In previous examples, notes were specified in relative octaves,
i.e. each note was put in the octave that would put it closest to its
predecessor. Besides relative, there is also absolute octave
specification, which you get when you don't specify @code{\relative}. In
this input mode, the central C is denoted by @code{c'}. Going down, you
get @code{c} @code{c,} @code{c,,} etc.  Going up, you get @code{c''}
@code{c'''} etc.

When you're copying music from existing sheet music, relative octaves
are probably the easiest to use: it's less typing work and errors are
easily spotted. However, if you write LilyPond input, either by hand
(ie. composing) or by computer, absolute octaves are probably less work.


@separate
@example
    \header @{
@end example

The @code{\header} is normally at the top of the file, where it sets
values for the rest of the file. If you want to typeset different pieces
from one file (for example, if there are multiple movements, or if
you're making an exercise book), you can put different @code{\score}
blocks into the input file. ly2dvi will assemble all LilyPond output
files into a big document. The contents of \header blocks specified
within each score, are used for the titling of each movement.
@separate
@example
        opus = "Opus 1."
        piece = "Up" @}
@end example
For example, the Opus number is put at the right, and the piece string
will be at the left.



@node A piano excerpt
@section A piano excerpt

Our fourth subject is a piece of piano music.  The fragment in the input
file is a piano reduction of the G major Sinfonia by Giovanni Battista
Sammartini.  It was composed around 1740.  It's in the source package
under  the name @file{sammartini.ly}.

@lilypond[verbatim]
\include "paper16.ly"

stemDown = \property Voice.Stem \override #'direction = #-1
stemUp = \property Voice.Stem \override #'direction = #1
stemBoth = \property Voice.Stem \revert #'direction  

viola = \notes \relative c' \context Voice = viola {
    <c4-\f-\arpeggio g' c>
    \stemDown g'8. b,16
    s1 s2. r4
    g
}

oboes = \notes \relative c'' \context Voice = oboe {
    \stemUp s4  g8. b,16 c8 r <e'8.^\p g> <f16 a>
    \grace <e8( g> <d4 )f> <c2 e>
    \times 2/3 { <d8 \< f> <e g> <f a> }
    <
        { \times 2/3 { a8 g c } \! c2 }
        \context Voice = oboeTwo {
            \stemDown
            \grace {
                \property Grace.Stem \override #'direction = #-1
                [f,16 g] }
            f8 e e2
        }
    >
    \stemBoth
    \grace <c,8( e> <)b8. d8.-\trill> <c16 e> | 
    [<d ( f> < )f8. a>] <)b,8 d> r [<d16( f> <f8. )a>] <b,8 d> r  |
    [<c16( e>  < )e8. g>] <c8 e,>
}

hoomPah = \repeat unfold 8 \notes
    \transpose c' { \stemUp c8 \stemBoth \stemDown c'8 \stemBoth }

bassvoices = \notes \relative c' {
    c4 g8. b,16
    \autochange Staff \hoomPah
    \translator Staff = down
    \stemDown [c8 c'8] r4
    <g d'> r4
    < {\stemUp r2 <e4 c'> <c8 g'> }
        \context Voice = reallyLow  {\stemDown g2 ~ | g4 c8 } >
}

\score {
    \context PianoStaff \notes <
        \context Staff = up < \time 2/2
            \viola
            \oboes
        >
        \context Staff = down < \time 2/2 \clef bass
            \bassvoices
        >
    >
    \midi { }
    \paper {
        indent = 0.0
        linewidth = 15.0 \cm }
}
@end lilypond

If this looks like incomprehensible gibberish to you, you are right.
This example has been doctored to have as many quirks as possible.

As you can see, this example features multiple voices on one staff.  To
make room for those voices, their notes have to be stemmed in opposite
directions.

Printed symbols are internally represented by so-called Graphical
Objects (more colloquially: Grobs).  These statements concern the
grob called `Stem'. Each grob is described by a bunch of settings. These
setting determine the fonts, offsets, sub-routines to be called on the
grob, etc.  The initial values of these settings are set in the Scheme
file @file{scm/grob-description.scm}.

@separate
@example
  stemDown = \property Voice.Stem \override #'direction = #-1
@end example

Set a proprerty for all Stem grobs in the current Voice:
@code{direction} is set to @code{-1}, which encodes down.  The setting
remains in effect until it is reverted.

@separate
@example
 \property Voice.Stem \revert #'direction  
@end example

Revert the to the previous setting.  The effect of precisely one
@code{\stemDown} or @code{\stemUp} is neutralised.


LilyPond includes the identifiers @code{\stemUp}, @code{\stemDown} along
with some other commonly used formatting instructions, but to explain how
it works, we wrote our own here.  Of course, you should use predefined
identifiers like these if possible: then you will be affected less by
the implementation changes we occasionally make.

@separate
@example 
viola = \notes \relative c'  \context Voice = viola @{ 
@end example 
In this example, you can see multiple parts on a staff.  Each part is
associated with one notation context.  This notation context handles
stems and dynamics (among others).  The name of this context is
@code{Voice}.  For each part we have to make sure that there is
precisely one @code{Voice} context, so we give it an unique name
(`@code{viola}').

@separate
@example 
<c4-\f-\arpeggio g' c>
@end example 
The delimiters @code{<} and @code{>} are shorthands for
@code{\simultaneous @{} and @code{@}}. The expression enclosed in
@code{<} and @code{>} is a chord.

@cindex dynamics
@cindex loudness
@cindex forte
@cindex arpeggio

@code{\f} places a forte symbol under the chord. The forte applies to
the whole chord, but the syntax requires that commands like forte and
arpeggio are attached to a note, so here we attach them to the first
note.

@code{\arpeggio} typesets an arpeggio sign (a wavy vertical line) before
the chord.

@separate
@example 
   \stemDown
@end example 


@separate
@example 
        g'8. b,16 
@end example 
Relative octaves work a little differently with chords.  The starting
point for the note following a chord is the first note of the chord.  So
the @code{g} gets an octave up quote: it is a fifth above the starting
note of the previous chord (the central C).

@separate
@example 
s1 s2. r4 
@end example 
@code{s} is a spacer rest.  It does not print anything, but it does have
the duration of a rest. It is useful for filling up voices that
temporarily don't play. In this case, the viola doesn't come until one
and a half measure later.

@separate
@example 
oboes = \notes \relative c'' \context Voice = oboe @{ 
@end example 
Now comes a part for two oboes.  They play homophonically, so we
print the notes as one voice that makes chords. Again, we insure that
these notes are indeed processed by precisely one context with
@code{\context}.
@separate
@example 
\stemUp s4  g8. b,16 c8 r <e'8.-\p g> <f16 a> 
@end example 
@code{\stemUp} is a reference to the @code{\property \override} command
defined above. 
@separate
@example 
\grace <e8 g> < d4 f> <c2 e> 
@end example
@cindex @code{\grace}
@cindex ornaments
@cindex grace notes

@code{\grace} introduces grace notes.  It takes one argument, in this
case a chord.

@ignore
The slur started on the @code{e} of the chord
will be attached to the next note.@footnote{LilyPond will squirm
about unended Slurs.  In this case, you can ignore the warning}.
@end ignore
@separate
@example 
\times 2/3 
@end example
@cindex tuplet
@cindex triplets
Tuplets are made with the @code{\times} keyword.  It takes two
arguments: a fraction and a piece of music.  The duration of the piece
of music is multiplied by the fraction.  Triplets make notes occupy 2/3
of their notated duration, so in this case the fraction is 2/3.
@separate
@example 
@{ <d8 \< f> <e g> <f a> @} 
@end example 
The piece of music to be `tripletted' is sequential music containing
three notes.  On the first chord, a crescendo is started with
@code{\<}. To be precise, the crescendo start is syntactically attached
to the preceding note, the @code{d}.

@cindex dynamics
@cindex crescendo
@cindex @code{\<}

@separate
@example 
< 
@end example 
At this point, the homophonic music splits into two rhythmically
different parts.  We can't use a sequence of chords to enter this, so
we make a `chord' of sequences to do it.  We start with the upper
voice, which continues with upward stems:
@separate
@example 
 @{ \times 2/3 @{ a8 g c @} \! c2 @} 
@end example

@cindex @code{\!}

The crescendo is ended at the half note by the escaped exclamation
mark @code{\!}.
@separate
@example 
\context Voice = oboeTwo @{
\stemDown 
@end example 
We can't share stems with the other voice, so we have to create a new
@code{Voice} context.  We give it the name @code{oboeTwo} to distinguish
it from the other context.  Stems go down in this voice.
@separate
@example 
\grace @{  
@end example
@cindex Grace context
When a grace section is processed, a @code{Grace} context is
created. This context acts like a miniature score of its own.  It has
its own time bookkeeping, and you can make notes, beams, slurs
etc. Here we fiddle with a property and make a beam.  The argument of
@code{\grace} is sequential music.

@separate
@example 
\property Grace.Stem \override #'direction = #-1
[f,16 g] @}
@end example 

Normally, grace notes are always stem up, but in this case, the upper
voice interferes. We set the stems down here.

As far as relative mode is concerned, the previous note is the
@code{c'''2} of the upper voice, so we have to go an octave down for
the @code{f}.
@separate
@example 

  f8 e e2
@} > 
@end example 
This ends the two-part section.
@separate
@example 
\stemBoth
\grace <c,8( e> <)b8. d8.-\trill> <c16 e> |  
@end example
@cindex trill
@cindex stemBoth

@code{\stemBoth} ends the forced stem directions. From here, stems are
positioned as if it were single part music.

The bass has a little hoom-pah melody to demonstrate parts switching
between staffs.  Since it is repetitive, we use repeats:
@separate
@example 
hoomPah  =  \repeat unfold 8
@end example
@cindex unfolded @code{\repeat}
The unfolded repeat prints the notes in its argument as if they were
written out in full eight times.
@separate
@example
\notes \transpose c' @{
@end example
@cindex transposing
@cindex relative mode and transposing

Transposing can be done with @code{\transpose}.  It takes two arguments
the first specifies what central C should be transposed to.  The second
is the to-be-transposed music.  As you can see, in this case, the
transposition has no effect, as central C stays at central C.

The purpose of this no-op is circumventing relative mode.  Relative mode
can not be used together with transposition, so @code{\relative} will
leave the contents of @code{\hoomPah} alone.  We can use it without
having to worry about getting the motive in a wrong octave.
@separate
@example 
bassvoices = \notes \relative c' @{
c4 g8. b,16
\autochange Staff \hoomPah 
@end example
@cindex staff switch, automatic
@cindex cross staff voice, automatic
@cindex @code{\autochange}

Voices can switch between staffs. The easiest way to get this, is to use
@code{\autochange}. This command looks at the pitch of each note, and if
necessary, will cross to the other staff. For this to work, the two
staffs must be called @code{"up"} and @code{"down"}.
@separate
@example
        \translator Staff = down
@end example
@cindex staff switch
@cindex cross staff voice
We want the remaining part of this melody on the lower staff, so we do a
manual staff switch here.


@separate
@example 
\context Voice = reallyLow  @{\stemDown g2 ~ | g4 c8 @} > 
@end example
@cindex tie
@cindex @code{~}
After skipping some lines, we see @code{~}.  This mark makes ties.  Note
that ties and slurs are different things.  A tie can only connect two
note heads of the same pitch, whereas a slur can connect many chords
with one curve.

@separate
@example 
\context PianoStaff 
@end example 
 A special context is needed to get cross staff beaming right.  This
context is called @code{PianoStaff}.
@separate
@example 
\context Staff = bottom < \time 2/2 \clef bass 
@end example 
The bottom staff must have a different clef.
@separate
@example 
indent = 0.0 
@end example 
To make some more room on the line, the first (in this case the only)
line is not indented.  The line still looks very cramped, but that is due
to the page layout of this document.


@ignore
[TODO:

* font-size, multi-stanza.

* Simple part combining in a Hymn
@end ignore


@node An orchestral score
@section An orchestral score

@menu
* The full score::              
* Extracting an individual part::  
@end menu


Our last two examples show a way to setup the music for an orchestral
score.  When typesetting a piece for several instruments, you'll want to
create a conductor's full score, alongside several individual parts.

LilyPond is well suited for this task.  We will declare the music for
each instrument individually, giving the music of each instrument its
own name.  These pieces of music are then combined in different
@code{\score} blocks to produce different combinations of the score.

This orchestral score example consists of three input files.  In the
first file, @file{os-music.ly}, we define the music for all instruments.
This file will be used both for producing the score and the separate
parts.

If you were to run lilypond on this file, no printable output would be
produced.

@example
% os-music.ly
\header @{
  title = "Zo, goed lieverd?"
  subtitle = "How's, this babe?"
  composer = "JCN"
  opus = "1"
  piece = "Laid back"
@}
global = @{
  \time 2/4
  \skip 2*4 \bar "|."
@}
Key = \notes \key as \major
flautoI = \notes\relative c'' @{
  f8 g f g f g f g
  bes as bes as bes as bes as
@}
flautoII = \notes\relative c'' @{
  as8 bes as bes R1 d4 ~ d
@}
tromboI = \notes\relative c'' @{
  c4. c8 c8 c4. es4 r as, r
@}
tromboII = \notes\relative c'' @{
  as4. as8 as8 as4. R1*1/2 as4 es'
@}
timpani = \notes\relative c, @{
  \times 2/3 @{ f4 f f @}
  \times 4/5 @{ as8 as as as as @}
  R1
@}
corno = \notes\relative c' @{
   bes4 d f, bes d f, bes d
@}
@end example

We will not go through the input line by line, but only indicate and
explain the new elements.


@separate
@example
global = @{
  \time 2/4
  \skip 2*4 \bar "|.";
@}
@end example

Declare setting to be used globally.  The @code{\skip} command produces
no output, but moves forward in time: in this case, the duration of a
half note (@code{2}), and that four times (@code{*4}).  This brings us
to the end of the piece, and we can set the end bar.

@separate
@example
Key = \notes \key as \major
@end example
Declare the key signature of the piece and assign it to the identifier
@var{Key}.  Lateron, we'll use @code{\Key} for all staffs except those
for transposing instruments.

@node The full score
@subsection The full score


The second file, @file{os-score.ly} reads the definitions of the first
(@file{os-music.ly}), and defines the @code{\score} block for the full
conductor's score.


@example
% os-score.ly
\include "os-music.ly"
\include "paper13.ly"

#(set! point-and-click line-column-location)
#(define text-flat '((font-relative-size . -2)
         (music "accidentals--1")))

\score @{
  <
    \global
    \property Score.BarNumber \override #'padding = #3
    \context StaffGroup = woodwind <
      \context Staff = flauti <
        \property Staff.midiInstrument = #"flute"
        \property Staff.instrument = "2 Flauti"
        \property Staff.instr = "Fl."
        \Key
        \context Voice=one @{ \voiceOne \flautoI @}
        \context Voice=two @{ \voiceTwo \flautoII @}
      >
    >
    \context StaffGroup = timpani <
      \context Staff = timpani <
        \property Staff.midiInstrument = #"timpani"
        \property Staff.instrument = #'(lines "Timpani" "(C-G)")
        \property Staff.instr = #"Timp."
        \clef bass
        \Key
        \timpani
      >
    >
    \context StaffGroup = brass <
      \context Staff = trombe <
  	\property Staff.midiInstrument = #"trumpet"
        \property Staff.instrument = #`(lines "2 Trombe" "(C)")
        \property Staff.instr = #`(lines "Tbe." "(C)")
        \Key
        \context Voice=one \partcombine Voice
          \context Thread=one \tromboI
          \context Thread=two \tromboII
      >
      \context Staff = corni <
        \property Staff.midiInstrument = #"french horn"
        \property Staff.instrument = #`(lines "Corno"
          (columns "(E" ,text-flat ")"))
        \property Staff.instr = #`(lines "Cor."
          (columns "(E" ,text-flat ")"))
        \property Staff.transposing = #3
        \notes \key bes \major
        \context Voice=one \corno
      >
    >
  >
  \paper @{
    indent = 15 * \staffspace
    linewidth = 60 * \staffspace
    textheight = 90 * \staffspace
    \translator@{
      \VoiceContext
      \consists "Multi_measure_rest_engraver"
    @}
    \translator@{
      \HaraKiriStaffContext
      \remove "Multi_measure_rest_engraver"
    @}
  @}
  \midi @{
    \tempo 4 = 75
  @}
@}
@end example

@center @strong{Zo, goed lieverd?}
@sp 1
@center How's, this babe?
@flushright
Opus 1.
@end flushright
@flushleft
@sc{Laid back}
@end flushleft

@lilypondfile{os-score.ly}

@separate
@example
\include "os-music.ly"
@end example
First, we need to include the music definitions we made in
@file{os-music.ly}.

@separate
@example
#(set! point-and-click line-column-location)
@end example
In a large orchestral score like this you're bound to make some small
mistakes, so we enable point and click (See @ref{Point and click})
editing.

@separate
@example
#(define text-flat '((font-relative-size . -2)
         (music "accidentals--1")))
@end example

When naming the tuning of the french horn, we'll need a piece of text
with a flat sign.  LilyPond has a mechanism for font selection and
kerning called Scheme markup text (See @ref{Text markup}).  The flat
sign is taken from the music font, and its name is @code{accidentals--1}
(The sharp sign is called @code{accidentals-+1}).  The default font is
too big for text, so we select a relative size of @code{-2}.

@separate
@example
  <
    \global
@end example
Of course, all staffs are simultaneous and use the same global settings.

@separate
@example
    \property Score.BarNumber \override #'padding = #3
@end example
LilyPond prints bar numbers at the start of each line, but
unfortunately, they end up a bit too close to the staff in this example.
A bar number internally is a Grob called @var{BarNumber}.  BarNumber
Grobs can be manipulated through their @var{side-position-interface}.  One
of the properties of a @var{side-position-interface} that can be tweaked
is the @var{padding}: the amount of extra space that is put between this
Grob and other Grobs.  We set the padding to three staff spaces.

You can find all this kind of information in LilyPond's automatically
generated documentation in
@ifnottex
@ref{ (lilypond-internals)lilypond-internals, LilyPond Internals}.
@end ifnottex
@iftex
the online documentation.
@end iftex

@separate
@example
    \context StaffGroup = woodwind <
      \context Staff = flauti <
@end example
A new notation context: the StaffGroup.  StaffGroup can hold one or more
Staffs, and will print a big bracket at the left of the score.  Start a
new staff group for the woodwind section (just the flutes in this case).
Immediately after that, we start the staff for the two flutes, that also
play simultaneously.

@separate
@example
        \property Staff.midiInstrument = #"flute"
@end example
Specify the instrument for MIDI output (see @ref{MIDI instrument
names}).

@separate
@example
        \property Staff.instrument = "2 Flauti"
        \property Staff.instr = "Fl."
@end example
And define the instrument names to be printed in the margin,
@code{instrument} for the first line of the score, @code{instr} for the
rest of the score.

@separate
@example
        \Key
@end example
The flutes play in the default key.

@separate
@example
        \context Voice=one @{ \voiceOne \flautoI @}
        \context Voice=two @{ \voiceTwo \flautoII @}
@end example
Last come the actual flute parts.  Remember that we're still in
simultaneous mode.  We name both voices differently, so that LilyPond
will actually create two Voice contexts.  The flute parts are simple, so
we specify manually which voice is which: @code{\voiceOne} forces the
direction of stems, beams, slurs and ties up, @code{\voiceTwo} sets
directions down.

@separate
@example
      >
    >
@end example
Close the flutes staff and woodwind staff group.

@separate
@example
        \property Staff.instrument = #'(lines "Timpani" "(C-G)")
@end example
The timpani staff only shows a new piece of scheme markup, it sets two
lines of text.

@separate
@example
        \context Voice=one \partcombine Voice
          \context Thread=one \tromboI
          \context Thread=two \tromboII
@end example
You have seen the notation contexts Staff and Voice, but here's a new
one: Thread.  One or more Threads can be part of a Voice.  The Thread
takes care of note heads and rests, the Voice combine note heads onto a
stem.

For the trumpets we use the automatic part combiner (see @ref{Automatic
part combining}) to combine the two simultaneous trumpet parts onto the
trumpet staff.  Each trumpet gets its own Thread context, which must be
named @code{one} and @code{two}).  The part combiner makes these two
threads share a Voice when they're similar, and splits the threads up
when they're different.

@separate
@example
      	\property Staff.instrument = #`(lines "Corno"
          (columns "(E" ,text-flat ")"))
@end example
The french horn has the most complex scheme markup name, made up of two
lines of text.  The second line has two elements (columns), the @code{E}
and the flat sign @code{text-flat} that we defined before.

@separate
@example
        \property Staff.transposing = #3
@end example
The french horn is to be tuned in E-flat, so we tell the MIDI backend to
transpose this staff by three steps.

Note how we can choose different tuning for entering, printing and
playing, using @code{\transpose} and the MIDI Staff proprerty
@var{transposing}.

@separate
@example
        \notes \key bes \major
@end example
Therefore, it has a different key.

@separate
@example
    indent = 15 * \staffspace
    linewidth = 60 * \staffspace
@end example
We specify a big indent for the first line and a small linewidth for this
tutorial.

@separate

Usually, LilyPond's predefined setup of notation contexts (Thread,
Voice, Staff, Staffgroup, Score) is just fine.  But in this case, we
want a different type of Staff context.

In orchestral scores, it often happens that one instrument has only
rests during one line of the score.  The @code{HaraKiriStaffContext} can
be used as a regular @code{StaffContext} drop-in and will take care of
the automatic removing of empty staffs.

@node Extracting an individual part
@subsection Extracting an individual part

The third file, @file{os-flute-2.ly} also reads the definitions of the
first (@file{os-music.ly}), and defines the @code{\score} block for the
second flute part.

@example
\include "os-music.ly"
\include "paper16.ly"

\score @{
  \context Staff <
    \property Score.skipBars = ##t
    \property Staff.midiInstrument = #"flute"
    \global
    \Key
    \flautoII
  >
  \header @{
    instrument = "Flauto II"
  @}
  \paper @{
    linewidth = 80 * \staffspace
    textheight = 200 * \staffspace
  @}
  \midi @{
    \tempo 4 = 75
  @}
@}
@end example

@center @strong{Zo, goed lieverd?}
@sp 1
@center How's, this babe?
@center @emph{Flauto II}
@flushright
Opus 1.
@end flushright
@flushleft
@sc{Laid back}
@end flushleft
@lilypondfile{os-flute-2.ly}


Because we separated the music definitions from the @code{\score}
instantiations, we can easily define a second score from the music of
the second flute.  This then is the part for the second flute player.
Of course, we make separate parts for all individual instruments.

@separate
@example
    \flautoII
@end example
In this individual part the second flute has a whole staff for itself,
so we don't want to force stem or tie directions.

@separate
@example
  \header @{
    instrument = "Flauto II"
  @}
@end example
The @code{\header} definitions were also read from @file{os-music.ly},
but we need to set the instrument for this particular score.

@separate
@example
    \property Score.skipBars = ##t
@end example
In the conductor's full score, all bars with rests are printed, but for
the individual parts, we want to contract pieces of consecutive empty
bars.  LilyPond will do this if Score's @var{skipBars} property to
true. 


@node Other ways to run LilyPond
@section Other ways to run LilyPond

Until now, you have been using @file{ly2dvi} to invoke LilyPond.
There are three other routes.  Firstly, there is a script called
@code{lilypond-book}, that allows you to freely mix LilyPond input with
Texinfo or LaTeX input. For example, this manual was written using
@code{lilypond-book}. It is discussed in @ref{lilypond-book}.


Secondly, you can generate PostScript directly. This is useful if you
can not or do not want to run @TeX{} on your system.  To obtain direct
PostScript output, invoke LilyPond as follows:
@cindex PostScript output
@example
lilypond -f ps test.ly
@end example
You have to set some environment variables to view or print this
output. More information can be found in @ref{Invoking
LilyPond}.


Thirdly, if you want to do special things with your output, you can run
invoke lilypond directly:
@example
lilypond test.ly
@end example
to produce plain @TeX{} output.  Note that La@TeX{} will not work on the
resulting @file{test.tex}.  You must run plain @TeX{} on it.

@cindex @TeX{}





@node Integrating text and music
@section Integrating text and music

Sometimes, you might want to use music examples in a text that you are
writing. For example, if you are writing a musicological treatise, a
songbook, or (like us) the LilyPond manual.  You can make such texts by
hand, simply by importing a PostScript figure into your wordprocessor.
However, there is a also an automated procedure:

If you use La@TeX{} or texinfo, you can mix text and lilypond code. A
script called @code{lilypond-book} will extract the music fragments, run
lilypond on them, and put back the resulting notation.  lilypond-book is
described fully in @ref{lilypond-book}, but here we show a small
example. Since the example also contains explanatory text, we won't
comment on the contents.

@example
\documentclass[a4paper]@{article@}
\begin@{document@}

In a lilypond-book document, you can freely mix music and text. For
example:
\begin@{lilypond@}
  \score @{ \notes \relative c' @{
     c2 g'2 \times 2/3 @{ f8 e d @} c'2 g4
  @} @}
\end@{lilypond@}
Notice that the music line length matches the margin settings of the
document.

If you have no \verb+\score+ block in the fragment,
\texttt@{lilypond-book@} will supply one:

\begin@{lilypond@}
  c'4
\end@{lilypond@}

In the example you see here, a number of things happened: a
\verb+\score+ block was added, and the line width was set to natural
length. You can specify many more options using  \LaTeX style options
in brackets:

\begin[verbatim,11pt,singleline,
  fragment,relative,intertext="hi there!"]@{lilypond@}
  c'4 f bes es
\end@{lilypond@}

\texttt@{verbatim@} also shows the lilypond code, \texttt@{11pt@} selects
the default music size, \texttt@{fragment@} adds a score block,
\texttt@{relative@} uses relative mode for the fragment, and
\texttt@{intertext@} specifies what to print between the
\texttt@{verbatim@} code and the music.

If you include large examples into the text, it may be more convenient
to put the example in a separate file:

\lilypondfile[printfilename]@{sammartini.ly@}

The \texttt@{printfilename@} option adds the file name to the output.

\end@{document@}
@end example

Under Unix, you can view the results as follows.
@example
$ cd input/tutorial
$ lilypond-book --outdir=out/ lilbook.tex
lilypond-book (GNU LilyPond) 1.3.146
Reading `/home/hanwen/usr/src/lilypond-1.3.146/input/tutorial/lilbook.tex'
Reading
`/home/hanwen/usr/src/lilypond-1.3.146/input/tutorial/sammartini.ly'
@var{lots of stuff deleted}
Writing `out/lilbook.latex'
$ cd out
$ latex lilbook.latex
@var{lots of stuff deleted}
$ xdvi lilbook 
@end example

Notice the @code{outdir} option to lilypond-book. Running lilypond-book
and running latex creates a lot of temporary files, and you wouldn't
those to clutter up your working directory. Hence, we have them created
in a separate subdirectory.

The result more or less looks like this: 

@separate

In a lilypond-book document, you can freely mix music and text. For
example:
@lilypond
  \score { \notes \relative c' {
     c2 g'2 \times 2/3 { f8 e d } c'2 g4
  } }
@end lilypond
Notice that the music line length matches the margin settings of the
document.

If you have no @code{\score} block in the fragment,
@code{lilypond-book} will supply one:

@lilypond
  c'4
@end lilypond

In the example you see here, a number of things happened: a
@code{\score} block was added, and the line width was set to natural
length. You can specify many more options using  La@TeX{} style options
in brackets:

@lilypond[verbatim,11pt,singleline,
  fragment,relative,intertext="hi there!"]
  c'4 f bes es
@end lilypond

@code{verbatim} also shows the lilypond code, @code{11pt} selects
the default music size, @code{fragment} adds a score block,
@code{relative} uses relative mode for the fragment, and
@code{intertext} specifies what to print between the
@code{verbatim} code and the music.

If you include large examples into the text, it may be more convenient
to put the example in a separate file:

@lilypondfile[printfilename]{sammartini.ly}

The @code{printfilename} option adds the file name to the output.
@node  end of tutorial
@section The end        
         
That's all folks.  From here, you can either try fiddling with input
files, or you can read the reference manual.  You can find more example
files in @file{input} and @file{input/test}.  You can also look at some
real music.  Have a look at the @uref{Mutopia project,
http://www.mutopiaproject.org}.



@ignore

[TODO

this should be on mutopia website.

]


@c waar deze info?  is uiteindelijk wel handig, schat ik.
[TODO: cut blabla]

If you have a big music project, or just a lot of LilyPond input files,
all generated output from LilyPond, @TeX{} and metafont will clutter
your working directory.  LilyPond comes with a one-size-fits-all
pre-cooked makefile that helps you manage producing output.  It will
produce all output in the directory @file{out} , generate and track
dependencies. Also, it helps in preparing your submission to @ref{Mutopia
project}.

@file{make/ly.make}
@example
mkdir my-project
cd my-project
cp /usr/share/lilypond/make/ly.make GNUmakefile
cp /usr/share/doc/lilypond/examples/input/tutorial/minuet.ly .
make minuet
[..]
Generated out/minuet.ps for target minuet.
@end example

Type @samp{make help} to see possible targets.

[TODO]
@file{/usr/share/lilypond/doc/lilypond/examples/input/mutopia-header.ly}





[TODO: rewrite completely.]

@menu
* Songs with additional verses::  
@end menu

@end ignore

