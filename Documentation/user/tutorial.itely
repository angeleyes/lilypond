@c -*-texinfo-*-

@node Tutorial
@chapter Tutorial

@menu
* Introduction::                   Introduction
* The first tune::                 The first tune
* Lyrics and chords::              Lyrics and chords
* More movements::                 More than one movement in a file
* Piano music::                    Piano music
* end of tutorial::                The end
@end menu

@node Introduction
@section Introduction

  
LilyPond prints music from a specification that you, the user, supply.
You have to give that specification using a @emph{language}.  This
document is a gentle introduction to that language, which is called
Lilypond, an acronym of Music Definition Language.

This tutorial will demonstrate how to use Lilypond by presenting
examples of input along with resulting output.  We will use English
terms for notation.  In case you are not familiar with those, you may
consult the glossary that is distributed with LilyPond.

The examples discussed are included in the distribution, in the
subdirectory @file{input/tutorial/}.  It is recommended that you
experiment with writing Lilypond input yourself, to get a feel for
how LilyPond behaves.

@node The first tune
@section The first tune


To demonstrate what LilyPond input looks like, we start off with a
full fledged, yet simple example. It is a convoluted version
of the famous menuet in J. S. Bach's @emph{Klavierbuechlein}.

@lilypond[verbatim]
% lines preceded by a percent are comments which
% are ignored by Lilypond.
\include "paper16.ly"
\score {
    \notes                        
    \relative c'' \sequential{                
            \time 3/4;                
            \key g \major;

        \repeat "volta" 2 {
            d4 g,8 a b c d4 g, g |
            e'4 c8 d e fis g4 g, g |
            c4 d8()c b a( )b4 c8 b a g |
            a4 [b8 a] [g fis] g2.  |
        }

        b'4 g8 a b g
        a4 d,8 e fis d |
        g4 e8 fis g d cis4 b8 cis a4 |
        a8-. b-. cis-. d-. e-. fis-.
        g4 fis e |
        fis a,  r8 cis8
        d2.-\fermata
        \bar "|.";
    }
    \paper {
       % standard settings are too wide for a book
       linewidth = 14.0 \cm;
   }
}
@end lilypond

Enter it (or copy it, the filename is @file{menuet.ly}), compile it
with LilyPond and view the output.  Details of this procedure may vary
from system to system.  To create the output, one would issue the
command `@code{ly2dvi menuet}'.  @file{ly2dvi} is a program that does
the job of running LilyPond and @TeX{}, handling of titles and
adjusting of page margins.

If all goes well, the file @file{menuet.dvi} will be created.
To view this output, issue the command `@code{xdvi menuet}'.

Now that we are familiar with the procedure of producing output, we
will analyse the input, line by line.
@example
	% lines preceded by a percent are comments which
	% are ignored by Lilypond.
@end example 
The percent sign, `@code{%}', introduces a line comment.  If you want to
make larger comments, you can use block comments. These are delimited
by `@code{%@{}' and `@code{%@}}'
@example 

        \input "paper16.ly"
 
@end example 
By default, LilyPond will use definitions for a 20
point@footnote{A point is the standard measure of length for
printing.  One point is 1/72.27 inch.} high staff.  We want smaller
output (16 point staff height), so we must import the settings for
that size, which is done.
@example 

        \score @{
 
@end example 
  A lilypond file combines music with directions for outputting that
music.  The music is combined with the output directions by putting
them into a @code{\score} block.
@example 

        \notes                
 
@end example 
 This makes LilyPond ready for accepting notes.
@example 

        \relative c''
 
@end example 
 As we will see, pitches are combinations of octave, note name and
chromatic alteration.  In this scheme, the octave is indicated by
using raised quotes (`@code{'}') and ``lowered'' quotes (commas:
`@code{,}').  The central C is denoted by @code{c'}.  The C one octave
higher is @code{c''}.  One and two octaves below the central C is
denoted by @code{c} and @code{c,} respectively.

For pitches in a long piece you might have to type many quotes.  To
remedy this, LilyPond has a ``relative'' octave entry mode.  In this
mode, octaves of notes without quotes are chosen such that a note is
as close as possible (graphically, on the staff) to the the preceding
note.  If you add a high-quote an extra octave is added.  The lowered
quote (a comma) will subtract an extra octave.  Because the first note
has no predecessor, you have to give the (absolute) pitch of the note
to start with.
@example 

        \sequential @{
 
@end example 
  What follows is sequential music, i.e.,
notes that are to be played and printed after each other.
@example 

        \time 3/4;
 
@end example 
  This command changes the time signature of the current piece: a 3/4
sign is printed.  This command is also used to generate bar lines in
the right spots.
@example 

        \key g \major;
 
@end example 
  This command changes the current key to G-major.  Although this
command comes after the @code{\time} command, in the output, the key
signature comes before the time signature: LilyPond knows about music
typesetting conventions.
@example 

        \repeat "volta" 2
 
@end example 
  This command tells LilyPond that the following piece of music must
be played twice; @code{"volta"} means that volta brackets should be used
for alternatives---if there were any.
@example 

        @{
 
@end example 
The subject of the repeat is again sequential music.  Since
@code{\sequential} is such a common construct, a shorthand is provided:
just leave off @code{\sequential}, and the result is the same.
@example 

        d4
 
@end example 
 This is a note with pitch @code{d} (determined up to octaves).  The
relative music was started with a @code{c''}, so the real pitch of this
note is @code{d''}.  The @code{4} designates the duration of the note
(it is a quarter note).
@example 

        a b
 
@end example 
These are notes with pitch @code{a} and @code{b}.  Because their
duration is the same as the @code{g}, there is no need to enter the
duration (You may enter it anyway, e.g. @code{a4 b4})
@example 

        d4 g, g |
 
@end example 
 Three more notes.  The `@code{|}' character is a `bar check'.  When
processing the music, LilyPond will verify that bar checks are found at
the start of a measure.  This can help you track down errors.

 So far, no notes were chromatically altered.  Here is the first one
that is: @code{fis}. Lilypond by default uses Dutch note names, and
``Fis'' is the Dutch note name for ``F sharp''.  However, there is no
sharp sign in the output. The program keeps track of key signatures,
and will only print accidentals if they are needed.
@example 

        c8 d e fis
 
@end example 
LilyPond guesses were beams can be added to eighth and shorter notes.
In this case, a beam over 4 eighths is added.
@example 

        c4 d8( )c b a( )b4 c8 b a g |
 
@end example 
  The next line shows how to make a slur:
the beginning and ending note of the slur is marked with an opening and
closing parenthesis respectively.  In the line shown above, this is
done for two slurs.  Slur markers (parentheses) are put between
the notes.
@example 

        a4 [b8 a] [g fis] 
 
@end example 
Automatic beaming can be overridden by inserting beam marks
(brackets).  Brackets are put around the notes you want beamed.
@example 

        g2.  |
 
@end example 
A duration with augmentation dot  is notated
with the duration number followed by a period.
@example 

        @}
 
@end example 
  This ends the sequential music to be repeated.  LilyPond will typeset
a repeat bar.
@example 

        cis'4 b8 cis a4 |
 
@end example 
 This line shows that Lily will print an accidental if that is
needed: the first C sharp of the bar will be printed with an accidental,
the second one without.
@example 

        a8-. b-. cis-. d-. e-. fis-.
 
@end example 
You can enter articulation signs either in a verbose form using a
shorthand.  Here we demonstrate the shorthand: it is formed by a dash
and the character for the articulation to use, e.g. `@code{-.}' for
staccato as shown above.
@example 

        fis a, r8 cis8
 
@end example 
 
Rests are denoted by the special notename `@code{r}'.  You can also enter
an invisible rest by using the special notename `@code{s}'.
@example 

        d2.-\fermata
 
@end example 
 All articulations have a verbose form, like @code{\fermata}.  The
command `@code{\fermata}' is not part of the core of the language (most
of the other discussed elements are), but it is a shorthand for a more
complicated description of a fermata.  @code{\fermata} names that
description and is therefore called an @emph{identifier}.
@example 

        @}
 
@end example 
 
Here the music ends.
@example 

        \paper @{
                linewidth = 14.0\cm;
        @}
 
@end example 
This specifies a conversion from music to notation output.  Most of
the details of this conversions (font sizes, dimensions, etc.) have
been taken care of, but  to fit the output  in this document, it has
to be smaller.  We do this by setting the line width to 14 centimeters
(approximately 6 inches).
@example 

        @}
 
@end example 
The last brace ends the @code{\score} block.

There are two things to note here. The format contains musical
concepts like pitches and durations, instead of symbols and positions:
the input format tries to capture the meaning of @emph{music}, and not
notation.  Second, the format tries to be @emph{context-free}:
a note will sound the same regardless of the current time signature,
the key, etc.

The purpose of LilyPond is explained informally by the term `music
typesetter'.  This is not a fully correct name: not only does the
program print musical symbols, it also makes esthetic decisions.  All
symbols and their placement is @emph{generated} from a high-level musical
description.  In other words,  LilyPond would be best
described by `music compiler' or `music to notation compiler'.




@node Lyrics and chords
@section Lyrics and chords

In this section we show how to typeset a song of unknown
origin.@footnote{The author would welcome information about the origin
of this song.}.

@example 
\header @{
        title = "The river is flowing";
        composer = "Traditional (?)";
@}
\include "paper16.ly"
melody = \notes \relative c' @{
        \partial 8;
	\key c \minor;
        g8 |
        c4 c8 d [es () d] c4 | f4 f8 g [es() d] c g |
        c4 c8 d [es () d] c4 | d4 es8 d c4.
        \bar "|.";
@}

text = \lyrics @{
        The ri -- ver is flo- __ wing, flo -- wing and gro -- wing, the
        ri -- ver is flo -- wing down to the sea.
@}

accompaniment =\chords @{
        r8
        c2:3- f:3-.7 d:min es4 c8:min r8
        c2:min f:min7 g:7^3.5 c:min @}

\score @{
        \simultaneous @{
%         \accompaniment
          \context ChordNames \accompaniment

          \addlyrics
            \context Staff = mel @{        
              \property Staff.noAutoBeaming = ##t
              \property Staff.automaticMelismata = ##t
              \melody 
            @}
            \context Lyrics \text
        @}
        \midi  @{ \tempo 4=72;@}
        \paper @{ linewidth = 10.0\cm; @}
@} 
@end example 


The result would look this@footnote{The titling and font size shown
may differ, since the titling in this document is not generated by
@file{ly2dvi}.}.

@center @strong{The river is flowing}
@center Traditional 

@lilypond[center]
\header {
        title = "The river is flowing";
        composer = "Traditional (?)";
}
\include "paper16.ly"
melody = \notes \relative c' {
        \partial 8;
	\key c \minor;
        g8 |
        c4 c8 d [es () d] c4 | f4 f8 g [es() d] c g |
        c4 c8 d [es () d] c4 | d4 es8 d c4.
        \bar "|.";
}

text = \lyrics {
        The ri -- ver is flo- __ wing, flo -- wing and gro -- wing, the
        ri -- ver is flo -- wing down to the sea.
}

accompaniment =\chords {
        r8
        c2:3- f:3-.7 d:min es4 c8:min r8
        c2:min f:min7 g:7^3.5 c:min }

\score {
        \simultaneous {
%         \accompaniment
          \context ChordNames \accompaniment

          \addlyrics
            \context Staff = mel {
              \property Staff.noAutoBeaming = ##t
              \property Staff.automaticMelismata = ##t
              \melody 
            }
            \context Lyrics \text
        }
        \midi  { \tempo 4=72;}
        \paper { linewidth = 10.0\cm; }
}
@end lilypond

Again, we will dissect the file line by line.
@example 

        \header @{
 
@end example 
Information about the music you are about to typeset goes into a
@code{\header} block.  The information in this block is not used by
LilyPond, but it is included in the output.  @file{ly2dvi} uses this
information to print titles above the music.
@example 

        title = "The river is flowing";
        composer = "Traditional (?)"; 
@end example 
the @code{\header} block contains assignments.  An assignment starts
with a string.  (which is unquoted, in this case). Then comes the
equal sign `@code{=}'.  After the equal sign comes the expression you
want to store.  In this case, you want to put in strings.  The
information has to be quoted here, because it contains spaces. Each
assignment is finished with a semicolon.
@example 

        \include "paper16.ly"
 
@end example 
Smaller size for inclusion in a book.
@example 

        melody = \notes \relative c' @{
 
@end example 
The structure of the file will be the same as the previous one, a
@code{\score} block with music in it.  To keep things readable, we will
give names to the different parts of music, and use the names to
construct the music within the score block.

@example 
        \partial 8;
@end example 

The piece starts with an anacrusis of one eighth.
@example
	\key c \minor;
@end example
The key is C minor: we have three flats.

@example 

        c4 c8 d [es () d] c4 | f4 f8 g [es() d] c g |
        c4 c8 d [es () d] c4 | d4 es8 d c4.
        \bar "|.";
 
@end example 

We use explicit beaming.  Since this is a song,  we will turn automatic
beams off, and use explicit beaming where needed.
@example 

        @}
 
@end example 
This ends the definition of @code{melody}.  Note that there are no
semicolons after assignments at top level.
@example 

        text = \lyrics @{
 
@end example 
Another identifier assignment.  This one is for the lyrics. 
Lyrics are formed by syllables that have duration, and not by
notes. To make LilyPond parse words as syllables,  switch it  into
lyrics mode with @code{\lyrics}.  Again, the brace after @code{\lyrics}
is a shorthand for @code{\sequential @{}.
@example 

  The4 ri -- ver is flo- __ wing,  flo -- wing and gro -- wing, the
  ri- ver is flo- __ wing down to the sea.
@}
 
@end example 
The syllables  themselves are  separated by spaces.  You can get syllable
extenders by entering `@code{__}', and centered hyphens with
`@code{-}@code{-}'.  We enter the syllables as if they are all quarter notes
in length (hence the @code{4}), and use a feature to align the
syllables to the music (which obviously isn't all quarter notes.)
@example 

        accompaniment =\chords @{
 
@end example 
We'll put chords over the music.  There is a special mode (analogous
to @code{\lyrics} and @code{\notes} mode) where you can give the names
of the chords you want, instead of the notes comprising the chord.
@example 

        r8
 
@end example 
There is no accompaniment during the anacrusis.
@example 

        c2:3- f:3-.7
 
@end example 
A chord is started by  the tonic of the chord. The
first one lasts a half note.  An unadorned note creates a major
triad, while a minor triad is wanted.  @code{3-} modifies the third to
be small. @code{7} modifies (adds) a seventh, which is small by default
to create the @code{f a c es} chord.  Multiple modifiers must be
separated by a dot.
@example 

        d:min es4 c8:min r8
 
@end example 
Some modifiers have predefined names, eg. @code{min} is  the same as
@code{3-}, so @code{d-min} is a minor @code{d} chord.
@example 

        c2:min f:min7 g:7^3.5 c:min @}
 
@end example 
A named modifier @code{min} and a normal modifier @code{7} do not have
to be separated by a dot.  Tones from a chord are removed with chord
subtractions.  Subtractions are started with a caret, and they are
also separated by dots.  In this example, @code{g:7^3.5} produces a
minor seventh.  The brace ends the sequential music.
@example 

        \score @{
                \simultaneous @{
 
@end example 
We assemble the music in the @code{\score} block.  Melody, lyrics and
accompaniment have to sound at the same time, so they should be
@code{\simultaneous}.
@example 

        %\accompaniment
 
@end example 
Chord mode generates notes grouped in @code{\simultaneous} music.  If
you remove the comment sign, you can see the chords in normal
notation: they will be printed as note heads on a separate
staff.
@example 

        \context ChordNames \accompaniment
 
@end example 
Normally, the notes that you enter are transformed into note heads.
The note heads alone make no sense, they need surrounding information:
a key signature, a clef, staff lines, etc.  They need @emph{context}.  In
LilyPond, these symbols are created by objects called `interpretation
contexts'.  Interpretation contexts only exist during a run of
LilyPond.  Interpretation contexts that are for printing music (as
opposed to playing music) are called `notation contexts'.

By default, LilyPond will create a Staff context for you.  If you
removed the @code{%} sign in the previous line, you would see that
mechanism in action.

We don't want default contexts here, because we want chord names, not
note heads.  An interpretation context can also created upon explicit
request. The keyword for such a request is @code{\context}.  It takes
two arguments.  The first is the name of an interpretation context.
The name is a string, it can be quoted with double quotes).  The
second argument is the music that should be interpreted in this
context.  For the previous line, we could have written @code{\context
Staff \accompaniment}, and get the same effect.
@example 

        \addlyrics
 
@end example 
The lyrics need to be aligned with the melody.  This is done by
combining both with @code{\addlyrics}.  @code{\addlyrics} takes two
pieces of music (usually a melody and lyrics, in that order) and
aligns the syllables of the second piece under the notes of the
first piece.  If you would reverse the order, the notes would be
aligned on the lyrics, which is not very useful. (Besides, it looks
silly.)
@example 

        \context Staff = mel @{
 
@end example 
This is the argument of @code{\addlyrics}.  We instantiate a
@code{Staff} context explicitly: should you chose to remove the comment
before the ``note heads'' version of the accompaniment, the
accompaniment will be on a nameless staff.  The melody has to be on a
different staff as the accompaniment.  This is accomplished by giving
the melody staff a different name.
@example 

        \property Staff.noAutoBeaming = ##t
 
@end example 
An interpretation context has variables that tune its behaviour.  One
of the variables is @code{noAutoBeaming}.  If set and non-zero (i.e.,
true) LilyPond will not try to put automatic beaming on the current
staff.
@example 

        \property Staff.automaticMelismata = ##t
 
@end example 
Similarly, we  don't want to print a  syllable when there is
a slur. This sets up the Staff context to signal slurs while
@code{\addlyrics} is processed.
@example 

          \melody
        @}
 
@end example 
Finally, we put the melody on the current staff.  Note that the
@code{\property} directives and @code{\melody} are grouped in sequential
music,  so the property settings are done before the melody is
processed.
@example 

        \context Lyrics \text
 
@end example 
The second argument of @code{\addlyrics} is the text. The text also
should not land on a Staff, but on a interpretation context for
syllables, extenders, hyphens etc.  This context is called
Lyrics.
@example 

        @}
 
@end example 
This ends @code{\simultaneous}.
@example 

        \midi  @{ \tempo 4=72;@}
 
@end example 
This makes the music go to a MIDI file.  MIDI is great for
checking music you enter.  You listen to the MIDI file: if you hear
something unexpected, it's probably a typing error.  @code{\midi} is an
`output definition', a declaration that specifies how to output music
analogous to @code{\paper @{ @}}. You can specify the tempo using the
@code{\tempo} command, in this case the tempo of quarter notes is set
to 72 beats per minute.
@example 

        \paper @{ linewidth = 10.0\cm; @}
 
@end example 
We also want notation output.  The linewidth is short so the piece
will be set in two lines.
@example 

        @}
 
@end example 
End the score block.

@node More movements 
@section More movements

You probably ran @file{ly2dvi} on the last example, and ended up with a
viewable @file{.dvi} file.  However, between there are a few steps of
which LilyPond is only one. To enhance your understanding of what's
happening under the hood when you run ly2dvi,  we explain what programs
are run.   

@code{ly2dvi} is a program that calls a number of programs  in sequence.
The first thing it does, is running LilyPond on the input file. After
some calculations, lily comes up with a @file{.tex} file. The contents
of this file are very  low-level instructions.

For example, if you'd put the following in a file called
@file{layout.ly},

@example
  \header @{ title = "Two miniatures";  @}
  
  #(set point-and-click #t)
  
  \paper @{
        linewidth = -1.0; @}

  \score @{
    \notes @{ c'4 d'4 @}
    \header @{
    	opus = "Opus 1.";
	piece = "Up"; @}
  @}
  \score @{
    \notes @{ d'4 c'4  @}
    \header @{
    	opus = "Opus 2.";
	piece = "Down"; @}
  @}
@end example

The result should look somewhat like this@footnote{The titling in this
manual was not generated by ly2dvi, so details will differ.}

@center @strong{Two miniatures}
@flushright
  Opus 1.
@end flushright
@flushleft
@var{Up}
@end flushleft
@lilypond
  \score {
    \notes { c'4 d'4 }
    \paper {
        linewidth = -1.0; }
  }
@end lilypond
@flushright
  Opus 2.
@end flushright
@flushleft
@var{Down}
@end flushleft
@lilypond
  \score {
    \notes { d'4 c'4 }
    \paper {
        linewidth = -1.0; }
  }
@end lilypond

This file is produced by ly2dvi in a few stages, with the help of text
formatting tools. LilyPond produces two output files, @file{layout.tex}
and @file{layout-1.tex}.  They both look like this:

@example
        ...
  \placebox@{-5  \outputscale @}%
  @{  8.7229  \outputscale @}%
  @{\magfontWXGEomMMBo\char90 @}%
  
  \placebox@{-4  \outputscale @}%
  @{ 81.0647  \outputscale @}%
        ...
@end example

@file{ly2dvi} analyses the progress indication that LilyPond spews out,
and generates a file called @file{layout_ly1.tex}. This file contains
formatting instructions for the title and page layout.  A fragment might
look like
@example

        \geometry@{width=540.602362pt,headheight=2mm, ...
        \renewcommand@{\@@oddfoot@}@{\parbox@{\textwidth@}@{\mbox@{@}   ...
        \begin@{document@}
        \lilypondtitle@{foo@}%
        \makelilytitle
        \input@{ly2dvi.tex@}

@end example

@file{ly2dvi} runs it through LaTeX. LaTeX is a text-formatting system
built on top of @TeX. It's very popular in the academic world. If LaTeX
is successful, this will produce a @file{.dvi} file, containing both the
titling and notes.  @code{ly2dvi} completes its task by deleting the two
temporary files, leaving only @file{layout.dvi}.

@example
        #(set point-and-click #t)
@end example

Editing input files can be quite complicated if you're working with
large files: if you're digitizing existing music, you have to
synchronize the .ly file, the sheet music on your lap and the sheet
music on the screen.  The point-and-click mechanism makes it easy to
find the origin of an error in the .ly file: @footnote{This feature is
presently only available on X-windows using a patched version of xdvi
and emacs} when you view the file with Xdvi and click on a note using
control-right button, [checkme], you editor will jump to the spot where
that note was entered.

More information is in in @ref{Point and click} 

@example
  \paper @{ 
@end example

The @code{\score} blocks that follow in the file, don't have
@code{\paper} sections, so the settings of this block are substituted: A
paper block, at top-level, i.e. not in a @code{\score} block sets the
default page layout.

@example
  linewidth = -1.0; @}
@end example



The variable @code{linewidth} normally sets the length of the systems on
the page. However, a negative value has a special meaning here. If
@code{linewidth} is less than 0, no line breaks are inserted into the
score, and the spacing is set to natural length: a short phrase takes up
little space, a longer phrase more space.

@example
  \score @{
    \notes @{ c'4 d'4 @}
@end example

In previous examples, notes were specified in relative octaves,
i.e. each note was put in the octave that would put it closest to its
predecessor. Besides relative, there is also absolute octave
specification, and it is turned on by default. In this input mode, the
central C is denoted by @code{c'}. Going down, you get @code{c}
@code{c,} @code{c,,} etc.  Going up, you get @code{c''} @code{c'''} etc.

When you're copying music from existing sheet music, relative octaves
are probably the easiest to use: it's less typing work and errors are
easily spotted. However, if you write LilyPond input, either by hand
(ie. composing) or by computer, absolute octaves is probably less work.


@example
    \header @{
@end example

The @code{\header} is normally at the top of the file, where it sets
values for the rest of the file. If you want to typeset different pieces
from one file (eg. if there are multiple movements, or if you're making
a etude-book), you can put different  @code{\score}
blocks into  the input file. ly2dvi will assemble all LilyPond
output files into a big document. The contents of \header blocks
specified within each score, are used for the titling of each movement.
@example
    	opus = "Opus 1.";
	piece = "Up"; @}
@end example
For example, the Opus number is put at the right, and the piece string
will be at the left.



@node Piano music
@section Piano music

Our third subject is a piece of piano music.  The fragment in the input
file is a piano reduction of the G major Sinfonia by Giovanni Battista
Sammartini.  It was composed around 1740. 

@lilypond[verbatim]

\version "1.3.60";
\include "paper16.ly";

viola = \notes \relative c' \context Voice = viola {
        <c4-\f g' c>
        \stemDown g'8. b,16
        s1 s2. r4
        g
}

oboes = \notes \relative c'' \context Voice = oboe {
        \stemUp s4  g8. b,16 c8 r <e'8.-\p g> <f16 a>
        \grace <e8( g> <d4 f> <c2 e> \times 2/3 { <d8 \< f> <e g> <f a> }
        <
          { \times 2/3 { a8 g c } \! c2 }
          \context Voice = oboeTwo {
                \stemDown
                \grace {
                    \property Grace.Stem \override #'direction = #-1
                    [f,16 g] }
                f8 e e2
        } >
        \stemBoth
        \grace <c,8( e> <)b8. d8.-\trill> <c16 e> | 
        [<d ( f> < )f8. a>] <)b,8 d> r [<d16( f> <f8. )a>] <b,8 d> r  |
        [<c16( e>  < )e8. g>] <c8 e,>
}

hoomPah  = \notes \transpose c' {
    c8 \translator Staff = top \stemDown 
    c'8 \translator Staff = bottom \stemUp }

hoomPahHoomPah = { [\hoomPah \hoomPah] }

bassvoices = \notes \relative c' {
        c4 g8. b,16
        \repeat unfold 4 {\hoomPahHoomPah}
        \stemDown [c8 c'8] r4
        <g d'> r4
        < {\stemUp r2 <e4 c'> <c8 g'> }
          \context Voice = reallyLow  {\stemDown g2 ~ | g4 c8 } >
}

\score {
        \context PianoStaff \notes <
                \context Staff = top < \time 2/2;
                        \viola
                        \oboes
                >
                \context Staff = bottom < \time 2/2; \clef bass;
                        \bassvoices
                >
        >
        \midi { }
        \paper {
          indent = 0.0;
          linewidth = 15.0 \cm; }
}
@end lilypond

If it looks like incomprehensible gibberish to you@dots{} Then you are
right.  The author has doctored this example to have as many quirks in
one system as possible.
@example 
\version "1.3.61";
@end example 
Lilypond and the Lilypond language is still under development, therefore
it is useful to indicate the Lilypond version of the file. Lilypond 
will check the version number and warn you when the syntax has
changed. Also, the @code{convert-ly} program will be able to 
update most of the syntax changes automatically.
@example 
viola = \notes \relative c'  \context Voice = viola @{ 
@end example 
In this example, you can see multiple parts on a staff.  Each part is
associated with one notation context.  This notation context handles
stems and dynamics (among others).  The name of this context is
@code{Voice}.  For each part we have to make sure that there is
precisely one Voice context.
@example 
<c4-\f g' c> 
@end example 
@code{<} and @code{>} are short hands for @code{\simultaneous @{} and
@code{@}}. So the expression enclosed in @code{<} and @code{>} is a
chord.  @code{\f} places a forte symbol  under the chord.
[FIXME]

@example 
   \property Voice.verticalDirection = \down 
@end example 
@code{verticalDirection} is a property of the voice context. It
controls the directions of stems, articulations marks and other
symbols.

If @code{verticalDirection} is set to @code{\down}
(identifier for the integer -1) the stems go down,
@code{\up} (identifier for the integer 1) makes the stems go up.
@example 
        g'8. b,16 
@end example 
Relative octaves work a little differently with chords.  The starting
point for the note following a chord is the first note of the chord.  So
the @code{g} gets an octave up quote: it is a fifth above the starting
note of the previous chord (the central C).

@example 
s1 s2. r4 
@end example 
@code{s} is a `spacer' rest.  It does not print anything,  but it does
have the duration of a rest.
@example 
oboes = \notes \relative c'' \context Voice = oboe @{ 
@end example 
Now comes a part for two oboes.  They play homophonically, so we
print the notes as one voice that makes chords. Again, we insure that
these notes are indeed processed by precisely one context with
@code{\context}.
@example 
\stemUp s4  g8. b,16 c8 r <e'8.-\p g> <f16 a> 
@end example 
@code{\stemUp} is an identifier reference.  It is shorthand for
@code{\property Voice.verticalDirection = \up}.  If possible, you
should use predefined identifiers like these for setting properties.
Your input will be less dependent upon the implementation of LilyPond.
@example 
\grace <e8( g> < )d4 f> <c2 e> 
@end example 
@code{\grace} introduces grace notes.  It takes one argument, in this
case a chord.  The slur started on the @code{e} of the chord
will be attached to the next note.@footnote{LilyPond will squirm
about unended Slurs.  In this case, you can ignore the warning}.
@example 
\times 2/3 
@end example 
Tuplets are made with the @code{\times} keyword.  It takes two
arguments: a fraction and a piece of music.  The duration of the
second argument is multiplied by the first argument.  Triplets make
notes occupy 2/3 of their notated duration, so in this case the
fraction is 2/3.
@example 
@{ <d8 \< f> <e g> <f a> @} 
@end example 
The piece of music to be `tripletted' is sequential music containing
three notes.  On the first chord (the @code{d}), a crescendo is started
with @code{\<}.
@example 
< 
@end example 
At this point, the homophonic music splits into two rhythmically
different parts.  We can't use a sequence of chords to enter this, so
we make a `chord' of sequences to do it.  We start with the upper
voice, which continues with upward stems:
@example 
 @{ \times 2/3 @{ a8 g c @} \! c2 @} 
@end example 
The crescendo is ended at the half note by the escaped exclamation
mark `@code{\!}'.
@example 
\context Voice = oboeTwo @{
\stemDown 
@end example 
We can't share stems with the other voice, so we have to create a new
@code{Voice} context.  We give it the name @code{oboeTwo} to distinguish
it from the other context.  Stems go down in this voice.
@example 
\grace @{  
@end example 
When a grace section is processed, a @code{Grace} context is
created. This context acts like a miniature score of its own.  It has
its own time bookkeeping, and you can make notes, beams, slurs
etc. Here we fiddle with a property and make a beam.  The argument of
@code{\grace} is sequential music.

@example 
\property Grace.verticalDirection = \down   
[f,16 g] @}
  [FIXME]
@end example 
Normally, grace notes are always stem up, but in this case, the upper
voice interferes. We set the stems down here.

As far as relative mode is concerned, the previous note is the
@code{c'''2} of the upper voice, so we have to go an octave down for
the @code{f}.
@example 

  f8 e e2
@} > 
@end example 
This ends the two-part section.
@example 
\stemBoth
\grace <c,8( e> <)b8. d8.-\trill> <c16 e> |  
@end example 
@code{\stemBoth} ends the forced stem directions. From here, stems are
positioned as if it were single part music.

The bass has a little hoom-pah melody to demonstrate parts switching
between staffs.  Since it is repetitive, we use identifiers:
@example 
hoomPah  = \notes \transpose c' @{ 
@end example 
Transposing can be done with @code{\transpose}.  It takes two
arguments; the first specifies what central C should be transposed to.
The second is the to-be-transposed music.  As you can see, in this
case, the transposition is a no-op.  Central C is transposed to
central C.

The purpose of this no-op is circumventing relative mode.  Relative
mode can not be used in conjunction with transposition, so relative
mode will leave the contents of @code{\hoomPah} alone.  We can use it
without having to worry about getting the motive in a wrong
octave@footnote{@code{hoomPah = \relative @dots{}} would be more
intuitive to use, but that would not let me plug @code{\transpose}
:-).}.
@example 
c8 \translator Staff = top \stemDown  
@end example 
We assume that the first note will be put in the lower staff.  After
that note we switch to the upper staff with @code{\translator}.  To be
precise, this @code{\translator} entry switches the current voice to a
@code{Staff} named @code{top}. So we have to name the upper staff
`@code{top}'.  Stem directions are set to avoid interfering with the
oboe voices.
@example 
c'8 \translator Staff = bottom \stemUp @} 
@end example 
Then a note is put on the upper staff, and we switch again.  We have
to name the lower staff `@code{bottom}'.
@example 
hoomPahHoomPah = @{ [\hoomPah \hoomPah] @} 
@end example 
Put two of these fragments in sequence, and beam them.@example 
bassvoices = \notes \relative c' @{
c4 g8. b,16
\repeat unfold 4 @{\hoomPahHoomPah @} 
@end example 
Entering the bass part is easy: the hoomPahHoomPah variable is
repeated four times; @code{unfold} means that all four repetitions
should be written out.
@example 
\context Voice = reallyLow  @{\stemDown g2 ~ | g4 c8 @} > 
@end example 
After skipping some lines, we see @code{~}.  This mark makes ties.
@example 
\context PianoStaff 
@end example 
For piano music, a special context is needed to get cross staff
beaming right.  It is called @code{PianoStaff}.
@example 
\context Staff = bottom < \time 2/2; \clef bass; 
@end example 
The bottom staff must have a different clef.
@example 
indent = 0.0; 
@end example 
To make some more room on the line, the first (in this case the only)
line is not indented.  The line still looks very cramped, but that is due
to the format of this tutorial.

This example shows a lot of features, but the organisation isn't
perfect.  For example, it would be less confusing to use a chord
containing sequential music than a sequence of chords for the oboe
parts.

[TODO: demonstrate Hara-Kiri with scores and  part extraction.]

@node  end of tutorial
@section The end        
         
That's all folks.  From here, you can either try fiddling with input
files, or you can read the reference manual.
