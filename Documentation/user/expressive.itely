@c -*- coding: utf-8; mode: texinfo; -*-
@ignore
    Translation of GIT committish: FILL-IN-HEAD-COMMITTISH

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  See TRANSLATION for details.
@end ignore

@node Expressive marks
@section Expressive marks

@menu
* Attached to notes::           
* Curves::                      
* Lines::                       
@end menu


@node Attached to notes
@subsection Attached to notes


@menu
* Articulations and ornamentations::  
* Dynamics::                    
@end menu

@node Articulations and ornamentations
@unnumberedsubsubsec Articulations and ornamentations

@cindex Articulations
@cindex scripts
@cindex ornaments

A variety of symbols can appear above and below notes to indicate
different characteristics of the performance.  All these symbols
can be attached to a note using the syntax @var{note}@code{\}@var{name}. 

The possible values for @var{name} are listed in @ref{List of
articulations}.

Some of these articulations have shorthands for easier entry.  They
are used by adding a dash and the character signifying
the articulation to the note name.  The available shorthands and
their output are:

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
c4-.  c--   c-+   c-|   
c->   c-^   c-_         
@end lilypond

The marks are automatically placed, but the direction can be
forced as well.  Like other pieces of LilyPond code, @code{_} will
place them below the staff, and @code{^} will place them above.
This applies both to the shorthands and the fully named
articulations.  For the shorthands, the dash itself should be
omitted; the shorthand signs replace it:

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
c4^^ c4_^
c\fermata c^\fermata c_\fermata
@end lilypond


@cindex accent
@cindex marcato
@cindex staccatissimo
@cindex espressivo
@cindex fermata
@cindex stopped
@cindex staccato
@cindex portato
@cindex tenuto
@cindex upbow
@cindex downbow
@cindex foot marks
@cindex organ pedal marks
@cindex turn
@cindex open
@cindex stopped
@cindex flageolet
@cindex reverseturn
@cindex trill
@cindex prall
@cindex mordent
@cindex prallprall
@cindex prallmordent
@cindex prall, up
@cindex prall, down
@cindex thumb marking
@cindex segno
@cindex coda
@cindex varcoda


@commonprop

The meanings of the shorthands can be changed.  They are defined
in @file{ly/@/script@/-init@/.ly}, where the variables  
@code{DashDot}, @code{DashDash}, @code{DashPlus}, @code{DashBar},
@code{DashLarger}, @code{DashHat}, and @code{DashUnderscore}
are associated with the default articulation marks.  If you want,
e.g., @code{-+} to produce a trill instead of a "+", you can
redefine the variable in your document:

@lilypond[quote,ragged-right,verbatim]
\relative c'' { c-+ }       
dashPlus = "trill"
\relative c'' { c-+ }       
@end lilypond

The vertical ordering of scripts is controlled with the
@code{script-priority} property.  The lower this number, the
closer it will be put to the note.  In this example, the
@internalsref{TextScript} (the sharp symbol) first has the lowest
priority, so it is put lowest in the first example.  In the
second, the prall trill (the @internalsref{Script}) has the
lowest, so it is on the inside.  When two objects have the same
priority, the order in which they are entered decides which one
comes first.


@commonprop

The meanings of the shorthands can be changed.  They are defined
in @file{ly/@/script@/-init@/.ly}, where the variables  
@code{DashDot}, @code{DashDash}, @code{DashPlus}, @code{DashBar},
@code{DashLarger}, @code{DashHat}, and @code{DashUnderscore}
are associated with the default articulation marks.  If you want,
e.g., @code{-+} to produce a trill instead of a "+", you can
redefine the variable in your document:

@lilypond[quote,ragged-right,verbatim]
\relative c'' { c-+ }       
dashPlus = "trill"
\relative c'' { c-+ }       
@end lilypond

The vertical ordering of scripts is controlled with the
@code{script-priority} property.  The lower this number, the
closer it will be put to the note.  In this example, the
@internalsref{TextScript} (the sharp symbol) first has the lowest
priority, so it is put lowest in the first example.  In the
second, the prall trill (the @internalsref{Script}) has the
lowest, so it is on the inside.  When two objects have the same
priority, the order in which they are entered decides which one
comes first.

@lilypond[verbatim,relative=3,ragged-right,fragment,quote]
\once \override TextScript #'script-priority = #-100
a4^\prall^\markup { \sharp }

\once \override Script #'script-priority = #-100
a4^\prall^\markup { \sharp }
@end lilypond


@seealso

Snippets: @lsrdir{expressive}

Internals Reference: @internalsref{Script}.


@refbugs

These signs appear in the printed output but have no effect on the
MIDI rendering of the music.


@node Dynamics
@unnumberedsubsubsec Dynamics

@cindex Dynamics
@funindex \pppp
@funindex \ppp
@funindex \pp
@funindex \p
@funindex \mp
@funindex \mf
@funindex \f
@funindex \ff
@funindex \fff
@funindex \ffff
@funindex \fp
@funindex \sf
@funindex \sff
@funindex \sp
@funindex \spp
@funindex \sfz
@funindex \rfz

Absolute dynamic marks are specified using a command after a note
@code{c4\ff}.  The available dynamic marks are @code{\ppppp},
@code{\pppp}, @code{\ppp}, @code{\pp}, @code{\p}, @code{\mp},
@code{\mf}, @code{\f}, @code{\ff}, @code{\fff}, @code{\ffff},
@code{\fp}, @code{\sf}, @code{\sff}, @code{\sp}, @code{\spp},
@code{\sfz}, and @code{\rfz}.  The dynamic marks can be placed
above or below the staff with @code{_} and @code{^}, just like
articulation marks. 

@lilypond[quote,verbatim,ragged-right,fragment,relative=2]
c2\ppp c\mp 
c\rfz c^\mf
c_\spp c_\staccato^\ff
@end lilypond

@funindex \<
@funindex \>
@funindex \!

A crescendo mark is started with @code{\<} and terminated with
@code{\!} or an absolute dynamic.  A decrescendo is started with
@code{\>} and is also terminated with @code{\!} or an absolute
dynamic.  @code{\cr} and @code{\decr} may be used instead of
@code{\<} and @code{\>}.  They can be engraved either using a
graphical sign (a @q{hairpin}), or with textual signs.

Because these marks are bound to notes, you must use spacer notes
if multiple marks are needed during one note.

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
c\< c\! d\> e\!
<< f1 { s4 s4\< s4\! \> s4\! } >>
@end lilypond

This may give rise to very short hairpins.  Use
@code{minimum-length} in
@internalsref{Voice}.@internalsref{Hairpin} to lengthen them, for
example:

@example
\override Voice.Hairpin #'minimum-length = #5
@end example

@noindent
A hairpin normally starts at the left edge of the beginning note
and ends on the right edge of the ending note.  If the ending note
falls on the downbeat, the hairpin ends on the immediately
preceding bar line.  This may be modified by setting the
@code{hairpinToBar line} property,
@cindex Hairpin

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
e4\< e2. e1\!
\set hairpinToBarline = ##f
e4\< e2. e1\!
@end lilypond

@cindex espressivo, articulation
In some situations the @code{\espressivo} articulation mark may be
suitable to indicate a crescendo and decrescendo on the one note:

@lilypond[quote,ragged-right,fragment,verbatim,relative=2]
c2 b4 a g1\espressivo
@end lilypond

@cindex al niente
@cindex niente, al

Hairpins may be printed with a circled tip (al niente notation) by
setting the @code{circled-tip} property:

@lilypond[quote,ragged-right,fragment,relative=2,verbatim]
\override Hairpin #'circled-tip = ##t
c2\< c\!
c4\> c\< c2\!
@end lilypond


@cindex crescendo
@cindex decrescendo
@cindex diminuendo

You can use text saying @emph{cresc.}, @emph{decr.}, or
@emph{dim.} instead of hairpins with the commands \setTextCresc,
\setTextDim, and \setTextDecresc.  The corresponding
\setHairpinCresc, \setHairpinDim, and \setHairpinDecresc will
revert to hairpins again: 

@lilypond[quote,ragged-right,fragment,relative=2,verbatim]
\setTextCresc
c\< d e f\!
\setHairpinCresc
e\> d c b\!
\setTextDecresc
c\> d e f\!
\setTextDim
e\> d c b\!
@end lilypond

You can also supply your own texts and change the style of the
spanner line with the properties @code{\crescendoText},
@code{\crescendoSpanner}, @code{\decrescendoText}, and
@code{\decrescendoSpanner}. Available values for the spanner
properties are @code{hairpin}, @code{line}, @code{dashed-line},
and @code{dotted-line}. If unset, a hairpin crescendo is used:

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
\set crescendoText = \markup { \italic "cresc. poco" }
\set crescendoSpanner = #'dotted-line
a'2\< a a a a a a a\!\mf
@end lilypond


To create new dynamic marks or text that should be aligned with
dynamics, see @ref{New dynamic marks}.

Vertical positioning of dynamics is handled by
@internalsref{DynamicLineSpanner}.


@commonprop

Dynamics that occur at, begin on, or end on the same note will be
vertically aligned.  If you want to ensure that dynamics are
aligned when they do not occur on the same note, you can increase
the @code{staff-padding} property.

@example
\override DynamicLineSpanner #'staff-padding = #4
@end example

You may also use this property if the dynamics are colliding with
other notation.

Crescendi and decrescendi that cross a line break will be
continued on the second line.  If they end on the first note of a
new line, nothing will be printed on that line.  To change this
behavior, use

@example
\override Score.Hairpin #'after-line-breaking = ##t
@end example

Text style dynamic changes (such as @emph{cresc.} and @emph{dim.})
are printed with a dashed line showing their extent.  To surpress
printing this line, use

@example
\override DynamicTextSpanner #'dash-period = #-1.0
@end example


@refcommands

@funindex \dynamicUp
@code{\dynamicUp},
@funindex \dynamicDown
@code{\dynamicDown},
@funindex \dynamicNeutral
@code{\dynamicNeutral}.


@seealso

Snippets: @lsrdir{expressive}

Internals Reference: @internalsref{DynamicText},
@internalsref{Hairpin}.  Vertical positioning of these symbols is
handled by @internalsref{DynamicLineSpanner}.
Glossary: @rglos{Hairpin}, @rglos{crescendo}, @rglos{decrescendo}

@c TODO: add link to LM directions


@node Curves
@subsection Curves

@menu
* Slurs::                       
* Phrasing slurs::              
* Breath marks::                
* Falls and doits::             
@end menu

@node Slurs
@unnumberedsubsubsec Slurs

@cindex Slurs

A slur indicates that notes are to be played bound or
@emph{legato}.  They are entered using parentheses:

@lilypond[quote,ragged-right,relative=2,fragment,verbatim]
f( g a) a8 b( a4 g2 f4)
<c e>2( <b d>2)
@end lilypond

Just as with ties, the direction of a slur can be specified with
@code{\slur@emph{DIR}}, where @code{@emph{DIR}} is either
@code{Up}, @code{Down}, or @code{Neutral} (automatically
selected).  The shorthands are also available: by adding
@code{_} or @code{^} before the opening parentheses, the direction
is also set.  

@lilypond[relative=2,ragged-right,quote,verbatim,fragment]
c4_( c) c^( c)
@end lilypond

Only one slur can be printed at once.  If you need to print a long
slur over a few small slurs, please see @ref{Phrasing slurs}.


@commonprop

Some composers write two slurs when they want legato chords.  This
can be achieved in LilyPond by setting @code{doubleSlurs},

@lilypond[verbatim,ragged-right,relative,fragment,quote]
\set doubleSlurs = ##t
<c e>4 ( <d f> <c e> <d f> )
@end lilypond


@refcommands

@funindex \slurUp
@code{\slurUp},
@funindex \slurDown
@code{\slurDown},
@funindex \slurNeutral
@code{\slurNeutral},
@funindex \slurDashed
@code{\slurDashed},
@funindex \slurDotted
@code{\slurDotted},
@funindex \slurSolid
@code{\slurSolid}.

@seealso

Snippets: @lsrdir{expressive}

Internals Reference: @internalsref{Slur}.


@node Phrasing slurs
@unnumberedsubsubsec Phrasing slurs

@cindex phrasing slurs
@cindex phrasing marks

A phrasing slur (or phrasing mark) connects notes and is used to
indicate a musical sentence.  It is written using @code{\(} and
@code{\)} respectively:

@lilypond[quote,ragged-right,fragment,verbatim,relative=1]
\time 6/4 c'\( d( e) f( e) d\)
@end lilypond

Typographically, the phrasing slur behaves almost exactly like a
normal slur.  However, they are treated as different objects.  A
@code{\slurUp} will have no effect on a phrasing slur; instead,
use @code{\phrasingSlurUp}, @code{\phrasingSlurDown}, and
@code{\phrasingSlurNeutral}, or use the shorthands @code{_} and
@code{^}.

You cannot have simultaneous phrasing slurs.


@refcommands

@funindex \phrasingSlurUp
@code{\phrasingSlurUp},
@funindex \phrasingSlurDown
@code{\phrasingSlurDown},
@funindex \phrasingSlurNeutral
@code{\phrasingSlurNeutral}.


@seealso

Snippets: @lsrdir{expressive}

Internals Reference: @internalsref{PhrasingSlur}.


@node Breath marks
@unnumberedsubsubsec Breath marks

Breath marks are entered using @code{\breathe}

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
c'4 \breathe d4
@end lilypond


@commonprop

The glyph of the breath mark can be tuned by overriding the
@code{text} property of the @code{BreathingSign} layout object
with any markup text.  For example,

@lilypond[quote,ragged-right,fragment,verbatim,relative=1]
c'4
\override BreathingSign #'text
  = #(make-musicglyph-markup "scripts.rvarcomma")
\breathe
d4
@end lilypond

@seealso

Snippets: @lsrdir{expressive}

Internals Reference: @internalsref{BreathingSign}.

Examples: @lsr{expressive,breathing-sign.ly}


@node Falls and doits
@unnumberedsubsubsec Falls and doits

Falls and doits can be added to notes using the @code{\bendAfter}
command,

@lilypond[fragment,ragged-right,relative=2]
\override Score.SpacingSpanner #'shortest-duration-space = #3.0
c4-\bendAfter #+5
c4-\bendAfter #-3
@end lilypond

@node Lines
@subsection Lines

@menu
* Glissando::                   
* Arpeggio::                    
* Trills::                      
@end menu

@node Glissando
@unnumberedsubsubsec Glissando

@cindex Glissando
@funindex \glissando

A glissando is a smooth change in pitch.  It is denoted by a line
or a wavy line between two notes.  It is requested by attaching
@code{\glissando} to a note

@lilypond[quote,ragged-right,fragment,relative=2,verbatim]
c2\glissando c'
\override Glissando #'style = #'zigzag
c2\glissando c,
@end lilypond

@commonprop


@lilypond[quote,ragged-right,verbatim]
I = \once \override NoteColumn #'ignore-collision = ##t

\relative <<
  { \oneVoice \stemDown f2 \glissando \stemNeutral a } \\
  { \oneVoice \I c2 \glissando \I d, }
>>
@end lilypond



@seealso

Snippets: @lsrdir{expressive}

Internals Reference: @internalsref{Glissando}.

Glossary: @rglos{falls}, @rglos{doits}
Example files:
@lsr{expressive,glissando.ly}, @lsr{expressive,line-styles.ly}


@refbugs

Printing text over the line (such as @emph{gliss.}) is not
supported.


@node Arpeggio
@unnumberedsubsubsec Arpeggio

@cindex Arpeggio
@cindex broken chord
@funindex \arpeggio

You can specify an arpeggio sign (also known as broken chord) on a
chord by attaching an @code{\arpeggio} to the chord:

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
<c e g c>\arpeggio
@end lilypond

A square bracket on the left is used to indicate that the chord should
@emph{not} be arpeggiated:

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
\arpeggioBracket
<c' e g c>\arpeggio
@end lilypond

The direction of the arpeggio can be denoted by adding an
arrowhead to the wiggly line. This is done with the commands
@code{arpeggioUp} and @code{arpeggioDown}. @code{arpeggioNeutral}
reverts to the arrow-less version:

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
\new Voice {
  \arpeggioUp
  <c e g c>\arpeggio
  \arpeggioDown
  <c e g c>\arpeggio
  \arpeggioNeutral
  <c e g c>\arpeggio
}
@end lilypond


@commonprop

In a @code{PianoStaff}, it is possible to let an arpeggio cross
between the staves by setting the property
@internalsref{PianoStaff}.@code{connectArpeggios}. 

@lilypond[quote,ragged-right,fragment,relative=1,verbatim]
\new PianoStaff <<
  \set PianoStaff.connectArpeggios = ##t
  \new Staff { <c' e g c>\arpeggio }
  \new Staff { \clef bass <c,, e g>\arpeggio }
>>
@end lilypond

The same can be accomplished in contexts other than
@code{PianoStaff} if the @code{Span_arpeggio_engraver} is included
in the Score context.

@lilypond[quote,ragged-right,verbatim]
\score {
  \new StaffGroup {
    \set Score.connectArpeggios = ##t
    <<
      \new Voice \relative c' {
        <e g>4\arpeggio
      }
      \new Voice  \relative c {
        \clef bass
        <c e>4\arpeggio
      }
    >>
  }
  \layout {
    \context {
      \Score 
      \consists "Span_arpeggio_engraver"
    } 
  }
}
@end lilypond

Similarly,  an arpeggio can be drawn across notes in
different voices on the same staff if the Span_arpeggio_engraver
is moved to the Staff context:

@lilypond[quote,ragged-right,verbatim]
\new Staff
\with {
  \consists "Span_arpeggio_engraver"
} \relative c' {
  \set Staff.connectArpeggios = ##t
    <<
    {<e' g>4\arpeggio <d f> <d f>2 }
  \\
  {<d, f>2\arpeggio  <g b>2  }
  >>
}
@end lilypond



@refcommands

@code{\arpeggio},
@funindex \arpeggioUp
@code{\arpeggioUp},
@funindex \arpeggioDown
@code{\arpeggioDown},
@funindex \arpeggioNeutral
@code{\arpeggioNeutral},
@funindex \arpeggioBracket
@code{\arpeggioBracket}.


@seealso

Notation manual: @ref{Ties}, for writing out arpeggios.

Snippets: @lsrdir{expressive}

Internals Reference: @internalsref{Arpeggio}.


@refbugs

It is not possible to mix connected arpeggios and unconnected
arpeggios in one @internalsref{PianoStaff} at the same point in
time.


@node Trills
@unnumberedsubsubsec Trills

Short trills are printed with @code{\trill} like normal
articulation; see @ref{Articulations and ornamentations}.

Long running trills are made with @code{\startTrillSpan} and
@code{\stopTrillSpan}. In the following example, it is shown in
the common combination with grace notes.  If a more precise
control of the placement of the grace notes is needed, see
@ref{Grace notes}.

@lilypond[verbatim,ragged-right,relative=2,quote,fragment]
\relative c''
{c1 \afterGrace 
d1\startTrillSpan { c16[\stopTrillSpan d] }
c4 }
@end lilypond

@cindex Pitched trills

Trills that should be executed on an explicitly specified pitch
can be typeset with the command @code{pitchedTrill}, and the
syntax @code{\pitchedTrill} @var{mainnote}@code{\startTrillSpan}
@var{trillnote} @var{endnote} @code{\stopTrillSpan}.

@lilypond[ragged-right,verbatim,fragment,relative=1,quote]
\pitchedTrill e2 \startTrillSpan fis
d\stopTrillSpan
@end lilypond


@noindent
The first argument is the main note.  The pitch of the second is
printed as a stemless note head in parentheses.


@refcommands

@code{\startTrillSpan},
@funindex \startTrillSpan
@code{\stopTrillSpan}.
@funindex \stopTrillSpan


@seealso

Snippets: @lsrdir{expressive}

Internals Reference: @internalsref{TrillSpanner}.




