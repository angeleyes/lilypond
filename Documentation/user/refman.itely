@c -*-texinfo-*-

@node Reference Manual
@chapter Reference Manual

@menu
* Overview::                       Overview
* Top level::                      Top level
* Pitch names::                    Pitch names
* Lexical conventions::            Lexical conventions
* Other languages::                Note names in various languages
* Lexical modes::                          modes
* Types::                          Types
* Assignments::                    Assignments 
* Music expressions::              Music expressions
* Atomic music expressions::       Atomic music expressions
* Note specification::             notedesc
* barlines::                       barlines
* Manual beams::                   Manual beam
* stem tremolo::                   tremolo
* Compound music expressions::     Compound music expressions
* relative::                       relative
* Repeats::                   	   Repeats	
* transpose::                      transpose
* Ambiguities::                    Ambiguities
* Notation conversion specifics::  Notation conversion specifics
* Automatic Beaming::              Automatic Beaming
* Chord Names::                    Chord Names
* lyricprint::                     lyricprint
* Notation Contexts::              Notation Contexts
* Properties::                     Changing formatting
* Page layout::                    Layout
* contextdefs::                    contextdefs
* Sound output::                   Sound output
* midilist::                       midilist
* Pre-defined Identifiers::        Pre-defined Identifiers
* Point and click::                Quik edit using Point and Click
* Interpretation contexts:(lilypond-internals)LilyPond interpretation contexts.
* Engravers:(lilypond-internals)LilyPond engravers.
* Backend:(lilypond-internals)LilyPond backend.
@end menu



@node Overview
@section Overview


[todo: pedals]

This document
describes the the GNU LilyPond input format This format represents a
piece of music in an elegant way, but contains enough information for
both automatic typesetting and automatic performances.

This document has been revised for LilyPond 1.3.125

[todo: ]

There are two things to note here. The format contains musical
concepts like pitches and durations, instead of symbols and positions:
the input format tries to capture the meaning of @emph{music}, and not
notation.  Second, the format tries to be @emph{context-free}:
a note will sound the same regardless of the current time signature,
the key, etc.

The purpose of LilyPond is explained informally by the term `music
typesetter'.  This is not a fully correct name: not only does the
program print musical symbols, it also makes esthetic decisions.  All
symbols and their placement is @emph{generated} from a high-level musical
description.  In other words,  LilyPond would be best
described by `music compiler' or `music to notation compiler'.



LilyPond input can be classified  into three types:
@itemize @bullet
  @item musical expressions: a musical expression is some combination of
rest, notes, lyrics
  @item output definitions: recipes for translating those musical
expressions into performances (MIDI) or graphics (eg. PostScript).

  @item declarations: by declaring and naming musical expressions, you
can enter and edit them in manageable chunks.
@end itemize

@node Top level
@section Top level

This section describes what you may enter at top level.


@unnumberedsubsec Score definition
@cindex score definition

The output is generated combining a music expression with an output
definition.  A score block has the following syntax:

@example
  \score @{ @var{musicexpr} @var{outputdefs} @}
@end example

@var{outputdefs} are zero or more output definitions.  If no output
definition is supplied, the default @code{\paper} block will be added.

@unnumberedsubsec Header definition
@cindex headers

@cindex @code{\header}

The syntax is

@example
  \header @{ @var{key1} = @var{val1};
@cindex @code{ly2dvi}
             @var{key2} = @var{val2}; @dots{} @}
@end example


A header describes the file's contents.  It can also appear in a
@code{\score} block.  Tools like @code{ly2dvi} can use this
information for generating titles.  Key values that are used by
@code{ly2dvi} are: title, subtitle, composer, opus, poet, instrument,
metre, arranger, piece and tagline.

It is customary to put the @code{\header} at the top of the file.

@unnumberedsubsec Default output

A @code{\midi} or @code{\paper} block at top-level sets the default
paper block for all scores that lack an explicit paper block.

@unnumberedsubsec Scheme statements

Scheme statements maybe issued to produce interesting side-effects. 


@node Pitch names
@section Pitch names


@unnumberedsubsec Pitch name definition
@cindex pitch names

@cindex note names
@cindex chord modifier names

Note names and chord modifiers can be customised for nationalities.
languages and conventions.  The syntax is as follows.
@cindex @code{\pitchnames}
@cindex @code{\chordmodifiers}

@example
   \pitchnames @var{scheme-alist}
   \chordmodifiers @var{scheme-alist}
@end example

See @file{ly/nederlands.ly} and @file{ly/chord-modifiers.ly} for
specific examples how to do this.  tables can be tailored specified
using. Some national note names have been provided, see
section @ref{Other languages}.
A @code{\paper} block at top level sets the default paper block.  A
@code{\midi} block at top level works similarly.

@unnumberedsubsec Assignments
@cindex assignments
@cindex @code{#}

Identifier assignments may appear at top level.  @ref{Assignments}


@node Lexical conventions
@section Lexical conventions

@cindex lexical conventions


@unnumberedsubsec Comments

@cindex comment
@cindex @code{%}


A one line comment is introduced by a @code{%} character. 
Block comments are started by @code{%@{} and ended by `@code{%@}}'. 
They cannot be nested.

@unnumberedsubsec Scheme




@cindex Scheme
@cindex GUILE
@cindex Scheme, in-line code


LilyPond contains a Scheme interpreter (the GUILE library) for
internal use. In some places Scheme expressions also form valid syntax:
whereever it is allowed,
@example
  #@var{scheme}
@end example
evaluates the specified Scheme code. If this is used at toplevel, then
the result is discarded. Example:
@example
  \property Staff.TestObject \override #'foobar =  #(+ 1 2)
@end example

@code{\override} expects two Scheme expressions, so there are two Scheme
expressions. The first one is a symbol (@code{foobar}), the second one
an integer (namely, 3).

Scheme is a full-blown programming language, and a full discussion is
outside the scope of this document. Interested readers are referred to
the website @uref{http://www.schemers.org/} for more information on
Scheme.

@unnumberedsubsec Keywords
@cindex keyword


Keywords start with a backslash, followed by a number of lower case
alphabetic characters.  These are all the keywords.

@example
apply arpeggio autochange spanrequest commandspanrequest
simultaneous sequential accepts alternative bar breathe
char chordmodifiers chords clef cm consists consistsend
context denies duration dynamicscript elementdescriptions
font grace header in lyrics key mark pitch
time times midi mm name pitchnames notes outputproperty
override set revert partial paper penalty property pt
relative remove repeat addlyrics partcombine score
script stylesheet skip textscript tempo translator
transpose type
@end example

@unnumberedsubsec Integers

@cindex integers
@cindex @code{+}
@cindex @code{-}
@cindex @code{*}
@cindex @code{/}

Formed from an optional minus sign followed by digits.  Arithmetic
operations cannot be done with integers, and integers cannot be mixed
with reals.

@unnumberedsubsec Reals
@cindex real numbers





Formed from an optional minus sign and a sequence of digits followed
by a @emph{required} decimal point and an optional exponent such as
@code{-1.2e3}.  Reals can be built up using the usual operations:
`@code{+}', `@code{-}', `@code{*}', and
`@code{/}', with parentheses for grouping.

@cindex @code{\mm},
@cindex @code{\in}
@cindex @code{\cm}
@cindex @code{\pt}
@cindex dimensions

A real constant can be followed by one of the dimension keywords:
@code{\mm} @code{\pt}, @code{\in}, or @code{\cm}, for millimeters,
points, inches and centimeters, respectively.  This converts the number
to a real that is the internal representation of dimensions.


@unnumberedsubsec Strings
@cindex string
@cindex concatenate

Begins and ends with the @code{"} character.  To include a @code{"}
character in a string write @code{\"}.  Various other backslash
sequences have special interpretations as in the C language.  A string
that contains no spaces can be written without the quotes.  See
@ref{Lexical modes} for details on unquoted strings; their interpretation varies
depending on the situation.  Strings can be concatenated with the
@code{+} operator.

The tokenizer accepts the following commands. They have no grammatical
function, hence they can appear anywhere in the input.

@unnumberedsubsec Main input

@cindex @code{\maininput}

The @code{\maininput} command is used in init files to signal that the
user file must be read. This command cannot be used in a user file.

@unnumberedsubsec File inclusion
@cindex @code{\include}
@example
  \include @var{filename}
@end example

Include @var{filename}.  The argument @var{filename} may be a quoted string (an
unquoted string will not work here!) or a string identifier.  The full
filename including the @file{.ly} extension must be given,

@unnumberedsubsec Version information 
@cindex @code{\version}
@example
  \version @var{string} ;
@end example

Specify the version of LilyPond that a file was written for.  The
argument is a version string in quotes, for example @code{"1.2.0"}. 
This is used to detect invalid input, and to aid
@code{convert-ly}  a tool that automatically upgrades input files. See
See @ref{convert-ly} for more information on @code{convert-ly}.

@cindex convert-ly


@node Lexical modes
@section Lexical modes
@cindex Lexical modes
@cindex modes


To simplify entering notes, lyrics, and chords, LilyPond has three
special input modes on top of the default mode.  In each mode, words
are identified on the input.  If @code{"word"} is encountered, it is
treated as a string.  If @code{\word} is encountered, it is treated as
a keyword or as an identifier.  The behavior of the modes differs in
two ways: Different modes treat unquoted words differently, and
different modes have different rules for deciding what is a word.

@table  @asis
@item Normal mode.
@cindex normal mode
 
At the start of parsing, LilyPond is in Normal mode.  In Normal
mode, a word is an alphabetic character followed by alphanumeric
characters.  If @code{word} is encountered on the input it is
treated as a string.

@item Note mode.
@cindex note mode

@cindex @code{\notes}
Note mode is introduced by the keyword
@code{\notes}.  In Note mode, words can only
contain alphabetic characters.  If @code{word} is encountered,
LilyPond first checks for a notename of @code{word}.  If no
notename is found, then @code{word} is treated as a string.

Since combinations of numbers and dots are used for indicating
durations, it is not possible to enter real numbers in this mode.

@item Chord mode.
@cindex chord mode

Chord mode is introduced by the keyword
@code{\chords}.  It is similar to Note mode, but
words are also looked up in a chord modifier table (containing
@code{maj}, @code{dim}, etc).

Since combinations of numbers and dots are used for indicating
durations, you can not enter real numbers in this mode.  Dashes
and carets are used to indicate chord additions and subtractions,
so scripts can not be entered in Chord mode.

@item Lyrics mode. 
@cindex lyric mode
@cindex @code{\lyrics}

Lyrics mode is introduced by the keyword @code{\lyrics}.  This mode has
rules that make it easy to include punctuation and diacritical marks in
words: The purpose of Lyrics mode is that you can enter lyrics in @TeX{}
format or a standard encoding without needing quotes.  The precise
definition of this mode is ludicrous, and this will remain so until the
authors of LilyPond acquire a deeper understanding of character
encoding, or someone else steps up to fix this.

A word in Lyrics mode begins with: an alphabetic character, @code{_},
@code{?}, @code{!}, @code{:}, @code{'}, the control characters @code{^A}
through @code{^F}, @code{^Q} through @code{^W}, @code{^Y}, @code{^^},
any 8-bit character with ASCII code over 127, or a two-character
combination of a backslash followed by one of @code{`}, @code{'},
@code{"}, or @code{^}.

Subsequent characters of a word can be any character that is not a digit
and not white space.  One important consequence of this is that a word
can end with `@code{@}}', which may be confusing. However, LilyPond will
issue a warning.  Any @code{_} character which appears in an unquoted
word is converted to a space.  This provides a mechanism for introducing
spaces into words without using quotes.  Quoted words can also be used
in Lyrics mode to specify words that cannot be written with the above
rules.  Here are some examples.  Not all of these words are printable by
@TeX{}.

@example 
Ah!             % a word
2B_||_!2B       % not a word because it starts with a digit
``Hello''       % not a word because it starts with `
_ _ _ _         % 4 words, each one a space 
@end example 

Since combinations of numbers and dots are used for indicating
durations, you can not enter real numbers in this mode.
@end table

[todo: include short table showing differences] 

@node Types
@section Types

@cindex  Identifiers

All of the information in a LilyPond input file, is represented as a
Scheme value. In addition to normal Scheme data types (such as pair,
number, boolean, etc.), LilyPond has a number of specialized data types,

@itemize @bullet
@item Input
@item c++-function
@item Music: see @ref{Music expressions}
@item Identifier
@item Translator_def:
See section @ref{contextdefs} for more information
@item Duration
@item Pitch
@item Score
@item Music_output_def
@item Moment (rational number)
@end itemize

LilyPond also includes some transient object types. Objects of these
types are built during a LilyPond run, and do not `exist' per se within
your input file. These objects are created as a result of your input
file, so you can include commands in the input to manipulate them,
during a lilypond run.

@itemize @bullet
@item Grob: short for Graphical object. See @ref{Grobs}. 
@item Molecule: device-independent page output object,
including dimensions.  Produced by some Grob functions
See @ref{Molecules}
@item Translator: object that produces audio objects or Grobs. This is
not yet user accessible.
@item Font_metric: object representing a font. (See @ref{Font metrics})
@c  @item Audio_element: (todo,  smobme)
@end itemize

@node Assignments
@unnumberedsubsec Assignments

Identifiers allow objects to be assigned to names during the parse
stage.  To assign an identifier, you use @var{name}@code{=}@var{value}
and to refer to an identifier, you preceed its name with a backslash:
`@code{\}@var{name}'.  @var{value} is any valid Scheme value or any of
the input-types listed above.  Identifier assignments can appear at top
level in the LilyPond file, but also in @code{\paper} blocks.

Semicolons are forbidden after top level assignments, but mandatory in
other places. The rules about semicolons and assignments are very
confusing, but when LilyPond input evolves more towards Scheme, we hope
that this problem will grow smaller.

An identifier can be created with any string for its name, but you will
only be able to refer to identifiers whose names begin with a letter,
being entirely alphanumeric.  It is impossible to refer to an identifier
whose name is the same as the name of a keyword.

The right hand side of an identifier assignment is parsed completely
before the assignment is done, so it is allowed to redefine an
identifier in terms of its old value, e.g.

@example
foo = \foo * 2.0
@end example

When an identifier is referenced, the information it points to is
copied.  For this reason, an identifier reference must always be the
first item in a block.
@example
\paper  @{
foo = 1.0
\paperIdent % wrong and invalid
@}

\paper @{
\paperIdent % correct
foo = 1.0
@}
@end example


@node Music expressions
@section Music expressions

@cindex music expressions

Music in LilyPond is entered as a music expression.  Notes, rests,
lyric syllables are music expressions (the atomic
expressions),
@cindex atomic music expressions
and you can combine music expressions to form new ones.  This example
forms a compound expressions out of the quarter @code{c} note and a
@code{d} note:

@example 
\sequential @{ c4 d4 @} 
@end example 

The meaning of this compound expression is to play the @code{c}
first, and then the @code{d} (as opposed to playing them
simultaneously, for instance).

Atomic music expression are discussed in
subsection @ref{Atomic music expressions}.  Compound music expressions are
discussed in subsection @ref{Compound music expressions}.



@node Atomic music expressions
@section Atomic music expressions




@cindex pitch

The syntax for pitch specification is

@cindex @code{\pitch}
@example
  \pitch @var{scmpitch}
@end example

@var{scmpitch} is a pitch scheme object, see @ref{Pitch}.

In Note and Chord mode, pitches may be designated by names.  See
section @ref{Other languages} for pitch names in different languages.

@cindex duration
@cindex @code{\duration}

The syntax for duration specification is
@example
 \duration @var{scmduration}
@end example

In Note, Chord, and Lyrics mode, durations may be designated by
numbers and dots.  


@node Note specification
@section Note specification
@cindex Note specification

@cindex pitches

@cindex entering notes

A note specification has the form

@example
  @var{pitch}[@var{octavespec}][!][?][@var{duration}]
@end example

The pitch of the note is specified by the note's name.


The default names are the Dutch note names.  The notes are specified
by the letters @code{c} through @code{b}, where @code{c} is an
octave below middle C and the letters span the octave above that C. 
In Dutch,
@cindex note names, Dutch
a sharp is formed by adding @code{-is} to the end of a pitch name.  A
flat is formed by adding @code{-es}. Double sharps and double flats are
obtained by adding @code{-isis} or @code{-eses}.  @code{aes} and
@code{ees} are contracted to @code{as} and @code{es} in Dutch, but both
forms will be accepted.

LilyPond has predefined sets of notenames for various other languages.
To use them, simply include the language specific init file.  For
example: @code{\include "english.ly"}.  The available language files and
the names they define are:

@example 
                        Note Names               sharp       flat
nederlands.ly  c   d   e   f   g   a   bes b   -is         -es
english.ly     c   d   e   f   g   a   bf  b   -s/-sharp   -f/-flat
deutsch.ly     c   d   e   f   g   a   b   h   -is         -es
norsk.ly       c   d   e   f   g   a   b   h   -iss/-is    -ess/-es
svenska.ly     c   d   e   f   g   a   b   h   -iss        -ess
italiano.ly    do  re  mi  fa  sol la  sib si  -d          -b
catalan.ly     do  re  mi  fa  sol la  sib si  -d/-s       -b 
@end example 
@cindex @code{'}
@cindex @code{,}

Pitch names can be redefined using the @code{\pitchnames} command, see
@ref{Pitch names}.




The optional octave specification takes the form of a series of
single quote (`@code{'}') characters or a series of comma
(`@code{,}') characters.  Each @code{'} raises the pitch by one
octave; each @code{,} lowers the pitch by an octave.

@lilypond[fragment,verbatim,center]
  c' d' e' f' g' a' b' c''
@end lilypond

@lilypond[fragment,verbatim,center]
  cis' dis' eis' fis' gis' ais' bis'
@end lilypond

@lilypond[fragment,verbatim,center]
  ces' des' es' fes' ges' as' bes'
@end lilypond

@lilypond[fragment,verbatim,center]
  cisis' eisis' gisis' aisis' beses'
@end lilypond

@lilypond[fragment,verbatim,center]
  ceses' eses' geses' ases' beses'
@end lilypond

LilyPond will determine what accidentals to typeset depending on the key
and context, so alteration refer to what note is heard, not to whether
accidentals are printed.  A reminder accidental
@cindex reminder accidental
@cindex @code{?}
can be forced by adding an exclamation mark @code{!} after the pitch.
A cautionary accidental,
@cindex cautionary accidental

i.e., an accidental within parentheses can be obtained by adding the
question mark `@code{?}' after the pitch.

@lilypond[fragment,verbatim,center]
  cis' d' e' cis'  c'? d' e' c'!
@end lilypond


@cindex duration

Durations are entered as their reciprocal values.  For notes longer
than a whole note, use identifiers.

@quotation

@example 
c'\longa c'\breve  
c'1 c'2 c'4 c'8 c'16 c'32 c'64 c'64 
r\longa r\breve  
r1 r2 r4 r8 r16 r32 r64 r64 
@end example 


@lilypond[]
\score {
  \notes \relative c'' {
    a\longa a\breve  \autoBeamOff
    a1 a2 a4 a8 a16 a32 a64 a64 
    r\longa r\breve  
    r1 r2 r4 r8 r16 r32 r64 r64 
  }
  \paper {
    \translator {
      \StaffContext
        \remove "Clef_engraver";
        \remove "Staff_symbol_engraver";
        \remove "Time_signature_engraver";
        \consists "Pitch_squash_engraver";
    }
  }
}
@end lilypond
@end quotation

As you  can see, the longa is not printed. To get a longa note head, you
have to use a different style of note heads. See [TODO].

@cindex @code{.}


If the duration is omitted then it is set equal to the previous duration
entered.  At the start of parsing there is no previous duration, so then
a quarter note is assumed.  The duration can be followed by a dot
(`@code{.}')  to obtain dotted note lengths.

Rests are entered like notes, with note name `@code{r}'.
There is also a note name
`@code{s}', which produces a space of the specified
duration.


@lilypond[fragment,verbatim,center]
  a'4. b'4.
@end lilypond
@cindex @code{r}
@cindex @code{s}

You can alter the length of duration by writing `@code{*}@var{fraction}'
after it.  This will not affect the appearance of note heads or rests.

@unnumberedsubsec Multi measure rests

@cindex @code{R}

Multi_measure_rest are entered using `@code{R}'. It is specifically
meant for entering parts: the rest can expand to fill a score with
rests, or it can be printed as a single multimeasure rest This expansion
is controlled by the property @code{Score.skipBars}. If this is set to true,
Lily will not expand empty measures, and the multimeasure rests
automatically adds the appropriate number.

@lilypond[fragment]
 \time 3/4; R2.*2 \property Score.skipBars = ##t R2.*17  R2.*4
@end lilypond

Note that there is currently no way to condense multiple rests into a
single multimeasure rest.


@unnumberedsubsec Lyrics
@cindex lyrics expressions

Syllables are entered like notes, with pitches replaced by text.  For
example, @code{Twin-4 kle4 twin-4 kle4} enters four syllables, each
with quarter note duration.  Note that the hyphen has no special
meaning for lyrics, and does not introduce special symbols.  See
section @ref{Lexical modes} for a description of what is interpreted as
lyrics.

Spaces can be introduced into a lyric either by using quotes
(@code{"}) or by using an underscore without quotes: @code{He_could4
not4}.  All unquoted underscores are converted to spaces.  Printing
lyrics is discussed in section @ref{lyricprint}.

[explain automatic phrasing]

@cindex properties
@unnumberedsubsec Translation property

@cindex @code{\property}
@example
  \property @var{contextname}.@var{propname} =  @var{value}
@end example

Sets the @var{propname} property of the context @var{contextname} to
the specified @var{value}.  All three arguments are strings. 
Depending on the context, it may be necessary to quote the strings or
to leave space on both sides of the dot.

@cindex translator switches
@unnumberedsubsec Translator switches

@cindex @code{\translator}
@example
  \translator @var{contexttype} = @var{name}
@end example

A music expression indicating that the context which is a direct
child of the a context of type @var{contexttype} should be shifted to
a context of type @var{contexttype} and the specified name.

Usually this is used to switch staffs in Piano music, e.g.

@example
  \translator Staff = top @var{Music}
@end example


@cindex output properties
@unnumberedsubsec Output properties

These allow you to tweak what is happening in the back-end
directly. If you want to control every detail of the output
formatting, this is the feature to use. The downside to this is that
you need to know exactly how the backend works. Example:


@lilypond[fragment,verbatim]
\relative c'' { c4
        \context Staff \outputproperty
        	#(make-type-checker 'note-head-interface)
        	#'extra-offset = #'(5.0 . 7.5)
<c8 e g> }
@end lilypond

This selects all note heads occurring at current staff level, and sets
the @code{extra-offset} of those heads to @code{(5,7.5)}, shifting them
up and right.

Use of this feature is entirely on your own risk: if you use this, the
result will depend very heavily on the implementation of the backend,
which we change regularly and unscrupulously.

@unnumberedsubsec Key signature
@cindex @code{\key}

@example
  @code{\key} @var{pitch} @var{type} @code{;}
@end example
@cindex @code{\minor}
@cindex @code{\major}
@cindex @code{\minor}
@cindex @code{\ionian}
@cindex @code{\locrian}
@cindex @code{\aeolian}
@cindex @code{\mixolydian}
@cindex @code{\lydian}
@cindex @code{\phrygian}
@cindex @code{\dorian}

Change the key signature.  @var{type} should be @code{\major} or
@code{\minor} to get @var{pitch}-major or @var{pitch}-minor,
respectively.  The second argument is optional; the default is major
keys.  The @var{\context} argument can also be given as an integer,
which tells the number of semitones that should be added to the pitch
given in the subsequent @code{\key} commands to get the corresponding
major key, e.g., @code{\minor} is defined as 3.  The standard mode names
@code{\ionian}, @code{\locrian}, @code{\aeolian}, @code{\mixolydian},
@code{\lydian}, @code{\phrygian}, and @code{\dorian} are also defined.

@unnumberedsubsec Rehearsal marks
@cindex rehearsal marks
@cindex mark
@cindex @code{\mark}
@example
  \mark @var{unsigned};
@cindex @code{Mark_engraver}
  \mark @var{string};
@end example

Prints a mark over or under the staff.  

@unnumberedsubsec barlines

@cindex @code{\bar}
@cindex measure lines
@cindex repeat bars

@example
  \bar @var{bartype};
@end example

This is a short-cut for doing
@example
  \property Score.whichBar = @var{bartype} 
@end example

You are encouraged to use @code{\repeat} for repetitions.  See
@ref{Repeats}, and the documentation of @code{whichBar} in
@ref{(lilypond-internals)LilyPond context properties}.

[FIXME]

@unnumberedsubsec Time signature
@cindex meter
@cindex time signature
@cindex @code{\time}
@example
  \time @var{numerator}@code{/}@var{denominator} @code{;}
@end example

A short-cut for doing
@example
     \property Score.timeSignatureFraction = #'(@var{numerator} . @var{denominator})
@end example

See the documentation of @code{timeSignatureFraction}

@unnumberedsubsec Tempo
@cindex beats per minute
@cindex metronome marking
@cindex @code{\tempo}
@example
  \tempo @var{duration} = @var{perminute} @code{;}
@end example

Used to specify the tempo.  For example, @code{\tempo 4 = 76;} requests
output with 76 quarter notes per minute.

@unnumberedsubsec Partial measures
@cindex anacrusis
@cindex upstep
@cindex partial measure
@cindex measure, partial
@cindex shorten measures
@cindex @code{\partial}
@example
  \partial @var{duration} @code{;}
@end example

Short cut for 

@example
  \property Score.measurePosition = @var{length of duration}
@end example
@cindex @code{|}

See the documentation of @code{measurePosition}.

@unnumberedsubsec Bar check

@cindex bar check
@cindex @code{barCheckNoSynchronize}
@cindex @code{|}


Bar checks help you find errors in the input: Whenever one is
encountered during interpretation, a warning message is issued if it
doesn't fall at a measure boundary.  Depending on the value of
@code{barCheckNoSynchronize},  the beginning of the measure will be
relocated, so this can also be used to shorten measures.

A bar check is entered using the bar symbol, @code{|}

This can help you finding errors in the input.

@unnumberedsubsec Line break penalty.
@cindex @code{\penalty}

@example
  \penalty @var{int} @code{;}
@end example

Discourage or encourage line breaks.  See @ref{Page layout}. 

@unnumberedsubsec Clef change
@cindex @code{\clef}
@example
  \clef @var{clefname} @code{;}
@end example

Short-cut for

@example
  \property Clef.clefGlyph = @var{symbol associated with clefname} 
  \property Clef.clefPosition = @var{clef Y-position for clefname}
  \property Clef.clefOctavation = @var{extra pitch of clefname}
@end example

Supported clef-names include 

[todo]

@unnumberedsubsec Skip
@example
  \skip @var{duration} @code{;}
@end example
@cindex @code{\skip}

Skips the amount of time specified by @var{duration}.  If no other
music is played, a gap will be left for the skipped time with no
notes printed.  It works in Note Mode or Lyrics Mode.  In Note mode,
this has the same effect as the spacer rest.


@node Manual beams
@unnumberedsubsec Manual beams

@cindex beams, manual
@cindex @code{]}
@cindex @code{[}

A beam is specified by surrounding the beamed notes with brackets
`@code{[}' and `@code{]}'.  

@lilypond[fragment,verbatim,center]
  [a'8 a'] [a'16 a' a' a']
  [a'16 <a' c''> c'' <a' c''>]
  \times 2/3 { [e'8 f' g'] }
@end lilypond

Beaming can be generated automatically; see section @ref{Automatic Beaming}.

@cindex @code{-}@code{-}

@unnumberedsubsec Lyric extender
@cindex extender
@cindex lyric extender
@cindex hyphen

The syntax for an extender mark is @code{__}.  This syntax can only
be used within lyrics mode.

@unnumberedsubsec Lyric hyphens

The syntax for a spanning hyphen (i.e., a hyphen that will be printed
between two lyric syllables) is `@code{-}@code{-}'.


@unnumberedsubsec Ties
@cindex ties
@cindex @code{~}

A tie connects two adjacent note heads of the same pitch.  When used
with chords, it connects all of the note heads whose pitches match.
Ties are indicated using the tilde symbol `@code{~}'.
If you try to tie together chords which have no common pitches, a
warning message will appear and no ties will be created.

@lilypond[fragment,verbatim,center]
  e' ~ e' <c' e' g'> ~ <c' e' g'>
@end lilypond

[sparseTies]

@unnumberedsubsec Articulation
@cindex articulations
@cindex scripts
@cindex ornaments

A variety of symbols can appear above and below notes to indicate
different characteristics of the performance.  These symbols can be
added to a note with `@var{note}@code{-\}@var{name}'.  Numerous symbols
are defined in @file{script.ly} and @file{script.scm}.  Symbols can be
forced to appear above or below the note by writing
`@var{note}@code{^\}@var{name}' and `@var{note}@code{_\}@var{name}'
respectively.  Here is a chart showing symbols above notes, with the
name of the corresponding symbol appearing underneath.

@lilypond[]

  \score {
    < \notes {
        \property Score.LyricSyllable \override #'font-family =
#'typewriter
        \property Score.LyricSyllable \override #'font-shape = #'upright
        c''-\accent      c''-\marcato      c''-\staccatissimo c''-\fermata 
        c''-\stopped     c''-\staccato     c''-\tenuto        c''-\upbow
        c''-\downbow     c''^\lheel        c''-\rheel         c''^\ltoe
        c''-\rtoe        c''-\turn         c''-\open          c''-\flageolet
        c''-\reverseturn c''-\trill        c''-\prall         c''-\mordent
        c''-\prallprall  c''-\prallmordent c''-\upprall       c''-\downprall
        c''-\thumb       c''-\segno        c''-\coda
      }
      \context Lyrics \lyrics {
        accent__      marcato__      staccatissimo__ fermata
        stopped__     staccato__     tenuto__        upbow
        downbow__     lheel__        rheel__         ltoe
        rtoe__        turn__         open__          flageolet
        reverseturn__ trill__        prall__         mordent
        prallprall__  prallmordent__ uprall__        downprall
        thumb__       segno__        coda
      }
    >
    \paper {
      linewidth = 5.875\in;          
      indent    = 0.0;
    }
  }

@end lilypond

@unnumberedsubsec Text scripts

In addition, it is possible to place arbitrary strings of text or
@TeX{} above or below notes by using a string instead of an
identifier: @code{c^"text"}.  Fingerings 
can be placed by simply using digits.  All of these note ornaments
appear in the printed output but have no effect on the MIDI rendering of
the music.

@cindex fingering

To save typing, fingering instructions (digits 0 to 9 are
supported) and single characters shorthands exist for a few
common symbols

@lilypond[]
  \score {
    \notes \context Voice {
      \property Voice.TextScript \set #'font-family = #'typewriter
      \property Voice.TextScript \set #'font-shape = #'upright
      c''4-._"c-."      s4
      c''4--_"c-{}-"    s4
      c''4-+_"c-+"      s4
      c''4-|_"c-|"      s4
      c''4->_"c->"      s4
      c''4-^_"c-\\^{ }" s4
      c''4-1_"c-1"      s4
      c''4-2_"c-2"      s4
      c''4-3_"c-3"      s4
      c''4-4_"c-4"      s4
    }
    \paper {
      linewidth = 5.875 \in;
      indent    = 0.0;
    }
  }

@end lilypond


@cindex @code{\textscript}

@example

  \textscript @var{text} @var{style}
@end example

Defines a text to be printed over or under a note.  @var{style} is a
string that may be one of @code{roman}, @code{italic}, @code{typewriter}, 
@code{bold}, @code{Large}, @code{large}, @code{dynamic} or @code{finger}.

You can attach a general textscript request using this syntax:

@quotation

@example 
c4-\textscript "6" "finger"
c4-\textscript "foo" "normal" 
@end example 

@end quotation

This is equivalent to @code{c4-6 c4-"foo"}.  

@cindex @code{\script}
@cindex scripts

@example

  \script @var{alias}
@end example
@cindex @code{\script}

Prints a symbol above or below a note.  The argument is a string which
points into the script-alias table defined in @file{scm/script.scm}, for
information on how to add scripts, read the comments in that file.
Usually the @code{\script} keyword is not used directly.  Various
helpful identifier definitions appear in @file{script.ly}.



@unnumberedsubsec Dynamics

@cindex @code{\ppp}
@cindex @code{\pp}
@cindex @code{\p}
@cindex @code{\mp}
@cindex @code{\mf}
@cindex @code{\f}
@cindex @code{\ff}
@cindex @code{\fff}
@cindex @code{\ffff}
@cindex @code{\fp}
@cindex @code{\sf}
@cindex @code{\sff}
@cindex @code{\sp}
@cindex @code{\spp}
@cindex @code{\sfz}
@cindex @code{\rfz}
@cindex crescendo
@cindex @code{\cr}
@cindex @code{\rc}
@cindex @code{\decr}
@cindex @code{\rced}
@cindex @code{\<}
@cindex @code{\>}
@cindex @code{\"!}

Dynamic marks are specified by using an identifier after a note:
@code{c4-\ff} (the dash is optional for dynamics: `@code{c4 \ff})'.  
The available dynamic marks are:
@code{\ppp},
@code{\pp}, @code{\p}, @code{\mp},
@code{\mf}, @code{\f}, @code{\ff},
@code{\fff}, @code{\fff},
@code{\fp}, @code{\sf},
@code{\sff}, @code{\sp},
@code{\spp}, @code{\sfz}, and
@code{\rfz}.


A crescendo mark is started with @code{\cr} and terminated with
@code{\rc}, the textual reverse of @code{cr}.  A decrescendo mark is
started with @code{\decr} and terminated with @code{\rced}.  There are
also shorthands for these marks.  A crescendo can be started with
@code{\<} and a decrescendo can be started with @code{\>}.  Either one
can be terminated with @code{\!}.  Note that @code{\!}  must go before
the last note of the dynamic mark whereas @code{\rc} and @code{\rced} go
after the last note.  Because these marks are bound to notes, if you
want to get several marks during one note, you must use spacer notes.

@lilypond[fragment,verbatim,center]
  c'' \< \! c''   d'' \decr e'' \rced 
  < f''1 { s4 \< \! s2 \> \! s4 } >
@end lilypond

[todo: text cr] 

@unnumberedsubsec Slurs
@cindex slur

Slurs connects chords and try to avoid crossing stems.  A slur is
started with @code{(} and stopped with @code{)}.  The
starting @code{(} appears to the right of the first note in
the slur.  The terminal @code{)} appears to the left of the
first note in the slur.  This makes it possible to put a note in
slurs from both sides:

@lilypond[fragment,verbatim,center]
  f'()g'()a' [a'8 b'(] a'4 g'2 )f'4
@end lilypond


@unnumberedsubsec Spanners
@cindex @code{\spanrequest}

@example
  \spanrequest @var{startstop} @var{type}
@end example
@cindex @code{\start}
@cindex @code{\stop}

Define a spanning request. The @var{startstop} parameter is either -1
(@code{\start}) or 1 (@code{\stop}) and @var{type} is a string that
describes what should be started.  Supported types are @code{crescendo},
@code{decrescendo}, @code{beam}, @code{slur}.  This is an internal
command.  Users should use the shorthands which are defined in the
initialization file @file{spanners.ly}.

You can attach a (general) span request to a note using

@lilypond[fragment,verbatim,center]
  c'4-\spanrequest \start "slur"
  c'4-\spanrequest \stop "slur"
@end lilypond

The slur syntax with parentheses is a shorthand for this.

@node Stem tremolo
@section Stem tremolo
@cindex tremolo marks
@cindex @code{tremoloFlags}

[FIXME: should be \repeat]

Tremolo marks can be printed on a single note by adding
`@code{:}[@var{length}]' after the note.  The length must be at
least 8.  A @var{length} value of 8 gives one line across
the note stem.  If the length is omitted, then the last value is
used, or the value of the @code{tremoloFlags} property if there was
no last value.

@lilypond[verbatim,fragment,center]
  c'2:8 c':32
@end lilypond

@section Arpeggio
@cindex argepeggio

@cindex broken arpeggio
@cindex @code{\arpeggio}

You can specify an @rgrob{Arpeggio} sign on a chord by issuing an
@c FIXME
@c @code{\arpeggio} request:
@code{\arpeggio} request:


@quotation
@lilypond[fragment,relative,verbatim]
  \context Voice <c'\arpeggio e g c>
@end lilypond
@end quotation

Typesetting of simultanious chords with arpeggios can be controlled with
the property @code{PianoStaff.connectArpeggios} @footnote{ FIXME:
connectArpeggios.  Can't find the English terms for two kinds of
arpeggio (Dutch: gebroken arpeggio vs doorlopend arpeggio).}  By
default, LilyPond prints broken arpeggios; when set to true, one
extended arpeggio sign is printed.

@quotation
@lilypond[fragment,relative,verbatim]
  \context PianoStaff <
    \property PianoStaff.connectArpeggios = ##t
    \context Staff \context Voice <c''\arpeggio e g c>
    \context Staff=other \context Voice <c,\arpeggio e g>
  >  
@end lilypond
@end quotation

@section Glissando
@cindex glissando
@cindex @code{\glissando}

A @rgrob{Glissando} line can be requested by issuing a
@c FIXME
@c @code{\glissando} request:
@code{\glissando} request:


@quotation
@lilypond[fragment,relative,verbatim]
  c'' \glissando c'
@end lilypond
@end quotation

Printing of the additional text @samp{gliss.} must be done manually.


@subsection Follow Thread
@cindex follow thread
@cindex staff switching
@cindex cross staff

@c Documented here because it looks like a glissando...
@cindex @code{followThread}
A glissando-like line can be printed to connect notes whenever a thread
switches to another staff.  This is enabled if the property
@code{PianoStaff.followThread} is set to true:

@quotation
@lilypond[fragment,relative,verbatim]
  \context PianoStaff <
    \property PianoStaff.followThread = ##t
    \context Staff \context Voice {
      c'1
      \translator Staff=two
      b2 a
    }
    \context Staff=two {\clef bass; \skip 1*2;}
  >  
@end lilypond
@end quotation

@node Compound music expressions
@section Compound music expressions

@cindex compound music expressions

Music expressions are compound data structures.  You can nest music
expressions any way you like.  This simple example shows how three
chords can be expressed in two different ways:

@lilypond[fragment,verbatim,center]
  \notes \context Staff {
    <a c'> <b  d' > <c' e'>
    < { a b  c' } { c' d' e' } >
  }

@end lilypond

@cindex @code{\context}
@cindex context selection

@example
  \context @var{contexttype} [= @var{contextname}] @var{musicexpr}
@end example

Interpret @var{musicexpr} within a context of type @var{contexttype}. 
If the context does not exist, it will be created.  The new context
can optionally be given a name.  

@cindex input modes

@cindex mode switch

@cindex @code{\notes}
@cindex @code{\chords}
@cindex @code{\lyrics}

Mode switching keywords form compound music expressions: @code{\notes}
@var{musicexpr}, @code{\chords}  @var{musicexpr},
and @code{\lyrics}  @var{musicexpr}.  These
expressions do not add anything to the meaning of their arguments.  They
are just a way to indicate that the arguments should be parsed in
indicated mode.  See @ref{Lexical modes} for more information on modes.

[to lexer modes?]

@unnumberedsubsec Sequential music
@cindex @code{\sequential}
@cindex sequential music

@example
  \sequential @code{@{} @var{musicexprlist} @code{@}}
@end example

This means that list should be played or written in sequence, i.e.,
the second after the first, the third after the second.  The duration
of sequential music is the the sum of the durations of the elements. 
There is a shorthand, which leaves out the keyword:

@example
@cindex @code{<}
@cindex @code{>}

  @code{@{} @var{musicexprlist} @code{@}}
@end example



@unnumberedsubsec Simultaneous music
@cindex simultaneous music
@cindex @code{\simultaneous}

@example
  \simultaneous @code{@{} @var{musicexprlist} @code{@}}
@end example

It constructs a music expression where all of its arguments start at
the same moment.  The duration is the maximum of the durations of the
elements.  The following shorthand is a common idiom:

@example
  @code{<} @var{musicexprlist} @code{>}
@end example

If you try to use a chord as the first thing in your score, you might
get multiple staffs instead of a chord.

@lilypond[verbatim,center]
  \score {
    \notes <c''4 e''>
    \paper {
      linewidth = -1.;
    }
  }
@end lilypond

This happens because the chord is interpreted by a score context.
Each time a note is encountered a default Voice context (along with a
Staff context) is created.  The solution is to explicitly instantiate
a Voice context:

@lilypond[verbatim,center]
  \score {
    \notes\context Voice <c''4 e''>
    \paper {
      linewidth = -1.;
    }
  }
@end lilypond




@node Relative octaves
@section Relative octaves
@cindex relative octave specification

It is easy to get confused by octave changing marks and accidentally
putting a pitch in the wrong octave.  A much better way of entering a
note's octave is `the relative octave' mode.

@cindex @code{\relative}
@example
  \relative @var{startpitch} @var{musicexpr}
@end example

The octave of notes that appear in @var{musicexpr} are calculated as
follows: If no octave changing marks are used, the basic interval
between this and the last note is always taken to be a fourth or
less.@footnote{The interval is determined without regarding
accidentals.  A @code{fisis} following a @code{ceses} will be put above
the @code{ceses}.}  The octave changing marks @code{'} and @code{,}
can then be added to raise or lower the pitch by an extra octave. 
Upon entering relative mode, an absolute starting pitch must be
specified that will act as the predecessor of the first note of
@var{musicexpr}.

Entering scales is straightforward in relative mode.

@lilypond[fragment,verbatim,center]
  \relative c' {
    c d e f g a b c c,
  }
@end lilypond

And octave changing marks are used for intervals greater than a fourth.

@lilypond[fragment,verbatim,center]
  \relative c'' {
    c g c f, c' a, e'' }
@end lilypond

If the preceding item is a chord, the first note of the chord is used
to determine the first note of the next chord.  But other notes
within the second chord are determined by looking at the immediately
preceding note.

@lilypond[fragment,verbatim,center]
  \relative c' {
    c <c e g> 
    <c' e g>
    <c, e' g>
  }
@end lilypond 
@cindex @code{\notes}

The pitch after the @code{\relative} contains a notename.  To parse
the pitch as a notename, you have to be in note mode, so there must
be a surrounding @code{\notes} keyword (which is not
shown here).

The relative conversion will not affect @code{\transpose} or
@code{\relative} sections in its argument.  If you want to use
relative within transposed music, you must place an additional
@code{\relative} inside the @code{\transpose}.

It is strongly recommended to use relative pitch mode: less work,
less error-prone, and more readable.

@node Entering named chords
@unnumberedsubsec named chords

Chord names are a way to generate simultaneous music expressions that
correspond with traditional chord names.  It can only be used in
Chord mode (see section @ref{Lexical modes}).

@example

  @var{tonic}[@var{duration}][@code{-}@var{modifiers}][@code{^}@var{subtractions}][@code{/}@var{inversion}][@code{/+}@var{bass}].
@end example

@var{tonic} should be the tonic note of the chord, and @var{duration}
is the chord duration in the usual notation.  There are two kinds of
modifiers.  One type is @emph{chord additions}, which are obtained by
listing intervals separated by dots.  An interval is written by its
number with an optional @code{+} or @code{-} to indicate raising or
lowering by half a step.  Chord additions has two effects: It adds
the specified interval and all lower odd numbered intervals to the
chord, and it may lower or raise the specified interval.  Intervals
must be separated by a dot (@code{.}).


Throughout these examples, chords have been shifted around the staff
using @code{\transpose}.


@quotation

@lilypond[fragment,verbatim]
\transpose c'' {
  \chords {
    c1  c:3-       c:7     c:8
    c:9 c:9-.5+.7+ c:3-.5- c:4.6.8
  }
}

@end lilypond
@end quotation

@cindex @code{aug}
@cindex @code{dim}
@cindex @code{maj}
@cindex @code{sus}

The second type of modifier that may appear after the @code{:} is a
named modifier.  Named modifiers are listed in the file
@file{chord-modifiers.ly}.  The available modifiers are @code{m} and
@code{min} which lower the 3rd half a step, `@code{aug}' which
raises the 5th, `@code{dim}' which lowers the 5th,
`@code{maj}' which adds a raised 7th, and `@code{sus}'
which replaces the 5th with a 4th.

@quotation

@lilypond[fragment,verbatim]
\transpose c'' {
  \chords {
    c1:m c:min7 c:maj c:aug c:dim c:sus
  }
}

@end lilypond
@end quotation
 

Chord subtractions are used to eliminate notes from a chord.  The
notes to be subtracted are listed after a @code{^} character,
separated by dots.

@lilypond[fragment,verbatim,center]
  \transpose c'' {
    \chords {
      c1^3 c:7^5.3 c:8^7
    }
  }
@end lilypond 
@cindex @code{/}

Chord inversions can be specified by appending `@code{/}' and
the name of a single note to a chord.  This has the effect of
lowering the specified note by an octave so it becomes the lowest
note in the chord.  If the specified note is not in the chord, a
warning will be printed.

@lilypond[fragment,verbatim,center]
  \transpose c''' {
    \chords {
      c1 c/e c/g c:7/e
    }
  }

@end lilypond 
@cindex @code{/+}

Bass notes can be added by `@code{/+}' and
the name of a single note to a chord.  This has the effect of
adding the specified note to the chord, lowered by an octave,
so it becomes the lowest note in the chord.

@lilypond[fragment,verbatim,center]
  \transpose c''' {
    \chords {
      c1 c/+c c/+g c:7/+b
    }
  }

@end lilypond 

The most interesting application is printing  chords using chord names,
See @ref{Chord names}.

You should not combine @code{\relative} with named chords. [FIXME]


@unnumberedsubsec Tuplets
@cindex tuplets

Tuplets are made out of a music expression by multiplying their
duration with a fraction.

@cindex @code{\times}
@example
  \times @var{fraction} @var{musicexpr}
@end example

The duration of @var{musicexpr} will be multiplied by the fraction. 
In print, the fraction's denominator will be printed over the notes,
optionally with a bracket.  The most common tuplet is the triplet in
which 3 notes have the length of 2, so the notes are 2/3 of
their written length:

@lilypond[fragment,verbatim,center]
  g'4 \times 2/3 {c'4 c' c'} d'4 d'4
@end lilypond
@cindex @code{\grace}


@unnumberedsubsec Grace notes

@cindex ornaments
@cindex grace notes
@cindex @code{graceAlignPosition}

@example
  \grace @var{musicexpr}
@end example

A grace note expression has duration 0; the next real note is
assumed to be the main note.

You cannot have the grace note after the main note, in terms of
duration, and main notes, but you can typeset the grace notes to the
right of the main note using the property
@code{graceAlignPosition}.
@cindex @code{flagStyle}

When grace music is interpreted, a score-within-a-score is set up:
@var{musicexpr} has its own time bookkeeping, and you could (for
example) have a separate time signature within grace notes.  While in
this score-within-a-score, you can create notes, beams, slurs, etc.
Unbeamed eighth notes and shorter by default have a slash through the
stem.  This behavior can be controlled with the
@code{flagStyle} property.

@quotation
@lilypond[fragment,verbatim]
\relative c'' {
  \grace c8 c4 \grace { [c16 c16] } c4
  \grace { \property Grace.flagStyle = "" c16 } c4
}

@end lilypond
@end quotation
@cindex @code{\grace}

At present, nesting @code{\grace} notes is not supported. The following
may cause run-time errors:
@example
  @code{\grace @{ \grace c32 c16 @} c4}
@end example
Since the meaning of such a construct is unclear, we don't consider
this a loss.  Similarly, juxtaposing two @code{\grace} sections is
syntactically valid, but makes no sense and may cause runtime errors.

Ending a staff or score with grace notes may also generate a run-time
error, since there will be no main note to attach the grace notes to.

The present implementation is not robust and generally kludgy. We expect
it to change after LilyPond 1.4


@node Repeats
@section Repeats
@cindex repeats

@cindex @code{\repeat}

In order to specify repeats, use the @code{\repeat}
keyword.  Since repeats look and sound differently when played or
printed, there are a few different variants of repeats.

@table @asis
@item unfolded  
Repeated music is fully written (played) out.  Useful for MIDI
output.

@item volta  
This is the normal notation: Repeats are not written out, but
alternative endings (voltas) are printed, left to right.

@item folded  
Alternative endings are written stacked.  Which is unfortunately not
practical for anything right now.

@item tremolo
Make tremolo beams.
@end table  

The syntax for repeats is

@example
  \repeat @var{variant} @var{repeatcount} @var{repeatbody}
@end example

If you have alternative endings, you may add

@cindex @code{\alternative}
@example
 \alternative @code{@{} @var{alternative1}
            @var{alternative2}
            @var{alternative3} @dots{} @code{@}}
@end example

where each @var{alternative} is a Music expression.

Normal notation repeats are used like this:

@quotation

@lilypond[fragment,verbatim]
  c'1
  \repeat volta 2 { c'4 d' e' f' }
  \repeat volta 2 { f' e' d' c' }

@end lilypond
@end quotation

With alternative endings:

@quotation

@lilypond[fragment,verbatim]
  c'1
  \repeat volta 2 {c'4 d' e' f'} 
  \alternative { {d'2 d'} {f' f} }

@end lilypond
@end quotation

Folded repeats look like this:@footnote{Folded repeats offer little
more over simultaneous music.  However, it is to be expected that
more functionality -- especially for the MIDI backend -- will be
implemented.}

@quotation

@lilypond[fragment,verbatim]
  c'1
  \repeat fold 2 {c'4 d' e' f'} 
  \alternative { {d'2 d'} {f' f} }

@end lilypond
@end quotation

@quotation

@lilypond[fragment,verbatim]
\context Staff {
  \relative c' {
    \partial 4;
    \repeat volta 2 { e | c2 d2 | e2 f2 | }
    \alternative { { g4 g g } { a | a a a a | b1 } }
  }
}

@end lilypond
@end quotation

If you don't give enough alternatives for all of the repeats, then
the first alternative is assumed to be repeated often enough to equal
the specified number of repeats.

@quotation
@lilypond[fragment,verbatim]
\context Staff {
  \relative c' {
    \repeat volta 3 { \partial 4; e | c2 d2 | e2 f2 | }
    \alternative { { g4 g g }
                   {\partial 1; e4 e e } 
                   {\partial 1; a a a a | b1 } }
  }
}
@end lilypond
@end quotation

As you can see, LilyPond doesn't remember the timing information, nor
are slurs or ties repeated. We hope to fix this after 1.4. 

It is possible to nest @code{\repeat}.  This is not entirely
supported: the notes will come be in the right places, but the repeat
bars will not.

To place tremolo marks between notes, use @code{\repeat} with tremolo
style.
@cindex tremolo beams
To create tremolo beams on a single note, simply attach
`@code{:}@var{length}' to the note itself.

@lilypond[fragment,verbatim,center]
  \repeat "tremolo" 8 { c16 d16 }
  \repeat "tremolo" 4 { c16 d16 }    
@end lilypond
@cindex @code{__}

@lilypond[fragment,verbatim,center]

  c'4:32
@end lilypond





@node transpose
@section Transposition
@cindex transposition of pitches
@cindex @code{\transpose}

A music expression can be transposed with @code{\transpose}.  The syntax
is
@example
  \transpose @var{pitch} @var{musicexpr}
@end example

This means that middle C in @var{musicexpr} is transposed to
@var{pitch}.

@code{\transpose} distinguishes between enharmonic pitches: both
@code{\transpose cis'} or @code{\transpose des'} will transpose up half
a tone.  The first version will print sharps and the second version
will print flats.

@quotation
@lilypond[fragment,verbatim]
\context Staff {
  \clef "F";
  { \key e \major; c d e f }
  \clef "G";
  \transpose des'' { \key e \major; c d e f }
  \transpose cis'' { \key e \major; c d e f }
}

@end lilypond
@end quotation

If you want to use both @code{\transpose} and @code{\relative}, then
you must use @code{\transpose} first.  @code{\relative} will have no
effect music that appears inside a @code{\transpose}.

@unnumberedsubsec Adding melodies to lyrics 
@cindex automatic lyric durations
@cindex @code{\addlyrics}

If you have lyrics that are set to a melody, you can import the rhythm
of that melody into the lyrics using @code{\addlyrics}.  The syntax for
this is
@example
  \addlyrics @var{musicexpr1 musicexpr2}
@end example

This means that both @var{musicexpr1} and @var{musicexpr2} are
interpreted, but that every non-command atomic music expression
(``every syllable'') in @var{musicexpr2} is interpreted using timing
of @var{musicexpr1}.
@cindex @code{automaticMelismata}

If the property @code{automaticMelismata} is set in the
context of @var{musicexpr1}, no lyrics will be put on slurred or tied
notes.

@quotation
@lilypond[verbatim,fragment]
\addlyrics
\transpose c'' {
  \property Voice.automaticMelismata = ##t
  c8 () cis d8. e16 f2
}
\context Lyrics \lyrics {
 do4 re mi fa }
@end lilypond
@end quotation

You should use a single rhythm melody, and single rhythm lyrics (a
constant duration is the obvious choice).  If you do not, you will get
undesired effects when using multiple stanzas:

@quotation
@lilypond[verbatim,fragment]
\addlyrics
\transpose c'' {
  c8 () cis d8. e16 f2
}
\context Lyrics \lyrics
< { do4 re mi fa }
  { do8 re mi fa } >

@end lilypond
@end quotation

It is valid (but probably not very useful) to use notes instead of
lyrics for @var{musicexpr2}.

@node Transforming music 
@unnumberedsubsec Apply
@unnumberedsubsec Transforming music

Apply allows a Scheme-function to operate directly on the internal
representation of music.
@example
        \apply #@var{func} @var{music}
@end example
The function takes two arguments, being a function and an musical
argument for that function. The function should return a music
expression.

This example replaces the text string of a script. It also shows a dump
of the music it processes.
@lilypond[verbatim]
#(define (testfunc x)
        (if (eq? (ly-get-mus-property x 'text) "foo")
                (ly-set-mus-property x 'text "bar"))
        ;; recurse
        (ly-set-mus-property x 'elements
          (map testfunc (ly-get-mus-property x 'elements)))
        (display x)
        x        
)
\score { \notes
  \apply #testfunc { c4_"foo" }
} 
@end lilypond

For more information on what is possible, see the @ref{Tricks} and the
automatically generated documentation.


@node Ambiguities
@section Ambiguities
@cindex ambiguities
@cindex grammar


The grammar contains a number of ambiguities. We hope to resolve them at
some time.

@itemize @bullet
  @item  The assignment

         @example 
foo = bar 
@end example 

       can be interpreted as making a string identifier @code{\foo}
       containing @code{"bar"}, or a music identifier @code{\foo}
       containing the syllable `bar'.

  @item  The assignment

         @example 
foo = -6 
@end example 

       can be interpreted as making an integer identifier
       containing -6, or a Request identifier containing the
       fingering `6' (with neutral direction).

  @item  If you do a nested repeat like

       @quotation

@example 
\repeat @dots{}
\repeat @dots{}
\alternative 
@end example 

       @end quotation

       then it is ambiguous to which @code{\repeat} the
       @code{\alternative} belongs.  This is the classic if-then-else
       dilemma.  It may be solved by using braces.

  @item  (an as yet unidentified ambiguity :-)
@end itemize



@node Automatic Beaming
@section Automatic Beaming
@cindex automatic beam generation
@cindex autobeam

@cindex @code{Voice.noAutoBeaming}

By default, LilyPond will generate beams automatically.  This feature
can be disabled by setting the @code{Voice.noAutoBeaming} property to
true.  It can be overridden for specific cases by specifying explicit
beams.

@cindex @code{Voice.autoBeamSettings}
@cindex @code{(end * * * *)}
@cindex @code{(begin * * * *)}

A large number of Voice properties are used to decide how to generate
beams.  Their default values appear in @file{scm/auto-beam.scm}.  In
general, beams can begin anywhere, but their ending location is
significant.  Beams can end on a beat, or at durations specified by the
properties in
@code{Voice.autoBeamSettings}.
To end beams every quarter note, for example, you could set the property
@code{(end * * * *)}  to @code{(make-moment 1
4)}.  To end beams at every three eighth notes you would set
it to @code{(make-moment 1 8)}.
The same syntax can be used to specify beam
starting points using
@code{(begin * * * *)}, eg:
@quotation
@example
\property Voice.autoBeamSettings \override
    #'(end * * * *) = #(make-moment 1 4)
\property Voice.autoBeamSettings \override
    #'(begin * * * *) = #(make-moment 1 8)
@end example
@end quotation

To allow different settings for different time signatures, instead of
the first two asterisks @code{* *} you can specify a time signature; use
@code{(end N M * *)} to restrict the definition to
`@var{N}@code{/}@var{M}' time.  For example, to specify beams ending
only for 6/8 time you would use the property @code{(end 6 8 * *)}.

To allow different endings for notes of different durations, instead of
th last two asterisks you can specify a duration; use @code{(end * * N
M)} to restrict the definition to beams that contain notes of
`@var{N}@code{/}@var{M}' duration.

For example, to specify beam endings for beams that contain 32nd notes,
you would use @code{(end * * 1 32)}.


@node Printing named chords
@section Printing named chords
@cindex chord names
@cindex chords

@cindex printing!chord names
@cindex @code{ChordNames}
@cindex @code{ChordNameVoice}

For displaying printed chord names, use the @code{ChordNames} and
@code{ChordNameVoice} contexts.  The chords may be entered either using
the notation described above, or directly using simultaneous music.

@quotation
@lilypond[verbatim]
scheme = \notes {
  \chords {a1 b c} <d f g>  <e g b>
}
\score {
  \notes<
    \context ChordNamesVoice \scheme
    \context Staff \transpose c'' \scheme
  >
  \paper { linewidth = -1.; }
}
@end lilypond
@end quotation

You can make the chord changes stand out more by setting property
@code{ChordNames.chordChanges} to true.  This will only display chord
names when there's a change in the chords scheme, but always display the
chord name after a line break:

@c bug
@quotation
@lilypond[verbatim]
scheme = \chords {
  c1:m \break c:m c:m c:m d
}

\score {
  \notes <
    \context ChordNames \scheme
    \context Staff \transpose c'' \scheme
  >
  \paper{
    linewidth = 40 * \staffspace;
    \translator {
      \ChordNamesContext
      chordChanges = ##t
    }
  }
}
@end lilypond
@end quotation



LilyPond examines chords specified as lists of notes to determine a
name to give the chord. LilyPond will not try to
identify chord inversions or added base, which may result in strange
chord names when chords are entered as a list of pitches:

@quotation
@lilypond[verbatim,center]
scheme = \notes {
  <c'1 e' g'>
  <e' g' c''>
  <e e' g' c''>
}

\score {
  <
    \context ChordNamesVoice \scheme
    \context Staff \scheme
  >
  \paper { linewidth = -1.; }
}
@end lilypond
@end quotation

To specify chord inversions, append @code{/<notename>}.  To specify an
added bass note, append @code{/+<notename}:

@quotation
@lilypond[verbatim,center]
scheme = \chords {
  d1 d/a d/+gis
}

\score {
  \notes <
    \context ChordNames \scheme
    \context Staff \transpose c'' \scheme
  >
  \paper { linewidth = -1.; }
}
@end lilypond
@end quotation

The chord names that LilyPond should print are fully customizable.  The
code to print chord names is written in Scheme. It can be found in
@file{scm/chord-name.scm}.  Chord names are based on Banter style
naming, which is unambiguous and has a logical structure.  Typical
American style chord names are implemented as a variation on Banter
names, they can be selected by setting property @code{ChordName.style}
to @code{american}:

@quotation
@lilypond[verbatim]
\include "english.ly"

scheme = \chords {
  c         % Major triad
  cs:m      % Minor triad
  df:m5-    % Diminished triad
  c:5^3     % Root-fifth chord
  c:4^3     % Suspended fourth triad
  c:5+      % Augmented triad
  c:2^3     % "2" chord
  c:m5-.7-  % Diminished seventh
  c:7+      % Major seventh
  c:7.4^3   % Dominant seventh suspended fourth
  c:5+.7    % Augmented dominant seventh
  c:m5-.7   % "Half" diminished seventh
  c:5-.7    % Dominant seventh flat fifth
  c:5-.7+   % Major seventh flat fifth
  c:m7+     % Minor-major seventh
  c:m7      % Minor seventh
  c:7       % Dominant seventh
  c:6       % Major sixth
  c:m6      % Minor sixth
  c:9^7     % Major triad w/added ninth
  c:6.9^7   % Six/Nine chord
  c:9       % Dominant ninth 
  c:7+.9    % Major ninth
  c:m7.9    % Minor ninth
}

\score {
  \notes <
    \context ChordNames \scheme
    \context Staff \transpose c'' \scheme
  >
  \paper {
    \translator { 
      \ChordNamesContext
      ChordName \override #'word-space = #1 
      ChordName \override #'style = #'american
    }
  }
}
@end lilypond
@end quotation

Similarly, Jazz style chord names are implemented as a variation on
American style names:
@quotation
@lilypond[verbatim]
scheme = \chords {
  % major chords
  c
  c:6		% 6 = major triad with added sixth
  c:maj		% triangle = maj
  c:6.9^7	% 6/9 
  c:9^7		% add9

  % minor chords
  c:m		% m = minor triad
  c:m.6		% m6 = minor triad with added sixth
  c:m.7+	% m triangle = minor major seventh chord
  c:3-.6.9^7	% m6/9 
  c:m.7		% m7
  c:3-.9	% m9
  c:3-.9^7	% madd9

  % dominant chords
  c:7		% 7 = dominant
  c:7.5+	% +7 = augmented dominant
  c:7.5-	% 7b5 = hard diminished dominant
  c:9		% 7(9)
  c:9-		% 7(b9)
  c:9+		% 7(#9)
  c:13^9.11 	% 7(13)
  c:13-^9.11 	% 7(b13)
  c:13^11	% 7(9,13)
  c:13.9-^11	% 7(b9,13)
  c:13.9+^11	% 7(#9,13)
  c:13-^11	% 7(9,b13)
  c:13-.9-^11	% 7(b9,b13)
  c:13-.9+^11	% 7(#9,b13)

  % half diminished chords
  c:m5-.7		% slashed o = m7b5
  c:9.3-.5-	% o/7(pure 9)

  % diminished chords
  c:m5-.7-	% o = diminished seventh chord
}

\score {
  \notes <
    \context ChordNames \scheme
    \context Staff \transpose c'' \scheme
  >
  \paper {
    \translator { 
      \ChordNamesContext
      ChordName \override #'word-space = #1 
      ChordName \override #'style = #'jazz
    }
  }
}
@end lilypond
@end quotation


@node Printing lyrics
@section lyricprint
@cindex lyrics

@cindex printing!lyrics


Lyric syllables must be interpreted within a @code{Lyrics} context

@cindex context!Lyrics
 for printing them.

Here is a full example: 

@quotation
@lilypond[verbatim]
\score {
  <
    \notes \transpose c'' {
      c d e c | c d e c |
      e f g2 | e4 f g2 \bar "|.";
    }
    \context Lyrics \lyrics { 
      Va-4 der Ja- cob Va- der Ja- cob
      Slaapt gij nog?2 Slaapt4 gij nog?2
    }
  >
}

@end lilypond
@end quotation

You may want a continuous line after the syllables to show melismata. 
To achieve this effect, add a @code{__} lyric as a separate word
after the lyric to be extended.  This will create an extender, a line
that extends over the entire duration of the lyric.  This line will
run all the way to the start of the next lyric, so you may want to
shorten it by using a blank lyric (using @code{_}).

@quotation

@lilypond[verbatim]
\score {
  <
    \notes \relative c'' {
      a4 () b () c () d | c () d () b () a | c () d () b () a
    }
    \context Lyrics \lyrics {
      foo1 __ | bar2. __ _4 | baz1 __
    }
  >
}

@end lilypond
@end quotation

     
If you want to have hyphens centered between syllables (rather than
attached to the end of the first syllable) you can use the special
`@code{-}@code{-}' lyric as a separate word between syllables.  This
will result in a hyphen which length varies depending on the space
between syllables, and which will be centered between the syllables. 
For example:

@quotation

@lilypond[verbatim]
\score {
  <
    \notes \transpose c'' {
      c d e c | c d e c |
      e f g2 | e4 f g2 \bar "|.";
    }
    \context Lyrics \lyrics {
      Va4 -- der Ja -- cob | Va -- der Ja -- cob |
      Slaapt gij nog?2 | Slaapt4 gij nog?2
    }
  >
}

@end lilypond
@end quotation



@node Notation Contexts
@section Notation Contexts

@cindex notation contexts

Notation contexts are objects that only exist during a run of
LilyPond.  During the interpretation phase of LilyPond, the Music
expression contained in a @code{\score} block is interpreted in time
order.  This is the order in which humans read, play, and write
music.

A context is an object that holds the reading state of the
expression; it contains information like

@itemize @bullet
  @item What notes are playing at this point?
  @item What symbols will be printed at this point?
  @item In what style will they printed?
  @item What is the current key signature, time signature, point within
       the measure, etc.?
@end itemize

Contexts are grouped hierarchically: A @code{Voice} context is
contained in a @code{Staff} context (because a staff can contain
multiple voices at any point), a @code{Staff} context is contained in
a @code{Score}, @code{StaffGroup}, or @code{ChoirStaff} context (because
these can all contain multiple staffs).

Contexts associated with sheet music output are called @emph{notation
contexts}, those for sound output are called performance contexts.

Contexts are created either manually or automatically.  Initially, the
top level music expression is interpreted by the top level context (the
@code{Score} context).  When a atomic music expression (i.e. a note, a
rest, etc.), a nested set of contexts is created that can process these
atomic expressions, as in this example:

@example
\score @{ \notes @{ c4 @} @} 
@end example 

The sequential music, `@code{@{ c4 @}}' is interpreted by @code{Score}
context. When the note @code{c4} itself is interpreted, a set of
contexts is needed that will accept notes.  The default for this is a
@code{Voice} context, contained in a @code{Staff} context.  Creation of
these contexts results in the staff being printed.

@cindex context

You can also create contexts manually, and you probably have to do so
if you want to typeset complicated multiple part material.  If a
`@code{\context} @var{name} @var{musicexpr}' expression is encountered
during the interpretation phase, the @var{musicexpr} argument will be
interpreted with a context of type @var{name}.  If you specify a name,
the specific context with that name is searched.

[type vs id]

If a context of the specified type and name can not be found, a new
one is created.  For example,

@quotation

@lilypond[verbatim]
\score {
  \notes \relative c'' {
    c4 <d4 \context Staff = "another" e4> f
  }
}

@end lilypond
@end quotation

In this example, the @code{c} and @code{d} are printed on the
default staff.  For the @code{e}, a context Staff called
@code{another} is specified; since that does not exist, a new
context is created.  Within @code{another}, a (default) Voice context
is created for the @code{e4}.  When all music referring to a
context is finished, the context is ended as well.  So after the
third quarter, @code{another} is removed.

Almost all music expressions inherit their interpretation context
from their parent.  In other words, suppose that the syntax for a
music expression is

@example

  \keyword @var{musicexpr1} @var{musicexpr2} @dots{}
@end example

When the interpretation of this music expression starts, the context
for @var{musicexpr1}, @var{musicexpr2}, etc. is that of the total
expression.

Lastly, you may wonder, why this:

@quotation

@example 
\score @{
  \notes \relative c'' @{
    c4 d4 e4
  @}
@} 
@end example 

@end quotation

doesn't result in this:

@lilypond[]

  \score {
    \notes \relative c'' {
      <c4> <d4> <e4>
    }
  }

@end lilypond

For the @code{c4}, a default @code{Staff} (with a contained
@code{Voice}) context is created.  After the @code{c4} ends, no
music refers to this default staff, so it would be ended, with the
result shown.  To prevent this inconvenient behavior, the context to
which the sequential music refers is adjusted during the
interpretation.  So after the @code{c4} ends, the context of the
sequential music is also the default @code{Voice} context. 
The @code{d4} gets interpreted in the same context
as @code{c4}.

Properties that are set in one context are inherited by all of the
contained contexts.  This means that a property valid for the
@code{Voice} context can be set in the @code{Score} context (for
example) and thus take effect in all @code{Voice} contexts.

Properties can be preset within the @code{\translator} block
corresponding to the appropriate context.  In this case, the syntax
is

@example
  @var{propname} @code{=} @var{value}
@end example

This assignment happens before interpretation starts, so a
@code{\property} expression will override any predefined settings.

The property settings are used during the interpretation phase.  They
are read by the LilyPond modules where interpretation contexts are
built of.  These modules are called @emph{translators}.  Translators for
notation are called @emph{engravers}, and translators for sound are
called @emph{performers}.


@mbinclude properties.itely

@node Page layout
@section Page layout

@subsection Paper block

The most important output definition is the @code{\paper} block, for
music notation.  The syntax is

@example
  @code{\paper @{} [@var{paperidentifier}] @var{items} @code{@}}
@end example

where each of the items is one of

@itemize @bullet
  @item  An assignment.  The assignment must be terminated by a
       semicolon.  

  @item  A context definition.  See section @ref{contextdefs} for
       more information on context definitions.

@ignore

                FIXME


  @item
        
        A margin shape declaration.  The syntax is
@cindex @code{\shape}
       @example

         \shape @var{indent1}@code{,} @var{width1}@code{,}
                      @var{indent2}@code{,} @var{width2} @dots{} @code{;}
         @end example

       

       Each pair of @var{indent} and @var{width} values is a dimension
       specifying how far to indent and how wide to make the line. 
       The indentation and width of successive lines are specified by
       the successive pairs of dimensions.  The last pair of
       dimensions will define the characeristics of all lines beyond
       those explicitly specified.
@end ignore

  @item  \stylesheet  declaration.  Its syntax is
       @example
        	\stylesheet @var{alist}
       @end example

        See @file{font.scm} for details of @var{alist}.
@end itemize


@subsection Paper variables 

The paper block has some variables you may want to use or change:

@table @code
@cindex @code{indent}
  @item @code{indent}  
    The indentation of the first line of music.
@cindex @code{staffspace}

  @item @code{staffspace}
    The distance between two staff lines, calculated from the center
    of the lines.  You should use either this or @code{rulethickness}
    as a unit for distances you modify.
  
@cindex @code{linewidth}
  @item @code{linewidth}  
    Sets the width of the lines.  If set to -1.0, a single
    unjustified line is produced.  If you use this variable, you
    probably want to define it in staff spaces, ie
    @example
        linewidth = 30 * \staffspace;
    @end example
@cindex @code{textheight}

  @item @code{textheight}  
    Sets the total height of the music on each page. Only used by
    ly2dvi.
@cindex @code{interscoreline}

  @item @code{interscoreline}  
    Sets the spacing between the score lines. Defaults to 16 pt.
@cindex @code{interscorelinefill}

  @item @code{interscorelinefill}  
    If set to a positive number, the distance between the score 
    lines will stretch in order to fill the full page. In that
    case @code{interscoreline} specifies the minimum spacing.
    Defaults to 0.
@cindex @code{stafflinethickness}

  @item @code{stafflinethickness}  
    Determines the thickness of staff lines, and also acts as a scaling
    parameter for other line thicknesses.
@end table


@subsection Line breaks

@cindex line breaks
@cindex breaking lines

Line breaks are normally computed automatically. They are chosen such
that the resulting spacing has low variation, and looks neither cramped
nor loose.

Occasionally you might want to override the automatic breaks; you can do
this by specifying @code{\break} (see also @ref{Pre-defined
Identifiers}). This will force a line break at this point. Do remember
that line breaks can only occur at places where there are barlines.  If
you want to have a line break where there is no barline, you can force a
barline by entering @code{\bar "";}.


@subsection Page breaks

Page breaks are normally computed by @TeX{}, so they are not under direct
control.  However, you can insert a commands into the .tex output to
instruct @TeX{} where to break pages. For more details, see  the
example file @file{input/test/between-systems.ly}


@cindex page breaks
@cindex breaking pages


@subsection Font size

@cindex font size

The Feta font provides musical symbols at six different sizes.  These
fonts are 11 point, 13 point, 16 point, 20 point,
23 point, and 26 point.  The point size of a font is the
height of the five lines in a staff when displayed in the font.

Definitions for these sizes are the files @file{paperSZ.ly}, where
@code{SZ} is one of 11, 13, 16, 20, 23 and 26.  If you include any of
these files, the identifiers @code{paperEleven}, @code{paperThirteen},
@code{paperSixteen}, @code{paperTwenty}, @code{paperTwentythree}, and
@code{paperTwentysix} are defined respectively.  The default
@code{\paper} block is also set.

The font definitions are generated using a Scheme function. For more
details, see the file @file{font.scm}.

@subsection Paper size

@cindex paper size
@cindex page size
@cindex @code{papersize}

To change the paper size, you must first set the
@code{papersize} variable at top level.  Set it to
the strings @code{a4}, @code{letter}, or @code{legal}.  After this
specification, you must set the font as described above.  If you want
the default font, then use the 20 point font.  The new paper size will
not take effect if the font is not loaded and selected afterwards.

@example
        papersize = "a4"
        \include "paper16.ly"

        \score @{
                ...
                \paper @{ \paperSixteen @}
        @}
@end example

The file "paper16.ly" will now include a file named @file{a4.ly}, which
will set the paper variables @code{hsize} and @code{vsize} (used by
@code{ly2dvi})

@node Context definitions
@section Context definitions

@cindex context definition
@cindex translator definition
@cindex engraver hacking


A notation contexts is defined by the following information

@enumerate 1
  @item  A name.

  @item  The LilyPond modules that do the actual conversion of music to
       notation.  Each module is a so-called
       @emph{engraver}
@cindex engraver
.

  @item  How these modules should cooperate, i.e. which ``cooperation
       module'' should be used.  This cooperation module is a special
       type of engraver.

  @item  What other contexts the context can contain,

  @item  What properties are defined.
@end enumerate

A context definition has this syntax:

@example

  \translator @code{@{}
                      @var{translatorinit} @var{translatormodifierlist}
                    @code{@}}
@end example

@var{translatorinit} can be an identifier or of the form

@example

  \type @var{typename} @code{;}
@end example

@var{typename} is one of

@table @code
@cindex @code{Engraver_group_engraver}
  @item @code{Engraver_group_engraver}  
    The standard cooperation engraver.
@cindex @code{Score_engraver}

  @item @code{Score_engraver}  
    This is cooperation module that should be in the top level context.
@cindex @code{Grace_engraver_group}

  @item @code{Grace_engraver_group}  
    This is a special cooperation module (resembling
    @code{Score_engraver}) that is used to created an embedded
    `miniscore'.
@end table 

@var{translatormodifierlist} is a list of items where each item is
one of

@itemize @bullet
  @item  @code{\consists} @var{engravername} @code{;}  
    Add @var{engravername} to the list of modules in this context. 
  The order of engravers added with @code{\consists} is
    significant.
  
  @item  @code{\consistsend} @var{engravername} @code{;}  
    Analogous to @code{\consists}, but makes sure that
    @var{engravername} is always added to the end of the list of
    engravers.

    Some engraver types need to be at the end of the list; this
    insures they are put there, and stay there, if a user adds or
    removes engravers.  This command is usually not needed for
    end-users.
    
  @item  @code{\accepts} @var{contextname} @code{;}  
    Add @var{contextname} to the list of  context this context can
    contain.  The first listed context is the context to create by
    default.

  @item @code{\denies}. The opposite of @code{\accepts}. Added for
completeness, but is never used in practice.
 
  
  @item  @code{\remove} @var{engravername} @code{;}  
    Remove a previously added (with @code{\consists}) engraver.
  
  @item  @code{\name} @var{contextname} @code{;}  
    This sets name of the context, e.g. @code{Staff}, @code{Voice}.  If
    the name is not specified, the translator won't do anything.

  @item  @var{propname} @code{=} @var{value} @code{;}  
    A property assignment.  It is allowed to use reals for
    @var{value}.
@end itemize

In the @code{\paper} block, it is also possible to define translator
identifiers.  Like other block identifiers, the identifier can only
be used as the very first item of a translator.  In order to define
such an identifier outside of @code{\score}, you must do

@quotation

@example 
\paper @{
  foo = \translator @{ @dots{} @}
@}
\score @{
  \notes @{
    @dots{}
  @}
  \paper @{
    \translator @{ \foo @dots{} @}
  @}
@} 
@end example 

@end quotation


@cindex paper types, engravers, and pre-defined translators

Some pre-defined identifiers can simplify modification of
translators.  The pre-defined identifiers are:

@table @code
@cindex @code{StaffContext}
  @item @code{StaffContext}  
    Default Staff context. 
@cindex @code{RhythmicStaffContext}

  @item @code{RhythmicStaffContext}  
    Default RhythmicStaff context. 
@cindex @code{VoiceContext}

  @item @code{VoiceContext}  
    Default Voice context.  
@cindex @code{ScoreContext}

  @item @code{ScoreContext}  
    Default Score context. 
@cindex @code{ScoreWithNumbers}

  @item @code{ScoreWithNumbers}  
    Score context with numbering at the Score level.
@cindex @code{BarNumberingStaffContext}

  @item @code{BarNumberingStaffContext}  
    Staff context with numbering at the Staff level.
@cindex @code{HaraKiriStaffContext}

  @item @code{HaraKiriStaffContext}  
    Staff context that does not print if it only contains rests. 
    Useful for orchestral scores.@footnote{Harakiri, also called
    Seppuku, is the ritual suicide of the Japanese Samourai warriors.}
@cindex @code{OrchestralPartStaffContext}

  @item @code{OrchestralPartStaffContext}
@cindex @code{OrchestralScoreContext}

  @item @code{OrchestralScoreContext}
@end table

Using these pre-defined values, you can remove or add items to the
translator:

@quotation

@example 
\paper @{
  \translator @{
    \StaffContext
    \remove Some_engraver;
    \consists Different_engraver;
  @}
@} 
@end example 

@end quotation

      
@node Sound output
@section Sound output

The MIDI block is analogous to the paper block, but it is somewhat
simpler.  The @code{\midi} block can contain:
@cindex MIDI block

@itemize @bullet
  @item  a @code{\tempo} definition
  @item  context definitions
@end itemize

Assignments in the @code{\midi} block are not allowed.



@cindex context definition

Context definitions follow precisely the same syntax as within the
\paper block.  Translation modules for sound are called performers.
The contexts for MIDI output are defined in @file{ly/performer.ly}.



@node midilist
@section MIDI instrument names
@cindex instrument names
@cindex @code{Staff.midiInstrument}
@cindex @code{Staff.instrument}

The MIDI instrument name is set by the @code{Staff.midiInstrument}
property or, if that property is not set, the @code{Staff.instrument}
property.  The instrument name should be chosen from the following list.
If the selected string does not exactly match, then LilyPond uses the
default piano.

[FIXME: to appendix ]

@c @quotation

@example 
"acoustic grand"            "contrabass"           "lead 7 (fifths)"
"bright acoustic"           "tremolo strings"      "lead 8 (bass+lead)"
"electric grand"            "pizzicato strings"    "pad 1 (new age)"
"honky-tonk"                "orchestral strings"   "pad 2 (warm)"
"electric piano 1"          "timpani"              "pad 3 (polysynth)"
"electric piano 2"          "string ensemble 1"    "pad 4 (choir)"
"harpsichord"               "string ensemble 2"    "pad 5 (bowed)"
"clav"                      "synthstrings 1"       "pad 6 (metallic)"
"celesta"                   "synthstrings 2"       "pad 7 (halo)"
"glockenspiel"              "choir aahs"           "pad 8 (sweep)"
"music box"                 "voice oohs"           "fx 1 (rain)"
"vibraphone"                "synth voice"          "fx 2 (soundtrack)"
"marimba"                   "orchestra hit"        "fx 3 (crystal)"
"xylophone"                 "trumpet"              "fx 4 (atmosphere)"
"tubular bells"             "trombone"             "fx 5 (brightness)"
"dulcimer"                  "tuba"                 "fx 6 (goblins)"
"drawbar organ"             "muted trumpet"        "fx 7 (echoes)"
"percussive organ"          "french horn"          "fx 8 (sci-fi)"
"rock organ"                "brass section"        "sitar"
"church organ"              "synthbrass 1"         "banjo"
"reed organ"                "synthbrass 2"         "shamisen"
"accordion"                 "soprano sax"          "koto"
"harmonica"                 "alto sax"             "kalimba"
"concertina"                "tenor sax"            "bagpipe"
"acoustic guitar (nylon)"   "baritone sax"         "fiddle"
"acoustic guitar (steel)"   "oboe"                 "shanai"
"electric guitar (jazz)"    "english horn"         "tinkle bell"
"electric guitar (clean)"   "bassoon"              "agogo"
"electric guitar (muted)"   "clarinet"             "steel drums"
"overdriven guitar"         "piccolo"              "woodblock"
"distorted guitar"          "flute"                "taiko drum"
"guitar harmonics"          "recorder"             "melodic tom"
"acoustic bass"             "pan flute"            "synth drum"
"electric bass (finger)"    "blown bottle"         "reverse cymbal"
"electric bass (pick)"      "skakuhachi"           "guitar fret noise"
"fretless bass"             "whistle"              "breath noise"
"slap bass 1"               "ocarina"              "seashore"
"slap bass 2"               "lead 1 (square)"      "bird tweet"
"synth bass 1"              "lead 2 (sawtooth)"    "telephone ring"
"synth bass 2"              "lead 3 (calliope)"    "helicopter"
"violin"                    "lead 4 (chiff)"       "applause"
"viola"                     "lead 5 (charang)"     "gunshot"
"cello"                     "lead 6 (voice)" 
@end example 

@c @end quotation


@node Pre-defined Identifiers

@section Pre-defined Identifiers

@cindex pre-defined identifiers


Various identifiers are defined in the initialization files to
provide shorthands for some settings.  Most of them are in
@file{ly/declarations.ly} and @file{ly/property.ly}.

@table @code
@cindex @code{\break}  
  @item @code{\break}
    Force a line break in music by using a large argument for the
    keyword @code{\penalty}.

@cindex @code{\nobreak}  
  @item @code{\nobreak}
    Prevent a line break in music by using a large negative argument
    for the keyword @code{\penalty}.

@cindex @code{\shiftOff}  
  @item @code{\shiftOff}
    Disable horizontal shifting of note heads that collide. 

@cindex @code{\shiftOn}  
  @item @code{\shiftOn}
    Enable note heads that collide with other note heads to be
    shifted horiztonally. Also @code{\shiftOnn} and @code{\shiftOnnn}
set different shift values.

@cindex @code{\stemBoth}  
  @item @code{\stemBoth}
    Allow stems, beams, and slurs to point either upwards or
    downwards, decided automatically by LilyPond.

@cindex @code{\stemDown}  
  @item @code{\stemDown}
    Force stems, beams, and slurs to point down.

@cindex @code{\stemUp}  
  @item @code{\stemUp}
    Force stems, beams and slurs to point up.

@end table



@node Point and click
@section Point and click

[todo]


