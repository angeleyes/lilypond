@c Note: -*-texinfo-*-
@c
@c A menu is needed before every deeper *section nesting of @node's; run
@c     M-x texinfo-all-menus-update
@c to automagically fill in these menus before saving changes
@c
@c FIXME: singular vs. plural:  Beams/Beam


@node Reference Manual
@chapter Reference Manual

@html
<!--- @@WEB-TITLE@@=Reference Manual --->
@end html


This document describes GNU LilyPond and its input format. The last
revision of this document was made for LilyPond 1.7.10.  It assumes
that you already know a little bit about LilyPond input (how to
make an input file, how to create sheet music from that input file,
etc).  New users are encouraged to study the tutorial before reading
this manual.

@menu
* Note entry::                  
* Easier music entry::          
* Staff notation::              
* Polyphony::                   
* Beaming::                     
* Accidentals::                 
* Expressive marks::            
* Ornaments::                   
* Repeats::                     
* Rhythmic music::              
* Piano music::                 
* Vocal music::                 
* Tablatures::                  
* Chords::                      
* Writing parts::               
* Ancient notation ::           
* Contemporary notation::       
* Tuning output::               
* Global layout::               
* Sound::                       
@end menu

@c FIXME: Note entry vs Music entry at top level menu is confusing.

@node Note entry
@section Note entry
@cindex Note entry

Notes constitute the most basic elements of LilyPond input, but they do
not form valid input on their own without a @code{\score} block.  However,
for the sake of brevity and simplicity we will generally omit
@code{\score} blocks and @code{\paper} declarations in this manual.


@menu
* Notes::                       
* Pitches::                     
* Chromatic alterations::       
* Rests::                       
* Skips::                       
* Durations::                   
* Ties::                        
* Automatic note splitting ::   
* Tuplets::                     
* Easy Notation note heads ::   
@end menu


@node Notes
@subsection Notes


A note is printed by specifying its pitch and then its duration.
@lilypond[fragment,verbatim]
  cis'4 d'8 e'16 c'16
@end lilypond


@node Pitches
@subsection Pitches

@cindex Pitch names
@cindex Note specification
@cindex pitches
@cindex entering notes

The verbose syntax for pitch specification is

@cindex @code{\pitch}
@example
  \pitch @var{scmpitch}
@end example

where @var{scmpitch} is a pitch scheme object.

In Note and Chord mode, pitches may be designated by names.  The
default names are the Dutch note names.  The notes are specified by
the letters @code{a} through @code{g}, while the octave is formed with
notes ranging from @code{c} to @code{b}.  The pitch @code{c} is an
octave below middle C and the letters span the octave above that C.

@lilypond[fragment,verbatim]
\clef bass
  a,4 b, c d e f g a b c' d' e' \clef treble f' g' a' b' c''
@end lilypond

@cindex note names, Dutch

In Dutch, a sharp is formed by adding @code{-is} to the end of a pitch
name and a flat is formed by adding @code{-es}.  Double sharps and
double flats are obtained by adding @code{-isis} or @code{-eses}.
@code{aes} is contracted to @code{as} in Dutch, but both forms are
accepted. Similarly, both @code{es} and @code{ees} are accepted.

There are predefined sets of note names for various other languages.
To use them,  include the language specific init file.  For
example: @code{\include "english.ly"}.  The available language files
and the note names they define are:

@anchor{note name}
@anchor{note names}
@example 
                        Note Names               sharp       flat
nederlands.ly  c   d   e   f   g   a   bes b   -is         -es
english.ly     c   d   e   f   g   a   bf  b   -s/-sharp   -f/-flat
deutsch.ly     c   d   e   f   g   a   b   h   -is         -es
norsk.ly       c   d   e   f   g   a   b   h   -iss/-is    -ess/-es
svenska.ly     c   d   e   f   g   a   b   h   -iss        -ess
italiano.ly    do  re  mi  fa  sol la  sib si  -d          -b
catalan.ly     do  re  mi  fa  sol la  sib si  -d/-s       -b 
espanol.ly     do  re  mi  fa  sol la  sib si  -s          -b 

@end example 

@cindex @code{'}
@cindex @code{,}



The optional octave specification takes the form of a series of
single quote (`@code{'}') characters or a series of comma
(`@code{,}') characters.  Each @code{'} raises the pitch by one
octave; each @code{,} lowers the pitch by an octave.

@lilypond[fragment,verbatim,center]
  c' c'' es' g' as' gisis' ais'  
@end lilypond

@node Chromatic alterations
@subsection Chromatic alterations

Normally accidentals are printed automatically, but you may also
print them manually.  A reminder accidental
@cindex reminder accidental
@cindex @code{?}
can be forced by adding an exclamation mark @code{!}
after the pitch.  A cautionary accidental
@cindex cautionary accidental
@cindex parenthesized accidental
(an accidental within parentheses) can be obtained by adding the
question mark `@code{?}' after the pitch.

@lilypond[fragment,verbatim]
  cis' cis' cis'! cis'?
@end lilypond


The automatic production of accidentals can be tuned in many
ways. For more information, refer to @ref{Accidentals}.


@node  Rests
@subsection Rests
@cindex Rests

Rests are entered like notes, with the note name @code{r}.

@lilypond[singleline,verbatim]
r1 r2 r4 r8
@end lilypond

Whole bar rests, centered in middle of the bar, are specified using
@code{R} (capital R); see @ref{Multi measure rests}.  See also
@seeinternals{Rest}.

For some music, you may wish to explicitly specify the rest's vertical
position.  This can be achieved by entering a note with the @code{\rest}
keyword appended. Rest collision testing will leave these rests alone.

@lilypond[singleline,verbatim]
a'4\rest d'4\rest
@end lilypond



@c FIXME: naming.
@node Skips
@subsection Skips
@cindex Skip
@cindex Invisible rest
@cindex Space note

An invisible rest (also called a `skip') can be entered like a note
with note name `@code{s}' or with @code{\skip @var{duration}}:

@lilypond[singleline,verbatim]
a2 s4 a4 \skip 1 a4 
@end lilypond

 The @code{s} syntax is only available in Note mode and Chord
mode.  In other situations, you should use the @code{\skip} command,
which will work outside of those two modes:

@lilypond[singleline,verbatim]
\score {
  \context Staff <
    { \time 4/8 \skip 2 \time 4/4 } 
    \notes\relative c'' { a2 a1 }
  >
}
@end lilypond

The skip command is merely an empty musical placeholder.  It does not
produce any output, not even transparent output.




@node Durations
@subsection Durations


@cindex duration
@cindex @code{\duration}


In Note, Chord, and Lyrics mode, durations are designated by numbers
and dots: durations are entered as their reciprocal values.  For example,
a quarter note is entered using a @code{4} (since it is a 1/4 note), while
a half note is entered using a @code{2} (since it is a 1/2 note).  For notes
longer than a whole you must use identifiers.
@c FIXME: what is an identifier?  I do not think it's been introduced yet.
@c and if it has, I obviously skipped that part.     - Graham

@example 
c'\breve  
c'1 c'2 c'4 c'8 c'16 c'32 c'64 c'64 
r\longa r\breve  
r1 r2 r4 r8 r16 r32 r64 r64 
@end example 

@lilypond[noindent]
\score {
  \notes \relative c'' {
    a\breve  \autoBeamOff
    a1 a2 a4 a8 a16 a32 a64 a64 
    r\longa r\breve  
    r1 r2 r4 r8 r16 r32 r64 r64 
  }
  \paper {
    \translator {
      \StaffContext
        \remove "Clef_engraver"
        \remove "Staff_symbol_engraver"
        \remove "Time_signature_engraver"
        \consists "Pitch_squash_engraver"
    }
  }
}
@end lilypond


If the duration is omitted then it is set to the previously entered
duration. Default for the first note is a quarter note.  The duration
can be followed by dots (`@code{.}') in order to obtain dotted note
lengths:
@cindex @code{.}

@lilypond[fragment,verbatim,center]
  a' b' c''8 b' a'4 a'4. b'4.. c'8.
@end lilypond
@cindex @code{r}
@cindex @code{s}

You can alter the length of duration by a fraction @var{N/M}
appending `@code{*}@var{N/M}' (or `@code{*}@var{N}' if @var{M=1}). This
will not affect the appearance of the notes or rests produced.

@lilypond[fragment,verbatim]
  a'2*2 b'4*2 a'8*4 a'4*3/2 gis'4*3/2 a'4*3/2 a'4
@end lilypond

Durations can also be produced through GUILE extension mechanism. 
@lilypond[verbatim,fragment]
 c'\duration #(ly:make-duration 2 1)
@end lilypond


@refbugs

Dot placement for chords is not perfect.  In some cases, dots overlap:
@lilypond[]
 <<f, c'' d e f>>4.
@end lilypond


@node Ties
@subsection Ties

@cindex Tie
@cindex ties
@cindex @code{~}

A tie connects two adjacent note heads of the same pitch.  The tie in
effect extends the length of a note.  Ties should not be confused with
slurs, which indicate articulation, or phrasing slurs, which indicate
musical phrasing.  A tie is entered using the tilde symbol `@code{~}'.

@lilypond[fragment,verbatim,center]
  e' ~ e' <<c' e' g'>> ~ <<c' e' g'>>
@end lilypond

When a tie is applied to a chord, all note heads (whose pitches match) are
connected.  If you try to tie together chords that have no common pitches,
no ties will be created.

In its meaning a tie is just a way of extending a note duration, similar
to the augmentation dot: the following example are two ways of notating
exactly the same concept.
@c
@lilypond[fragment, singleline,quote]
\time 3/4 c'2. c'2 ~ c'4
@end lilypond
If you need to tie notes over bars, it may be easier to use automatic
note splitting (See @ref{Automatic note splitting}).


@seealso 

@seeinternals{Tie}, @ref{Automatic note splitting}. If you want less
ties created for a chord, see @inputfileref{input/test/,tie-sparse.ly}.

@refbugs

Tieing only a subset of the note heads of a pair of chords is not
supported in a simple way.  It can be achieved by moving the
tie-engraver into the @internalsref{Thread} context and turning on and
off ties per @internalsref{Thread}.

Switching staves when a tie is active, will produce a horizontal tie
on the first note.


Formatting of ties is a difficult subject. LilyPond often does not
give optimal results.



@node Automatic note splitting 
@subsection Automatic note splitting
@c FIXME: This subsection does not belong in @ref{Note entry}.

LilyPond can automatically converting long notes to tied notes.  This
is done by replacing the @code{Note_heads_engraver} by the
@code{Completion_heads_engraver}. 

@lilypond[verbatim,noindent]
\score{
  \notes\relative c'{ \time 2/4
  c2. c8 d4 e f g a b c8 c2 b4 a g16 f4 e d c8. c2 
  }
  \paper{ \translator{
      \ThreadContext
      \remove "Note_heads_engraver"
      \consists "Completion_heads_engraver"
  } } }
@end lilypond

This engraver splits all running notes at the bar line, and inserts
ties.  One of its uses is to debug complex scores: if the measures are
not entirely filled, then the ties exactly show how much each measure
is off.

@refbugs

Not all durations (especially those containing tuplets) can be
represented exactly; the engraver will not insert tuplets. 

@node Tuplets
@subsection Tuplets

@cindex tuplets
@cindex triplets
@cindex @code{\times}

Tuplets are made out of a music expression by multiplying all durations
with a fraction.

@cindex @code{\times}
@example
  \times @var{fraction} @var{musicexpr}
@end example

The duration of @var{musicexpr} will be multiplied by the fraction. 
In the sheet music, the fraction's denominator will be printed over
the notes, optionally with a bracket.  The most common tuplet is the
triplet in which 3 notes have the length of 2, so the notes are 2/3
of their written length:

@lilypond[fragment,verbatim,center]
  g'4 \times 2/3 {c'4 c' c'} d'4 d'4
@end lilypond

The property @code{tupletSpannerDuration} specifies how long each bracket
should last.  With this, you can make lots of tuplets while typing
@code{\times} only once, saving you lots of typing.

@lilypond[fragment,  relative, singleline, verbatim]
\property Voice.tupletSpannerDuration = #(ly:make-moment 1 4)
\times 2/3 { c'8 c c c c c }
@end lilypond

The format of the number is determined by the property
@code{tupletNumberFormatFunction}.  The default prints only the
denominator, but if you set it to the Scheme function
@code{fraction-tuplet-formatter}, Lilypond will print @var{num}:@var{den}
instead.


@cindex @code{tupletNumberFormatFunction}
@cindex tuplet formatting 

See also @seeinternals{TupletBracket}.

@refbugs

Nested tuplets are not formatted automatically.  In this case, outer
tuplet brackets should be moved manually.

@node Easy Notation note heads 
@subsection Easy Notation note heads

@cindex easy notation
@cindex Hal Leonard

The "easyplay" note head includes a note name inside the head.  It is
used in music aimed at beginners.

@lilypond[singleline,verbatim,26pt]
\score {
  \notes { c'2 e'4 f' | g'1 }
  \paper { \translator { \EasyNotation } } 
}
@end lilypond

The @code{EasyNotation} identifier overrides a @internalsref{Score}
context.  You probably will want to print it with magnification or a
large font size to make it more readable.  To print with
magnification, you must create a DVI file (with @file{ly2dvi}) and
then enlarge it with something like @file{dvips -x 2000 file.dvi}.
See @file{man dvips} for details.  To print with a larger font, see
@ref{Font Size}.


@cindex Xdvi
@cindex ghostscript

If you view the result with Xdvi, then staff lines will show through
the letters.  Printing the PostScript file obtained with ly2dvi does
produce the correct result.


@node Easier music entry
@section Easier music entry
@cindex Music entry
@menu
* Relative octaves::            
* Bar check::                   
* Skipping corrected music::    
@end menu

When entering music with LilyPond, it is easy to introduce
errors. This section deals with tricks and features that help you
enter music, and find and correct mistakes.  It is also possible to
use external programs to enter or edit music. Refer to the website for
more information.



@node Relative octaves
@subsection Relative octaves
@cindex Relative
@cindex relative octave specification

Octaves are specified by adding @code{'} and @code{,} to pitch names.
When you copy existing music, it is easy to accidentally put a pitch in
the wrong octave and hard to find such an error.  To prevent these
errors, LilyPond features octave entry.

@cindex @code{\relative}
@example
  \relative @var{startpitch} @var{musicexpr}
@end example

The octave of notes that appear in @var{musicexpr} are calculated as
follows: If no octave changing marks are used, the basic interval
between this and the last note is always taken to be a fourth or less
(This distance is determined without regarding alterations; a
@code{fisis} following a @code{ceses} will be put above the
@code{ceses})

The octave changing marks @code{'} and @code{,} can be added to raise or
lower the pitch by an extra octave.  Upon entering relative mode, an
absolute starting pitch must be specified that will act as the
predecessor of the first note of @var{musicexpr}.

Entering music that changes octave frequently  is easy in relative mode.
@lilypond[fragment,singleline,verbatim,center]
  \relative c'' {
    b c d c b c bes a 
  }
@end lilypond

And octave changing marks are used for intervals greater than a fourth.
@lilypond[fragment,verbatim,center]
  \relative c'' {
    c g c f, c' a, e'' }
@end lilypond

If the preceding item is a chord, the first note of the chord is used
to determine the first note of the next chord. However, other notes
within the second chord are determined by looking at the immediately
preceding note.

@lilypond[fragment,verbatim,center]
  \relative c' {
    c <<c e g>> 
    <<c' e g>>
    <<c, e' g>>
  }
@end lilypond 
@cindex @code{\notes}

The pitch after the @code{\relative} contains a note name.  To parse
the pitch as a note name, you have to be in note mode, so there must
be a surrounding @code{\notes} keyword (which is not
shown here).

The relative conversion will not affect @code{\transpose},
@code{\chords} or @code{\relative} sections in its argument.  If you
want to use relative within transposed music, you must place an
additional @code{\relative} inside the @code{\transpose}.


@node Bar check
@subsection Bar check
@cindex Bar check

@cindex bar check
@cindex @code{barCheckSynchronize}
@cindex @code{|}


Whenever a bar check is encountered during interpretation, a warning
message is issued if it does not fall at a measure boundary.  This can
help you find errors in the input.  Depending on the value of
@code{barCheckSynchronize}, the beginning of the measure will be
relocated, so this can also be used to shorten measures.

A bar check is entered using the bar symbol, `@code{|}'.
@example
  \time 3/4 c2 e4 | g2.
@end example



@cindex skipTypesetting

Failed bar checks are caused by entering incorrect
durations. Incorrect durations often completely garble up the score,
especially if it is polyphonic, so you should start correcting the
score by scanning for failed bar checks and incorrect durations.  To
speed up this process, you can use @code{skipTypesetting}, described
in the next section.

@node Skipping corrected music
@subsection Skipping corrected music

The property @code{Score.skipTypesetting} can be used to switch on and
off typesetting completely during the interpretation phase. When
typesetting is switched off, the music is processed much more quickly.
You can use this to skip over the parts of a score that you have already
checked for errors. 

@lilypond[fragment,singleline,verbatim]
\relative c'' { c8 d
\property Score.skipTypesetting = ##t
  e f g a g c, f e d
\property Score.skipTypesetting = ##f
c d b bes a g c2 } 
@end lilypond




@node Staff notation
@section Staff notation

This section deals with music notation that occurs on staff level,
such as keys, clefs and time signatures.

@cindex Staff notation

@menu
* Staff symbol::                
* Key signature::               
* Clef::                        
* Time signature::              
* Unmetered music::             
* Bar lines::                   
@end menu

@node Staff symbol
@subsection Staff symbol

@cindex adjusting staff symbol
@cindex StaffSymbol, using \property
@cindex staff lines, setting number of

Staff is a the general name for Notes, dynamic signs, etc. are grouped
with a set of horizontal lines, into a staff (plural `staves'). In our
system, these lines are drawn using a separate graphical object called
staff symbol.  

This object is created whenever a @internalsref{Staff} context is
created.  You can not change the appearance of the staff symbol by
using @code{\override} or @code{\set}.  At the moment that
@code{\property Staff} is interpreted, a Staff context is made, and
the @internalsref{StaffSymbol} is created before any @code{\override} is
effective. You can deal with this either overriding properties in a
@code{\translator} definition, or by using @code{\outputproperty}.

@refbugs

If you end a staff halfway a piece, the staff symbol may not end
exactly on the barline.


@node Key signature
@subsection Key signature
@cindex Key

@cindex @code{\key}

The key signature indicates the scale in which a piece is played. It
is denoted by a set of alterations (flats or sharps) at the start of
the staff.

@syntax

Setting or changing the key signature is done with the @code{\key}
command.
@example
  @code{\key} @var{pitch} @var{type}
@end example

@cindex @code{\minor}
@cindex @code{\major}
@cindex @code{\minor}
@cindex @code{\ionian}
@cindex @code{\locrian}
@cindex @code{\aeolian}
@cindex @code{\mixolydian}
@cindex @code{\lydian}
@cindex @code{\phrygian}
@cindex @code{\dorian}

Here, @var{type} should be @code{\major} or @code{\minor} to get
@var{pitch}-major or @var{pitch}-minor, respectively.
The standard mode names @code{\ionian},
@code{\locrian}, @code{\aeolian}, @code{\mixolydian}, @code{\lydian},
@code{\phrygian}, and @code{\dorian} are also defined.

@seealso

This command sets the context property
@internalsref{Staff}.@code{keySignature}.  Non-standard key signatures
can be specified by setting this property directly.

The printed signature is a @internalsref{KeySignature} object, typically
created in @internalsref{Staff} context.

@cindex @code{keySignature}


@node Clef
@subsection Clef
@cindex @code{\clef}

The clef indicates which lines of the staff correspond to which
pitches.

@syntax

The clef can be set or changed with the @code{\clef} command:
@lilypond[fragment,verbatim]
  \key f\major  c''2 \clef alto g'2
@end lilypond

Supported clef-names include 
@c Moved standard clefs to the top /MB
@table @code
@item treble, violin, G, G2
G clef on 2nd line
@item alto, C
 C clef on 3rd line
@item tenor
 C clef on 4th line
@item bass, F
 F clef on 4th line
@item french
 G clef on 1st line, so-called French violin clef
@item soprano
 C clef on 1st line
@item mezzosoprano
 C clef on 2nd line
@item baritone
 C clef on 5th line
@item varbaritone
 F clef on 3rd line
@item subbass
 F clef on 5th line
@item percussion
 percussion clef
@end table

By adding @code{_8} or @code{^8} to the clef name, the clef is
transposed one octave down or up, respectively.   You have to
enclose @var{clefname} in quotes if you use underscores or digits in the
name. For example,
@example
	\clef "G_8"
@end example

This command is equivalent to setting @code{clefGlyph},
@code{clefPosition} (which controls the Y position of the clef),
@code{centralCPosition} and @code{clefOctavation}. A clef is printed
when any of these properties are changed.

@seealso

The object for this symbol is @internalsref{Clef}. 




@node Time signature
@subsection Time signature
@cindex Time signature
@cindex meter
@cindex @code{\time}

Time signature indicates the metrum of a piece: a regular pattern of
strong and weak beats. It is denoted by a fraction at the start of the
staff.

@syntax

The time signature is set or changed by the @code{\time}
command.
@lilypond[fragment,verbatim]
 \time 2/4 c'2 \time 3/4 c'2. 
@end lilypond

The actual symbol that is printed can be customized with the @code{style}
property. Setting it to @code{#'()} uses fraction style for 4/4 and
2/2 time.

This command sets the property @code{timeSignatureFraction},
@code{beatLength} and @code{measureLength} in the @code{Timing}
context, which is normally aliased to @internalsref{Score}.  The property
@code{timeSignatureFraction} determine where bar lines should be
inserted, and how automatic beams should be generated.  Changing the
value of @code{timeSignatureFraction} also causes a time signature
symbol to be printed.

More options are available through the Scheme function
@code{set-time-signature}. In combination with the
@internalsref{Measure_grouping_engraver}, it will create
@internalsref{MeasureGrouping} signs. Such signs ease reading
rhythmically complex modern music.  In the following example, the 9/8
measure is subdivided in 2, 2, 2 and 3. This is passed to
@code{set-time-signature} as the third argument @code{(2 2 2 3)}.

@lilypond[verbatim]
\score { \notes \relative c'' {
   #(set-time-signature 9 8 '(2 2 2 3))
   g8-[ g-] d-[ d-] g-[ g-] a8-[-( bes g-]-) | 
   #(set-time-signature 5 8 '(3 2))
   a4. g4
   }
   \paper {
       raggedright = ##t
       \translator { \StaffContext
         \consists "Measure_grouping_engraver"
   }}}
@end lilypond 

@seealso

The object for this symbol is @internalsref{TimeSignature}.  There are
many more options for its layout.  See
@inputfileref{input/test,time.ly} for more examples.

@refbugs

Automatic beaming does not use measure grouping specified with
@code{set-time-signature}.


@subsection Partial
@cindex Partial
@cindex anacrusis
@cindex upbeat
@cindex partial measure
@cindex measure, partial
@cindex shorten measures
@cindex @code{\partial}

Partial measures, for example in upbeats, are entered using the
@code{\partial} command:
@lilypond[fragment,verbatim]
\partial 16*5  c'16 c4 f16 a'2. ~ a'8. a'16 | g'1
@end lilypond

The syntax for this command is 
@example
  \partial @var{duration} 
@end example
This is  internally translated into
@example
  \property Timing.measurePosition = -@var{length of duration}
@end example
@cindex @code{|}
The property @code{measurePosition} contains a rational number
indicating how much of the measure has passed at this point.

@node Unmetered music
@subsection Unmetered music

Bar lines and bar numbers are calculated automatically. For unmetered
music (e.g. cadenzas), this is not desirable.  By setting
@code{Score.timing} to false, this automatic timing can be switched
off.

@node Bar lines
@subsection Bar lines
@cindex Bar lines

@cindex @code{\bar}
@cindex measure lines
@cindex repeat bars


Bar lines delimit measures, but are also used to indicate
repeats. Line breaks may only happen on barlines.

@syntax

Bar lines are inserted automatically, but if you need a special type
of barline, you can force one using the @code{\bar} command:
@lilypond[relative=1,fragment,verbatim]
   c4 \bar "|:" c4
@end lilypond

The following bar types are available
@lilypond[fragment,  relative, singleline, verbatim]
c4
\bar "|" c
\bar "" c
\bar "|:" c
\bar "||" c
\bar ":|" c
\bar ".|" c
\bar ".|." c
\bar "|." 
@end lilypond

In scores with many staves, the barlines are automatically placed at
top level, and they are connected between different staves of a
@internalsref{StaffGroup}:
@lilypond[fragment, verbatim]
< \context StaffGroup <
  \context Staff = up { e'4 d'
     \bar "||"
     f' e' }
  \context Staff = down { \clef bass c4 g e g } >
\context Staff = pedal { \clef bass c2 c2 } >
@end lilypond


The command @code{\bar @var{bartype}} is a short cut for
doing  @code{\property Score.whichBar = @var{bartype}}
Whenever @code{whichBar} is set to a string, a bar line of that type is
created.  @code{whichBar} is usually set automatically: at the start of
a measure it is set to @code{defaultBarType}. The contents of
@code{repeatCommands} is used to override default measure bars.

@code{whichBar} can also be set directly, using @code{\property} or
@code{\bar  }.  These settings take precedence over the automatic
@code{whichBar} settings. 

@cindex whichBar
@cindex repeatCommands
@cindex defaultBarType


@seealso

You are encouraged to use @code{\repeat} for repetitions.  See
@ref{Repeats}.

The bar line objects that are created at @internalsref{Staff} are
called @internalsref{BarLine}, the bar lines that span staffs are
@internalsref{SpanBar}s.


@node Polyphony
@section Polyphony
@cindex polyphony

The easiest way to enter fragments with more than one voice on a staff
is to split chords using the separator @code{\\}.  You can use it for
small, short-lived voices (make a chord of voices) or for single
chords:

@lilypond[verbatim,fragment]
\context Voice = VA \relative c'' {
 c4 < { f d e  } \\ { b c2 } > c4 < g' \\ b, \\  f' \\ d' >
}
@end lilypond

The separator causes @internalsref{Voice} contexts to be instantiated,
bearing the names @code{"1"}, @code{"2"}, etc. In each of these
contexts, vertical direction of slurs, stems, etc. are set
appropriately.

This can also be done by instantiating @internalsref{Voice} contexts
by hand, and using @code{\voiceOne}, up to @code{\voiceFour} to assign
a stem directions and horizontal shift for each part.
@c

@lilypond[singleline, verbatim]
\relative c''
\context Staff < \context Voice = VA { \voiceOne cis2 b  }
  \context Voice = VB { \voiceThree b4 ais ~ ais4 gis4 } 
  \context Voice = VC { \voiceTwo fis4~  fis4 f ~ f  } >
@end lilypond

Normally, note heads with a different number of dots are not merged, but
if you set the object property @code{merge-differently-dotted}, they are:
@lilypond[verbatim,fragment,singleline]
\relative c' \context Voice < {
     g8 g8 
     \property Staff.NoteCollision \override
        #'merge-differently-dotted = ##t
     g8 g8
  } \\ { [g8. f16] [g8. f16] } 
  >
@end lilypond

Similarly, you can merge half note heads with eighth notes, by setting
@code{merge-differently-headed}:
@lilypond[fragment, relative=2,verbatim]
\context Voice < {
    c8 c4.
    \property Staff.NoteCollision
      \override #'merge-differently-headed = ##t
    c8 c4. } \\ { c2 c2 } >
@end lilypond

LilyPond also vertically shifts rests that are opposite of a stem. 

@lilypond[singleline,fragment,verbatim]
\context Voice < c''4 \\  r4 >
@end lilypond

@seealso

The objects responsible for resolving collisions are
@internalsref{NoteCollision} and @internalsref{RestCollision}.  See
also example files @inputfileref{input/regression/,collision-dots.ly},
@inputfileref{input/regression/,collision-head-chords.ly},
@inputfileref{input/regression/,collision-heads.ly},
@inputfileref{input/regression/,collision-mesh.ly}, and
@inputfileref{input/regression/,collisions.ly}.


@refbugs

Resolving collisions is a very intricate subject, and LilyPond only
handles a few situations. When it can not cope, you are advised to use
@code{force-hshift} of the @internalsref{NoteColumn} object and pitched
rests to override typesetting decisions.

@node Beaming
@section Beaming

Beams are used to group short notes into chunks that are aligned with
the metrum. They are inserted automatically in most cases.

@lilypond[fragment,verbatim, relative=2]
\time 2/4 c8 c c c \time 6/8 c c c c8. c16  c8
@end lilypond

If you are not satisfied with the automatic beaming, you can enter the
beams explicitly. If you have beaming patterns that differ from the
defaults, you can also set your own.

See also @internalsref{Beam}.


@cindex Automatic beams
@subsection Manual beams
@cindex beams, manual
@cindex @code{]}
@cindex @code{[}

In some cases it may be necessary to override the automatic beaming
algorithm.  For example, the auto beamer will not beam over rests or
bar lines, If you want that, specify the begin and end point manually
using @code{[} and @code{]}.

@lilypond[fragment,relative,verbatim]
  \context Staff {
    r4 r8-[ g' a r8-] r8 g-[ | a-] r8
  }
@end lilypond

@cindex @code{stemLeftBeamCount}

Normally, beaming patterns within a beam are determined automatically.
When this mechanism fouls up, the properties
@code{Voice.stemLeftBeamCount} and @code{Voice.stemRightBeamCount} can
be used to control the beam subdivision on a stem.  If you set either
property, its value will be used only once, and then it is erased.

@lilypond[fragment,relative,verbatim]
  \context Staff {
    f8-[ r16 f g a-]
    f8-[ r16 \property Voice.stemLeftBeamCount = #1 f g a-]
  }
@end lilypond
@cindex @code{stemRightBeamCount}


The property @code{subdivideBeams} can be set in order to subdivide
all 16th or shorter beams at beat positions.  This accomplishes the
same effect as twiddling with @code{stemLeftBeamCount} and
@code{stemRightBeamCount}, but it take less typing.


@lilypond[relative=1,verbatim,noindent]
        c16-[ c c c c c c c-]
        \property Voice.subdivideBeams = ##t
        c16-[ c c c c c c c-]
        c32-[ c c c c c c c c c c c c c c c-]
        \property Score.beatLength = #(ly:make-moment 1 8)
        c32-[ c c c c c c c c c c c c c c c-]
@end lilypond
@cindex subdivideBeams

Kneed beams are inserted automatically, when a large gap is detected
between the note heads.  This behavior can be tuned through the object
property @code{auto-knee-gap}.

@cindex beams, kneed
@cindex kneed beams
@cindex auto-knee-gap



@refbugs

@cindex hara kiri

Automatically kneed beams can not be used together with Hara Kiri
staves.

[TODO from bugs]

The Automatic beamer does not put @strong{unfinished} beams on the
last notes of a score.

@menu
* Setting automatic beam behavior ::  
@end menu

@ignore
@no de Beam typography
@sub section Beam typography

One of the strong points of LilyPond is how beams are formatted. Beams
are quantized, meaning that the left and right endpoints beams start
exactly on staff lines. Without quantization, small wedges of white
space appear between the beam and staff line, and this looks untidy.

Beams are also slope-damped: melodies that go up or down should also
have beams that go up or down, but the slope of the beams should be
less than the slope of the notes themselves.

Some beams should be horizontal. These are so-called concave beams. 

[TODO: some pictures.]
@end ignore


@node Setting automatic beam behavior 
@subsection Setting automatic beam behavior 

@cindex @code{autoBeamSettings}
@cindex @code{(end * * * *)}
@cindex @code{(begin * * * *)}
@cindex automatic beams, tuning
@cindex tuning automatic beaming

[TODO: use \applycontext]

In normal time signatures, automatic beams can start on any note but can
only end in a few positions within the measure: beams can end on a beat,
or at durations specified by the properties in
@code{Voice.autoBeamSettings}. The defaults for @code{autoBeamSettings}
are defined in @file{scm/auto-beam.scm}.

The value of @code{autoBeamSettings} is changed using
@code{\override} and unset using @code{\revert}:
@example
\property Voice.autoBeamSettings \override #'(@var{BE} @var{P} @var{Q} @var{N} @var{M}) = @var{dur}
\property Voice.autoBeamSettings \revert #'(@var{BE} @var{P} @var{Q} @var{N} @var{M})
@end example
Here, @var{BE} is the symbol @code{begin} or @code{end}. It determines
whether the rule applies to begin or end-points.  The quantity
@var{P}/@var{Q} refers to the length of the beamed notes (and `@code{*
*}' designates notes of any length), @var{N}/@var{M} refers to a time
signature (wildcards, `@code{* *}' may be entered to designate all time
signatures).

For example, if you want automatic beams to end on every quarter note,
you can use the following:
@example
\property Voice.autoBeamSettings \override
    #'(end * * * *) = #(ly:make-moment 1 4)
@end example
Since the duration of a quarter note is 1/4 of a whole note, it is
entered as @code{(ly:make-moment 1 4)}.

The same syntax can be used to specify beam starting points. In this
example, automatic beams can only end on a dotted quarter note. 
@example
\property Voice.autoBeamSettings \override
    #'(end * * * *) = #(ly:make-moment 3 8)
@end example
In 4/4 time signature, this means that automatic beams could end only on
3/8 and on the fourth beat of the measure (after 3/4, that is 2 times
3/8 has passed within the measure).

You can also restrict rules to specific time signatures. A rule that
should only be applied in @var{N}/@var{M} time signature is formed by
replacing the second asterisks by @var{N} and @var{M}. For example, a
rule for 6/8 time exclusively looks like
@example
\property Voice.autoBeamSettings \override
    #'(begin * * 6 8) =  ... 
@end example

If you want a rule to apply to certain types of beams, you can use the
first pair of asterisks. Beams are classified according to the shortest
note they contain. For a beam ending rule that only applies to beams
with 32nd notes (and no shorter notes), you would use @code{(end 1
32 * *)}.

@c not true
@c Automatic beams can not be put on the last note in a score.

If a score ends while an automatic beam has not been ended and is still
accepting notes, this last beam will not be typeset at all.

@cindex automatic beam generation
@cindex autobeam
@cindex @code{Voice.autoBeaming}
@cindex lyrics

For melodies that have lyrics, you may want to switch off 
automatic beaming. This is done by setting @code{Voice.autoBeaming} to
@code{#f}. 


@refbugs

It is not possible to specify beaming parameters for beams with mixed
durations, that differ from the beaming parameters of all separate
durations, i.e., you'll have to specify manual beams to get:

@lilypond[singleline,fragment,relative,noverbatim,quote]
  \property Voice.autoBeamSettings
  \override #'(end * * * *) = #(ly:make-moment 3 8)
  \time 12/8 c'8 c c c16 c c c c c c-[ c c c-] c8 c c4
@end lilypond
It is not possible to specify beaming parameters that act differently in
different parts of a measure. This means that it is not possible to use
automatic beaming in irregular meters such as @code{5/8}.

@node Accidentals
@section Accidentals
@cindex Accidentals

This section describes how to change the way that LilyPond automatically
inserts accidentals before the running notes.

[TODO: identifier vs. macro]

@menu
* Using the predefined accidental macros::  
* Defining your own accidental typesettings::  
@end menu

@node Using the predefined accidental macros
@subsection Using the predefined accidental macros
The constructs for describing the accidental typesetting rules are
quite hairy, so non-experts should stick to the macros defined in
@file{ly/property-init.ly}.
@cindex @file{property-init.ly}

The macros operate on the ``Current'' context (see @ref{Context properties}). This
means that the macros shuold normally be invoked right after the
creation of the context in which the accidental typesetting described
by the macro is to take effect. I.e. if you want to use
piano-accidentals in a pianostaff then you issue
@code{\pianoAccidentals} first thing after the creation of the piano
staff:
@example
\score @{
    \notes \relative c'' <
        \context Staff = sa @{ cis4 d e2 @}
        \context GrandStaff <
            \pianoAccidentals
            \context Staff = sb @{ cis4 d e2 @}
            \context Staff = sc @{ es2 c @}
        >
        \context Staff = sd @{ es2 c @}
    >
@}
@end example
@lilypond[singleline]
\score {
    \notes \relative c'' <
        \context Staff = sa { cis4 d e2 }
        \context GrandStaff <
            \pianoAccidentals
            \context Staff = sb { cis4 d e2 }
            \context Staff = sc { es2 c }
        >
        \context Staff = sd { es2 c }
    >
    \paper {
        \translator {
            \StaffContext
            minimumVerticalExtent = #'(-4.0 . 4.0)
        }
    }
}
@end lilypond

The macros are:
@table @code
@item \defaultAccidentals
      @cindex @code{\defaultAccidentals}
      This is the default typesetting behaviour. It should correspond
      to 18th century common practice: Accidentals are
      remembered to the end of the measure in which they occur and
      only on their own octave.

@item \voiceAccidentals
      @cindex @code{\voiceAccidentals}
      The normal behaviour is to remember the accidentals on
      Staff-level.
      This macro, however, typesets accidentals individually for each
      voice.
      Apart from that the rule is similar to
      @code{\defaultAccidentals}.

      This leads to some weird and often unwanted results
      because accidentals from one voice do not get cancelled in other
      voices:
@lilypond[singleline,relative,fragment,verbatim,quote]
    \context Staff <
        \voiceAccidentals
        <
         { es g } \\
         { c, e }
     > >
@end lilypond
      Hence you should only use @code{\voiceAccidentals} if the voices
are to be read solely by individual musicians. If the staff is to be
used by one musician (e.g., a conductor) then you use
@code{\modernVoiceAccidentals} or @code{\modernVoiceCautionaries}
instead.

@item \modernAccidentals
      @cindex @code{\modernAccidentals}
      This rule  corresponds to the common practice in the 20th
      century.
      The rule is  more complex than @code{\defaultAccidentals}.
      You get all the same accidentals, but temporary
      accidentals also get cancelled in other octaves. Further more,
      in the same octave, they also get cancelled in the following measure:
@lilypond[singleline,fragment,verbatim]
      \modernAccidentals
      cis' c'' cis'2 | c'' c'
@end lilypond

@item \modernCautionaries
      @cindex @code{\modernCautionaries}
     This rule is similar to @code{\modernAccidentals}, but the
     ``extra'' accidentals (the ones not typeset by
     @code{\defaultAccidentals}) are typeset as cautionary accidentals
     (i.e. in reduced size):
@lilypond[singleline,fragment,verbatim]
      \modernCautionaries
      cis' c'' cis'2 | c'' c'
@end lilypond

      @cindex @code{\modernVoiceAccidentals}
@item \modernVoiceAccidentals
is used for multivoice accidentals to be read both by musicians
playing one voice and musicians playing all voices.  Accidentals are
typeset for each voice, but they @emph{are} cancelled across voices in
the same @internalsref{Staff}.

      @cindex @code{\modernVoiceCautionaries}
@item \modernVoiceCautionaries
is the same as
@code{\modernVoiceAccidentals}, but with the extra accidentals (the
ones not typeset by @code{\voiceAccidentals}) typeset as cautionaries.
Even though all accidentals typeset by @code{\defaultAccidentals}
@emph{are} typeset by this macro then some of them are typeset as
cautionaries.

@item \pianoAccidentals
      @cindex @code{\pianoAccidentals}
      20th century practice for piano notation. Very similar to
      @code{\modernAccidentals} but accidentals also get cancelled
      across the staves in the same @internalsref{GrandStaff} or
      @internalsref{PianoStaff}.

@item \pianoCautionaries
      @cindex @code{\pianoCautionaries}
      As @code{\pianoAccidentals} but with the extra accidentals
      typeset as cautionaries.

@item \noResetKey
      @cindex @code{\noResetKey}
      Same as @code{\defaultAccidentals} but with accidentals lasting
      ``forever'' and not only until the next measure:
@lilypond[singleline,fragment,verbatim,relative]
      \noResetKey
      c1 cis cis c
@end lilypond

@item \forgetAccidentals
      @cindex @code{\forgetAccidentals}
      This is sort of the opposite of @code{\noResetKey}: Accidentals
      are not remembered at all - and hence all accidentals are
      typeset relative to the key signature, regardless of what was
      before in the music:
@lilypond[singleline,fragment,verbatim,relative]
      \forgetAccidentals
      \key d\major c4 c cis cis d d dis dis
@end lilypond
@end table

@node Defining your own accidental typesettings
@subsection Defining your own accidental typesettings

This section must be considered gurus-only, and hence it must be
sufficient with a short description of the system and a reference to
the internal documentation.

The algorithm tries several different rules, and uses the rule
that gives the highest number of accidentals.  Each rule consists of
@table @var
@item context:
      In which context is the rule applied. For example, if
@var{context} is @internalsref{Score} then all staves share
accidentals, and if @var{context} is @internalsref{Staff} then all
voices in the same staff share accidentals, but staves do not.
@item octavation:
      Whether the accidental changes all octaves or only the current
      octave.
@item lazyness:
      Over how many barlines the accidental lasts.
      If @var{lazyness} is @code{-1} then the accidental is forget
      immediately, and if @var{lazyness} is @code{#t} then the accidental
      lasts forever.

[TODO: should use  +infinity for this case?]

@end table

@seealso

@internalsref{Accidental_engraver},


@refbugs

Currently the simultaneous notes are considered to be entered in
sequential mode. This means that in a chord the accidentals are
typeset as if the notes in the chord happened one at a time - in the
order in which they appear in the input file.

This is only a problem when there are simultaneous notes whose
accidentals depend on each other.  The problem only occurs when using
non-default accidentals. In the default scheme, accidentals only
depend on other accidentals with the same pitch on the same staff, so
no conflicts possible.

This example shows two examples of the same music giving different
accidentals depending on the order in which the notes occur in the
input file:

@lilypond[singleline,fragment,verbatim]
\property Staff.autoAccidentals = #'( Staff (any-octave . 0) )
cis'4 <<c'' c'>> r2 | cis'4 <<c' c''>> r2
| <<cis' c''>> r | <<c'' cis'>> r | 
@end lilypond

This problem can be solved by manually inserting @code{!} and @code{?}
for the problematic notes.

@node Expressive marks
@section Expressive marks


@menu
* Slurs ::                      
* Phrasing slurs::              
* Breath marks::                
* Tempo::                       
* Text spanners::               
* Analysis brackets::           
@end menu

@node Slurs 
@subsection Slurs
@cindex Slurs

A slur indicates that notes are to be played bound or @emph{legato}.

@syntax

They are entered using parentheses:
@lilypond[fragment,verbatim,center]
  f'-( g'-)-( a'-) [a'8 b'-(-] a'4 g'2 f'4-)
  <<c' e'>>2-( <<b d'>>2-)
@end lilypond


@c TODO: should explain that ^( and _( set directions
@c should set attachments with ^ and _ ?  

Slurs avoid crossing stems, and are generally attached to note heads.
However, in some situations with beams, slurs may be attached to stem
ends.  If you want to override this layout you can do this through the
object property @code{attachment} of @internalsref{Slur} in
@internalsref{Voice} context.  Its value is a pair of symbols, specifying
the attachment type of the left and right end points.

@lilypond[fragment,relative,verbatim]
  \slurUp
  \property Voice.Stem \set #'length = #5.5
  g'8-(g g4-)
  \property Voice.Slur \set #'attachment = #'(stem . stem)
  g8-( g g4-)
@end lilypond

If a slur would strike through a stem or beam, the slur will be moved
away upward or downward. If this happens, attaching the slur to the
stems might look better:

@lilypond[fragment,relative,verbatim]
  \stemUp \slurUp
  d32-( d'4 d8..-)
  \property Voice.Slur \set #'attachment = #'(stem . stem)
  d,32-( d'4 d8..-)
@end lilypond

@seealso

@seeinternals{Slur}.


@refbugs

Producing nice slurs is a difficult problem, and LilyPond currently
uses a simple, empiric method to produce slurs. In some cases, the
results of this method are ugly.


@cindex Adjusting slurs

@node Phrasing slurs
@subsection Phrasing slurs

@cindex phrasing slurs
@cindex phrasing marks

A phrasing slur (or phrasing mark) connects chords and is used to
indicate a musical sentence. It is started using @code{\(} and @code{\)}
respectively.

@lilypond[fragment,verbatim,center,relative]
  \time 6/4 c'-\(  d-( e-) f-( e-)  d-\) 
@end lilypond

Typographically, the phrasing slur behaves almost exactly like a
normal slur.  Although they behave similar to normal slurs, phrasing
slurs count as different objects.  A @code{\slurUp} will have no
effect on a phrasing slur; instead, you should use
@code{\phrasingSlurUp}, @code{\phrasingSlurDown}, and
@code{\phrasingSlurBoth}.

The commands @code{\slurUp}, @code{\slurDown}, and @code{\slurBoth}
will only affect normal slurs and not phrasing slurs.

@seealso

See also @seeinternals{PhrasingSlur}. Phrasing slurs have the same
limitations in their formatting.

@node Breath marks
@subsection Breath marks

Breath marks are entered using @code{\breathe}.


@lilypond[fragment,relative]
c'4 \breathe d4
@end lilypond

The glyph of the breath mark can be tweaked by overriding the
@code{text} property of the @code{BreathingSign} grob with the name of
any glyph of @ref{The Feta font}.  For example,
@lilypond[fragment,verbatim,relative]
c'4
\property Voice.BreathingSign \override #'text = #"scripts-rvarcomma"
\breathe
d4
@end lilypond

@seealso 

@seeinternals{BreathingSign},
@inputfileref{input/regression/,breathing-sign.ly}.


@node Tempo
@subsection Tempo
@cindex Tempo
@cindex beats per minute
@cindex metronome marking

Metronome settings can be entered as follows:

@cindex @code{\tempo}
@example
  \tempo @var{duration} = @var{perminute} 
@end example

For example, @code{\tempo 4 = 76} requests output with 76 quarter notes
per minute.
  
@refbugs
  
The tempo setting is not printed, but is only used in the MIDI
output. You can trick lily into producing a metronome mark,
though. Details are in @ref{Text markup}.

[TODO: make note markup.]


@node Text spanners
@subsection Text spanners
@cindex Text spanners

Some textual indications, e.g. @i{rallentando} or @i{accelerando}, are
often extended over many measures. This is indicated by following the
text with a dotted line.  You can create such texts using text
spanners. The syntax is as follows:
@example
 \startTextSpan
 \stopTextSpan
@end example
The string to be printed, as well as the style, is set through object
properties.

An application is to fake octavation indications.

@lilypond[fragment,relative,verbatim]
 \relative c' {  a''' b c a
  \property Voice.TextSpanner \set #'type = #'dotted-line
  \property Voice.TextSpanner \set #'edge-height = #'(0 . 1.5)
  \property Voice.TextSpanner \set #'edge-text = #'("8va " . "")
  \property Staff.centralCPosition = #-13
  a-\startTextSpan b c a-\stopTextSpan }
@end lilypond


@seealso

@internalsref{TextSpanner}, @inputfileref{input/regression/,text-spanner.ly}.


@node Analysis brackets
@subsection Analysis brackets
@cindex brackets
@cindex phrasing brackets
@cindex musicological analysis
@cindex note grouping bracket

Brackets are used in musical analysis to indicate structure in musical
pieces. LilyPond supports a simple form of nested horizontal brackets.
To use this, add the @internalsref{Horizontal_bracket_engraver} to
@internalsref{Staff} context.  A bracket is started with
@code{\groupOpen} and closed with @code{\groupClose}. This produces
@internalsref{HorizontalBracket} objects.

@lilypond[singleline,verbatim]
\score { \notes \relative c'' {  
	c4-\groupOpen-\groupOpen
	c4-\groupClose
	c4-\groupOpen
        c4-\groupClose-\groupClose
  }
  \paper { \translator {
	    \StaffContext \consists "Horizontal_bracket_engraver"
	}}}
@end lilypond

@refbugs

Bracket endings should be angled/slanted. (TODO)
 


@node Ornaments
@section Ornaments
@cindex Ornaments

[TODO: ornaments vs. expressive marks]

@menu
* Articulations::               
* Text scripts::                
* Grace notes::                 
* Glissando ::                  
* Dynamics::                    
@end menu


@node Articulations
@subsection Articulations
@cindex Articulations

@cindex articulations
@cindex scripts
@cindex ornaments

A variety of symbols can appear above and below notes to indicate
different characteristics of the performance. They are added to a note
by adding a dash and the the character signifying the
articulation. They are demonstrated here.

@lilypondfile[notexidoc]{script-abbreviations.ly}

The script is automatically placed, but if you need to force
directions, you can use @code{_} to force them down, or @code{^} to
put them up:
@lilypond[fragment, verbatim]
  c''4^^ c''4_^
@end lilypond


Other symbols can be added using the syntax
@var{note}@code{-\}@var{name}. Again, they can be forced up or down
using @code{^} and @code{_}.

@cindex accent
@cindex marcato
@cindex staccatissimo
@cindex fermata
@cindex stopped
@cindex staccato
@cindex portato
@cindex tenuto
@cindex upbow
@cindex downbow
@cindex foot marks
@cindex organ pedal marks
@cindex turn
@cindex open
@cindex flageolet
@cindex reverseturn
@cindex trill
@cindex prall
@cindex mordent
@cindex prallprall
@cindex prallmordent
@cindex prall, up
@cindex prall, down
@cindex mordent
@cindex thumb marking
@cindex segno
@cindex coda
@cindex varcoda

@lilypondfile[notexidoc]{script-chart.ly}


@cindex fingering

Fingering instructions can also be entered in this shorthand. For
finger changes, use markup texts:
@c
@lilypond[verbatim, singleline, fragment]
      c'4-1 c'4-2 c'4-3 c'4-4
      c'^\markup { \fontsize #-3 \number "2-3" }
@end lilypond

@cindex finger change
@cindex scripts
@cindex superscript
@cindex subscript

@lilypond[verbatim,singleline,fragment,relative=1]
        << c-1  e-2 g-3 b-5 >> 4
	\property Voice.fingerHorizontalDirection = #LEFT
	<< c-1  es-3 g-5 >> 4
	\property Voice.fingerHorizontalDirection = #RIGHT
	<< c-1  e-2 g-3 b-5 >> 4-\arpeggio
	\property Voice.fingerHorizontalDirection = #LEFT
	<< c_1  e-2 g-3 b^5 >> 4
@end lilypond
        
@seealso

@internalsref{Script} and @internalsref{Fingering}.

@refbugs

All of these note ornaments appear in the printed output but have no
effect on the MIDI rendering of the music.


@node Text scripts
@subsection Text scripts
@cindex Text scripts

It is possible to place arbitrary strings of text or markup text (see
@ref{Text markup}) above or below notes by using a string:
@code{c^"text"}.  By default, these indications do not influence the
note spacing, but by using the command @code{\fatText}, the widths
will be taken into account.
@c
@lilypond[fragment,singleline,verbatim] \relative c' {
c4^"longtext" \fatText c4_"longlongtext" c4 }
@end lilypond

It is possible to use @TeX{} commands in the strings, but this should be
avoided because it makes it impossible for LilyPond to compute the
exact length of the string, which may lead to collisions.  Also, @TeX{}
commands will not work with direct PostScript output.

@seealso

@internalsref{TextScript} objects.

@ref{Text markup} describes how to change the font or access
special symbols in text scripts.



@node Grace notes
@subsection Grace notes



@cindex @code{\grace}
@cindex ornaments
@cindex grace notes

Grace notes are ornaments that are written out

@lilypond[relative=2,verbatim,ifragment] c4 \grace c16 c4 \grace {
[c16 d16] } c4
@end lilypond

In normal notation, grace notes take up no logical
time in a measure. Such an idea is practical for normal notation, but
is not strict enough to put it into a program. The model that LilyPond
uses for grace notes internally is that all timing is done in two
steps:

Every point in musical time consists of two rational numbers: one
denotes the logical time, one denotes the grace timing. The above
example is shown here with timing tuples.

@lilypond[]
\score { \notes \relative c''{ 
  c4^"(0,0)"  \grace c16_" "_"(1/4,-1/16)"  c4^"(1/4,0)"  \grace {
  [c16_"(2/4,-1/8)"  d16^"(2/4,-1/16)" ] } c4_" "_"(2/4,0)"
  }
\paper {  linewidth = 8.\cm }
}
@end lilypond


The placement of these grace notes is synchronized between different
staves.

@lilypond[relative=2,verbatim,fragment] 
< \context Staff = SA { e4 \grace { c16-[ d e f-] } e4 }
  \context Staff = SB { c'4 \grace { g8 b } c4 } >
@end lilypond


Unbeamed eighth notes and shorter by default have a slash through the
stem. This can be controlled with object property @code{stroke-style} of
@internalsref{Stem}. The change in formatting is accomplished by
inserting @code{\startGraceMusic} before handling the grace notes, and
@code{\stopGraceMusic} after finishing the grace notes.
You can add to these definitions to globally change grace note
formatting. The standard definitions are in @file{ly/grace-init.ly}.

[TODO discuss Scheme functionality.]


The @code{\override} is carefully matched with a @code{\revert}.

@cindex slash
@cindex grace slash

@lilypond[fragment,verbatim]
\relative c'' \context Voice {
  \grace c8 c4 \grace { [c16 c16] } c4
  \grace { 
    \property Voice.Stem \override #'stroke-style = #'() 
    c16 
    \property Voice.Stem \revert #'stroke-style
  } c4
}
@end lilypond



If you want to end a note with a grace note, then the standard trick
is to put the grace notes before a phantom ``space note'', e.g.
@lilypond[fragment,verbatim, relative=2]
\context Voice {
    < { d1^\trill ( }
     { s2 \grace { [c16 d] } } >
   )c4
}
@end lilypond

A @code{\grace} section has some default values, and LilyPond will
use those default values unless you specify otherwise inside the
@code{\grace} section.  For example, if you specify \slurUp
@emph{before} your @code{\grace} section, a slur which starts inside
the @code{\grace} will not be forced up, even if the slur ends outside
of the @code{\grace}.  Note the difference between the first and
second bars in this example:

@lilypond[fragment,verbatim]
\relative c'' \context Voice {
    \slurUp
    \grace {
        a4 ( }
    ) a4 a4 () a2
    \slurBoth

    \grace {
        \slurUp
        a4 ( }
    ) a4 a4 () a2
    \slurBoth

}
@end lilypond


@refbugs

Grace notes can not be used in the smallest size (@file{paper11.ly}).

Grace note synchronization can also lead to surprises. Staff notation,
such as key signatures, barlines, etc. are also synchronized. Take
care when you mix staves with grace notes and staves without.

@lilypond[relative=2,verbatim,fragment]
< \context Staff = SA { e4 \bar "|:" \grace c16 d4 }
  \context Staff = SB { c4 \bar "|:"  d4 } >
@end lilypond

Grace sections should only be used within sequential music
expressions.  Nesting, juxtaposing, or ending sequential music with a
grace section is not supported, and might produce crashes or other
errors.


@node Glissando 
@subsection Glissando
@cindex Glissando 

@cindex @code{\glissando}

A glissando is a smooth change in pitch. It is denoted by a line or a
wavy line between two notes.

@syntax

A glissando line can be requested by attaching a @code{\glissando} to
a note:

@lilypond[fragment,relative,verbatim]
  c'-\glissando c'
@end lilypond

@seealso

@seeinternals{Glissando}.


@refbugs

Printing of an additional text (such as @emph{gliss.}) must be done
manually.


@node Dynamics
@subsection Dynamics
@cindex Dynamics



@cindex @code{\ppp}
@cindex @code{\pp}
@cindex @code{\p}
@cindex @code{\mp}
@cindex @code{\mf}
@cindex @code{\f}
@cindex @code{\ff}
@cindex @code{\fff}
@cindex @code{\ffff}
@cindex @code{\fp}
@cindex @code{\sf}
@cindex @code{\sff}
@cindex @code{\sp}
@cindex @code{\spp}
@cindex @code{\sfz}
@cindex @code{\rfz}


Absolute dynamic marks are specified using an identifier after a
note: @code{c4-\ff}.  The available dynamic marks are: @code{\ppp},
@code{\pp}, @code{\p}, @code{\mp}, @code{\mf}, @code{\f}, @code{\ff},
@code{\fff}, @code{\fff}, @code{\fp}, @code{\sf}, @code{\sff},
@code{\sp}, @code{\spp}, @code{\sfz}, and @code{\rfz}.

@lilypond[verbatim,singleline,fragment,relative]
  c'-\ppp c-\pp c -\p c-\mp c-\mf c-\f c-\ff c-\fff
  c2-\sf c-\rfz
@end lilypond

@cindex @code{\cr}
@cindex @code{\rc}
@cindex @code{\decr}
@cindex @code{\rced}
@cindex @code{\<}
@cindex @code{\>}
@cindex @code{\"!}



A crescendo mark is started with @code{\cr} and terminated with
@code{\endcr}, and decrescendi similarly with @code{\decr} and
@code{\enddecr}.  There are also shorthands for these marks.  A
crescendo can be started with @code{\<} and a decrescendo can be
started with @code{\>}.  Either one can be terminated with @code{\!}.
Because these marks are bound to notes, if you must use spacer notes
if marks during one note are needed.

@lilypond[fragment,verbatim,center,quote]
  c''-\< c''-\!   d''-\decr e''-\rced 
  < f''1 { s4 s4-\< s4-\! \>  s4-\! } >
@end lilypond
This may give rise to very short hairpins. Use @code{minimum-length}
in @internalsref{Voice}.@internalsref{HairPin} to lengthen these, e.g.

@example
 \property Staff.Hairpin \override #'minimum-length = #5
@end example

You can also use a text saying @emph{cresc.} instead of hairpins. Here
is an example how to do it:

@lilypond[fragment,relative=2,verbatim]
  c4 \cresc c4 \endcresc c4
@end lilypond


@cindex crescendo
@cindex decrescendo

You can also supply your own texts:
@lilypond[fragment,relative,verbatim]
  \context Voice {
    \property Voice.crescendoText = "cresc. poco"
    \property Voice.crescendoSpanner = #'dashed-line
    a'2-\mf-\< a a a-\!
  }
@end lilypond

@cindex diminuendo

@seealso

Dynamics are objects of @internalsref{DynamicText} and
@internalsref{Hairpin}. Vertical positioning of these symbols is
handled by the @internalsref{DynamicLineSpanner} object.

If you want to adjust padding or vertical direction of the dynamics,
you must set properties for the @internalsref{DynamicLineSpanner}
object. Predefined identifiers to set the vertical direction are
\dynamicUp and \dynamicDown.

@cindex direction, of dynamics
@cindex @code{\dynamicDown}
@cindex @code{\dynamicUp}


@node Repeats
@section Repeats


@cindex repeats
@cindex @code{\repeat}

To specify repeats, use the @code{\repeat} keyword.  Since repeats
should work differently when played or printed, there are a few
different variants of repeats.

@table @code
@item unfold
Repeated music is fully written (played) out.  Useful for MIDI
output, and entering repetitive music.

@item volta
This is the normal notation: Repeats are not written out, but
alternative endings (voltas) are printed, left to right.

@ignore
@item fold
Alternative endings are written stacked. This has limited use but may be
used to typeset two lines of lyrics in songs with repeats, see
@inputfileref{input,star-spangled-banner.ly}.
@end ignore

@item tremolo
Make tremolo beams.

@item percent
Make beat or measure repeats. These look like percent signs.

@end table  

@menu
* Repeat syntax::               
* Repeats and MIDI::            
* Manual repeat commands::      
* Tremolo repeats::             
* Tremolo subdivisions::        
* Measure repeats::             
@end menu

@node Repeat syntax
@subsection Repeat syntax


Repetition is a central concept in music, and multiple notations exist
for repetitions.

@syntax

LilyPond has one syntactic construct for specifying different types of
repeats.  The syntax is

@example
  \repeat @var{variant} @var{repeatcount} @var{repeatbody}
@end example

If you have alternative endings, you may add
@cindex @code{\alternative}
@example
 \alternative @code{@{} @var{alternative1}
            @var{alternative2}
            @var{alternative3} @dots{} @code{@}}
@end example
where each @var{alternative} is a music expression.  If you do not
give enough alternatives for all of the repeats, then the first
alternative is assumed to be played more than once.

Normal notation repeats are used like this:
@lilypond[fragment,verbatim]
  c'1
  \repeat volta 2 { c'4 d' e' f' }
  \repeat volta 2 { f' e' d' c' }
@end lilypond

With alternative endings:
@lilypond[fragment,verbatim]
  c'1
  \repeat volta 2 {c'4 d' e' f'} 
  \alternative { {d'2 d'} {f' f} }
@end lilypond

@ignore
Folded repeats look like this:


@li lypond[fragment,verbatim]
  c'1
  \repeat fold 2 {c'4 d' e' f'} 
  \alternative { {d'2 d'} {f' f} }

@end lilypond
@end ignore


@lilypond[fragment,verbatim]
\context Staff {
  \relative c' {
    \partial 4
    \repeat volta 4 { e | c2 d2 | e2 f2 | }
    \alternative { { g4 g g } { a | a a a a | b2. } }
  }
}
@end lilypond

@node Repeats and MIDI
@subsection Repeats and MIDI

@cindex expanding repeats

For instructions on how to unfold repeats for MIDI output, see the
example file @inputfileref{input/test,unfold-all-repeats.ly}.


@refbugs

Timing information is not remembered at the start of an alternative,
so you have to reset timing information after a repeat, e.g. using a
bar-check (See @ref{Bar check}), setting @code{Score.measurePosition}
or entering @code{\partial}.  Slurs or ties are also not repeated.


@node Manual repeat commands
@subsection Manual repeat commands

@cindex @code{repeatCommands}

The property @code{repeatCommands} can be used to control the layout of
repeats. Its value is a Scheme list of repeat commands, where each repeat
command can be

@table @code
@item 'start-repeat
 Print a |: bar line
@item 'end-repeat
 Print a :| bar line
@item (volta . @var{text})
 Print a volta bracket saying @var{text}. The text can be specified as
a text string or as a markup text, see @ref{Text markup}. Do not
forget to change the font, as the default number font does not contain
alphabetic characters.
@item (volta . #f) 
 Stop a running volta bracket
@end table

@lilypond[verbatim, fragment]
 c''4
    \property Score.repeatCommands = #'((volta "93") end-repeat)
 c''4 c''4
    \property Score.repeatCommands = #'((volta #f))
 c''4 c''4
@end lilypond


@seealso

Repeat brackets are @internalsref{VoltaBracket} objects.

@node Tremolo repeats
@subsection Tremolo repeats
@cindex tremolo beams

To place tremolo marks between notes, use @code{\repeat} with tremolo
style.  
@lilypond[verbatim,center,singleline]
\score { 
  \context Voice \notes\relative c' {
    \repeat "tremolo" 8 { c16 d16 }
    \repeat "tremolo" 4 { c16 d16 }    
    \repeat "tremolo" 2 { c16 d16 }
    \repeat "tremolo" 4 c16
  }
}
@end lilypond

@seealso

Tremolo beams are @internalsref{Beam} objects. Single stem tremolos are
@internalsref{StemTremolo}. 

@refbugs

The single stem tremolo @emph{must} be entered without @code{@{} and
@code{@}}.

@node Tremolo subdivisions
@subsection Tremolo subdivisions
@cindex tremolo marks
@cindex @code{tremoloFlags}

Tremolo marks can be printed on a single note by adding
`@code{:}[@var{length}]' after the note.  The length must be at least 8.
A @var{length} value of 8 gives one line across the note stem.  If the
length is omitted, then then the last value (stored in
@code{Voice.tremoloFlags}) is used.

@lilypond[verbatim,fragment,center]
  c'2:8 c':32 | c': c': |
@end lilypond

[TODO : stok is te kort bij 32en]

@refbugs

Tremolos in this style do not carry over into the MIDI output.


@node Measure repeats
@subsection Measure repeats

@cindex percent repeats
@cindex measure repeats

In the @code{percent} style, a note pattern can be repeated. It is
printed once, and then the pattern is replaced with a special sign.
Patterns of a one and two measures are replaced by percent-like signs,
patterns that divide the measure length are replaced by slashes.

@lilypond[verbatim,singleline]
 \context Voice { \repeat  "percent" 4  { c'4 }
    \repeat "percent" 2 { c'2 es'2 f'4 fis'4 g'4 c''4 }
}
@end lilypond   

@seealso

@internalsref{RepeatSlash}, @internalsref{PercentRepeat}, and
@internalsref{DoublePercentRepeat}.

@refbugs

You can not nest percent repeats, e.g. by filling in the first measure
with slashes, and repeating that measure with percents.

@node Rhythmic music
@section Rhythmic music

Sometimes you might want to show only the rhythm of a melody.  This can
be done with the rhythmic staff. All pitches of notes on such a staff
are squashed, and the  staff itself  looks has  a single staff line:

@lilypond[fragment,relative,verbatim]
  \context RhythmicStaff {
      \time 4/4
      c4 e8 f  g2 | r4 g r2 | g1:32 | r1 |
  }
@end lilypond

@menu
* Percussion staves::           
* Percussion midi output::      
@end menu

@node Percussion staves
@subsection Percussion staves
@cindex percussion
@cindex drums

To typeset more than one piece of percussion to be played by the same
musician one typically uses a multiline staff where each staff
position refers to a specific piece of percussion.

@syntax

LilyPond is has a set of Scheme functions that can be used to typeset
percussion staves. The system is based on the general MIDI
drum-pitches.  Include @file{ly/drumpitch-init.ly} to use drum
pitches. This file defines the pitches from the Scheme variable
@code{drum-pitch-names}, the definition of which can be read in
@file{scm/drums.scm}.  Each piece of percussion has a full name and an
abbreviated name, and both the full name or the abbreviation may be
used in input files.

To typeset the music on a staff apply the function @code{drums->paper}
to the percussion music. This function takes a list of percussion
instrument names, notehead scripts and staff positions (that is:
pitches relative to the C-clef) and transforms the input
music by moving the pitch, changing the notehead and (optionally)
adding a script:
@c
@lilypond[singleline,verbatim,quote]
\include "drumpitch-init.ly"
up = \notes { crashcymbal4 hihat8 halfopenhihat hh hh hh openhihat }
down = \notes { bassdrum4 snare8 bd r bd sn4 }
\score {
    \apply #(drums->paper 'drums) \context Staff <
        \clef percussion
        \context Voice = up { \voiceOne \up }
        \context Voice = down { \voiceTwo \down }
    >
}

@end lilypond
In the above example the music was transformed using the list @code{'drums}.
Currently the following lists are defined in @file{scm/drums.scm}:
@table @code
@item 'drums
To typeset a typical drum kit on a five-line staff.

@lilypond[noindent]
\include "drumpitch-init.ly"
nam = \lyrics { cymc cyms cymr hh hhc hho hhho hhp cb hc
    bd sn ss tomh tommh tomml toml tomfh tomfl }
mus = \notes  { cymc cyms cymr hh hhc hho hhho hhp cb hc
    bd sn ss tomh tommh tomml toml tomfh tomfl s16 }
\score {
    <
        \apply #(drums->paper 'drums) \context Staff <
            \clef percussion
            \mus
        >
        \context Lyrics \nam 
    >
    \paper {
        linewidth = 100.0\mm
        \translator {
            \StaffContext
            \remove Bar_engraver
            \remove Time_signature_engraver
            minimumVerticalExtent = #'(-4.0 . 5.0)
        }
        \translator {
            \VoiceContext
            \remove Stem_engraver
        }
   }   
}
@end lilypond

Scheme supports six different toms.  When there fewer toms, simply
select the toms that produce the desired result, i.e., to get toms on
the three middle lines you use @code{tommh}, @code{tomml} and
@code{tomfh}.

Because general MIDI does not contain rimshots the sidestick is used
for this purpose instead.
@item 'timbales
To typeset timbales on a two line staff.
@lilypond[singleline]
\include "drumpitch-init.ly"
nam = \lyrics { timh ssh timl ssl cb }
mus = \notes  { timh ssh timl ssl cb s16 }
\score {
    <
        \apply #(drums->paper 'timbales) \context Staff <
            \clef percussion
            \mus
        >
        \context Lyrics \nam 
    >
    \paper {
        \translator {
            \StaffContext
            \remove Bar_engraver
            \remove Time_signature_engraver
            StaffSymbol \override #'line-count = #2
            StaffSymbol \override #'staff-space = #2
            minimumVerticalExtent = #'(-3.0 . 4.0)
        }
        \translator {
            \VoiceContext
            \remove Stem_engraver
        }

    }   
}
@end lilypond
@item 'congas
To typeset congas on a two line staff.
@lilypond[singleline]
\include "drumpitch-init.ly"
nam = \lyrics { cgh cgho cghm ssh cgl cglo cglm ssl }
mus = \notes  { cgh cgho cghm ssh cgl cglo cglm ssl s16 }
\score {
    <
        \apply #(drums->paper 'congas) \context Staff <
            \clef percussion
            \mus
        >
        \context Lyrics \nam 
    >
    \paper {
        \translator {
            \StaffContext
            \remove Bar_engraver
            \remove Time_signature_engraver
            StaffSymbol \override #'line-count = #2
            StaffSymbol \override #'staff-space = #2
            minimumVerticalExtent = #'(-3.0 . 4.0)
        }
        \translator {
            \VoiceContext
            \remove Stem_engraver
        }
    }   
}
@end lilypond
@item 'bongos
To typeset bongos on a two line staff.
@lilypond[singleline]
\include "drumpitch-init.ly"
nam = \lyrics { boh boho bohm ssh bol bolo bolm ssl }
mus = \notes  { boh boho bohm ssh bol bolo bolm ssl s16 }
\score {
    <
        \apply #(drums->paper 'bongos) \context Staff <
            \clef percussion
            \mus
        >
        \context Lyrics \nam 
    >
    \paper {
        \translator {
            \StaffContext
            \remove Bar_engraver
            \remove Time_signature_engraver
            StaffSymbol \override #'line-count = #2
            StaffSymbol \override #'staff-space = #2
            minimumVerticalExtent = #'(-3.0 . 4.0)
        }
        \translator {
            \VoiceContext
            \remove Stem_engraver
        }
    }   
}
@end lilypond
@item 'percussion
To typeset all kinds of simple percussion on one line staves.
@lilypond[singleline]
\include "drumpitch-init.ly"
nam = \lyrics { tri trio trim gui guis guil cb cl tamb cab mar hc }
mus = \notes  { tri trio trim gui guis guil cb cl tamb cab mar hc s16 }
\score {
    <
        \apply #(drums->paper 'percussion) \context Staff <
            \clef percussion
            \mus
        >
        \context Lyrics \nam 
    >
    \paper {
        \translator {
            \StaffContext
            \remove Bar_engraver
            \remove Time_signature_engraver
            StaffSymbol \override #'line-count = #1
            minimumVerticalExtent = #'(-2.0 . 3.0)
        }
        \translator {
            \VoiceContext
            \remove Stem_engraver
        }
    }   
}
@end lilypond
@end table

If you do not like any of the predefined lists you can define your own
list at the top of your file:

@lilypond[singleline, verbatim]
#(define mydrums `(
        (bassdrum     default   #f        ,(ly:make-pitch -1 2 0))
        (snare        default   #f        ,(ly:make-pitch 0 1 0))
        (hihat        cross     #f        ,(ly:make-pitch 0 5 0))
        (pedalhihat   xcircle   "stopped" ,(ly:make-pitch 0 5 0))
        (lowtom	      diamond   #f        ,(ly:make-pitch -1 6 0))
))
\include "drumpitch-init.ly"
up = \notes { hh8 hh hh hh hhp4 hhp }
down = \notes { bd4 sn bd toml8 toml }
\score {    
    \apply #(drums->paper 'mydrums) \context Staff <
        \clef percussion
        \context Voice = up { \voiceOne \up }
        \context Voice = down { \voiceTwo \down }
    >
}
@end lilypond

To use a modified existing list, one can prepend modifications to the
the existing list:

@example
#(define mydrums (append `(
   (bassdrum default #f ,(ly:make-pitch -1 2 0))
   (lowtom   diamond #f ,(ly:make-pitch -1 6 0))
) drums ))
@end example

The file @file{drumpitch-init.ly} replaces the normal pitch names, so
you have to reinclude @file{nederlands.ly} after the
drum-pattern-definitions to enter normal notes.
@c
@lilypond[singleline,verbatim]
\include "drumpitch-init.ly"
up = \notes { crashcymbal4 hihat8 halfopenhihat hh hh hh openhihat }
down = \notes { bassdrum4 snare8 bd r bd sn4 }
\include "nederlands.ly"
bass = \notes \transpose c c,, { a4. e8 r e g e }
\score {
    <
        \apply #(drums->paper 'drums) \context Staff = drums <
            \clef percussion
            \context Voice = up { \voiceOne \up }
            \context Voice = down { \voiceTwo \down }
        >
        \context Staff = bass { \clef "F_8" \bass }
    >
}
@end lilypond

@node Percussion midi output
@subsection Percussion midi output

In order to produce correct midi output you need to produce two score
blocks---one for the paper and one for the midi output.  To use the
percussion channel you set the property @code{instrument} to
@code{'drums}. Because the drum-pitches themself are similar to the
general midi pitches all you have to do is to insert the voices with
none of the scheme functions to get the correct midi output:

@example
\score @{    
    \apply #(drums->paper 'mydrums) \context Staff <
        \clef percussion
        @{ \up @}  \\
        @{ \down @}
    >
    \paper@{@}
@}
\score @{    
    \context Staff <
        \property Staff.instrument = #'drums
        \up \down
    >
    \midi@{@}
@}
@end example

@refbugs

This scheme is to be considered a temporary implementation.


@node Piano music
@section Piano music

Piano staves are two normal staves coupled with a brace.  The staves
are largely independent, but sometimes voices can cross between the
two staves.  The same notation is also used for harps and other key
instruments.  The @internalsref{PianoStaff} is especially built to
handle this cross-staffing behavior.  In this section we discuss the
@internalsref{PianoStaff} and some other pianistic peculiarities.


@menu
* Automatic staff changes::     
* Manual staff switches::       
* Pedals::                      
* Arpeggio::                    
* Voice follower lines::        
@end menu 

@refbugs

There is no support for putting chords across staves.  You can get
this result by increasing the length of the stem in the lower stave so
it reaches the stem in the upper stave, or vice versa. An example is
included with the distribution as @inputfileref{input/test,stem-cross-staff.ly}.

Dynamics are not centered, but kludges do exist. See
@inputfileref{input/templates,piano-dynamics.ly}.

@cindex cross staff stem
@cindex stem, cross staff


@c fixme: should have hyperlinks as well.





@node Automatic staff changes
@subsection Automatic staff changes
@cindex Automatic staff changes

Voices can switch automatically between the top and the bottom
staff. The syntax for this is
@example
  \autochange Staff \context Voice @{ @dots{}@var{music}@dots{} @}
@end example        
The autochanger switches on basis of pitch (central C is the turning
point), and it looks ahead skipping over rests to switch rests in
advance. Here is a practical example:
        
@lilypond[verbatim,singleline,quote]
\score { \notes \context PianoStaff <
  \context Staff = "up" {
    \autochange Staff \context Voice = VA < \relative c' {
       g4 a  b c d r4 a g } > }
  \context Staff = "down" {
       \clef bass
       s1*2
} > }
@end lilypond
Spacer rests are used to prevent the bottom staff from
terminating too soon.


@refbugs

The staff switches often do not end up in optimal places. For high
quality output staff switches should be specified manually.

 

@node Manual staff switches
@subsection Manual staff switches

@cindex manual staff switches
@cindex staff switch, manual

Voices can be switched between staves manually, using the following command:
@example
  \translator Staff = @var{staffname} @var{music}
@end example
The string @var{staffname} is the name of the staff. It switches the
current voice from its current staff to the Staff called
@var{staffname}. Typically @var{staffname} is @code{"up"} or
@code{"down"}.


@node Pedals
@subsection Pedals
@cindex Pedals

Pianos have pedals that alter the way sound are produced. Generally, a
piano has three pedals, sustain, una corda, and sostenuto.

@syntax

Piano pedal instruction can be expressed by attaching
@code{\sustainDown}, @code{\sustainUp}, @code{\unaCorda},
@code{\treCorde}, @code{\sostenutoDown} and @code{\sostenutoUp} to a
note or chord.

The symbols that are printed can be modified by setting
@code{pedal@var{X}Strings}, where @var{X} is one of the pedal types:
Sustain, Sostenuto or UnaCorda.  Refer to the generated documentation
of @internalsref{SustainPedal} for more information.

Pedals can also be indicated by a sequence of brackets, by setting the 
@code{pedal-type} property of @internalsref{SustainPedal} objects: 

@lilypond[fragment,verbatim]
\property Staff.SustainPedal \override #'pedal-type = #'bracket
 c''4-\sustainDown d''4 e''4
 a'4-\sustainUp-\sustainDown
 f'4 g'4 a'4-\sustainUp
@end lilypond

A third style of pedal notation is a mixture of text and brackets,
obtained by setting @code{pedal-type} to @code{mixed}:

@lilypond[fragment,verbatim]
\property Staff.SustainPedal \override #'pedal-type = #'mixed
c''4-\sustainDown d''4 e''4
c'4-\sustainUp-\sustainDown
 f'4 g'4 a'4-\sustainUp
@end lilypond

The default '*Ped' style for sustain and damper pedals corresponds to
@code{\pedal-type = #'text}. However, @code{mixed} is the default style
for a sostenuto pedal:

@lilypond[fragment,verbatim]
c''4-\sostenutoDown d''4 e''4 c'4 f'4 g'4 a'4-\sostenutoUp
@end lilypond

For fine-tuning of the appearance of a pedal bracket, the properties
@code{edge-width}, @code{edge-height}, and @code{shorten-pair} of
@code{PianoPedalBracket} objects (see the detailed documentation of
@internalsref{PianoPedalBracket}) can be modified.  For example, the bracket
may be extended to the end of the note head.

@lilypond[fragment,verbatim]
\property Staff.PianoPedalBracket \override
   #'shorten-pair = #'(0 . -1.0)
c''4-\sostenutoDown d''4 e''4 c'4
f'4 g'4 a'4-\sostenutoUp
@end lilypond

@node Arpeggio
@subsection Arpeggio
@cindex Arpeggio

@cindex broken arpeggio
@cindex @code{\arpeggio}

You can specify an arpeggio sign on a chord by attaching an
@code{\arpeggio} to a chord.


@lilypond[fragment,relative,verbatim]
  <<c e g c>>-\arpeggio
@end lilypond

When an arpeggio crosses staves in piano music, you attach an arpeggio
to the chords in both staves, and set
@internalsref{PianoStaff}.@code{connectArpeggios}.

@lilypond[fragment,relative,verbatim]
  \context PianoStaff <
    \property PianoStaff.connectArpeggios = ##t
    \context Voice = one  { <<c' e g c>>-\arpeggio }
    \context Voice = other { \clef bass  <<c,, e g>>-\arpeggio }
  >
@end lilypond

This command creates @internalsref{Arpeggio} objects.  Cross staff
arpeggios are @internalsref{PianoStaff}.@internalsref{Arpeggio}.

The direction of the arpeggio is sometimes denoted by adding an
arrowhead to the wiggly line.  This can be typeset by setting
@code{arpeggio-direction}.

@lilypond[fragment,relative,verbatim]
  \context Voice {
     \property Voice.Arpeggio \set #'arpeggio-direction = #1
     <<c e g c>>-\arpeggio
     \property Voice.Arpeggio \set #'arpeggio-direction = #-1
     <<c e g c>>-\arpeggio
  }
@end lilypond

A square bracket on the left indicates that the player should not
arpeggiate the chord. To draw these brackets, set the
@code{molecule-callback} property of @code{Arpeggio} or
@code{PianoStaff.Arpeggio} objects to @code{\arpeggioBracket}, and use
@code{\arpeggio} statements within the chords as before.

@lilypond[fragment,relative,verbatim]
    \property PianoStaff.Arpeggio \override
        #'molecule-callback = \arpeggioBracket
       <<c' e g c>>-\arpeggio
@end lilypond


@refbugs

It is not possible to mix connected arpeggios and unconnected
arpeggios in one @internalsref{PianoStaff} at the same time.

@node  Voice follower lines
@subsection Voice follower lines


[TODO: invent better name]

@cindex follow voice
@cindex staff switching
@cindex cross staff

@cindex @code{followVoice}

Whenever a voice switches to another staff a line connecting the notes
can be printed automatically. This is enabled if the property
@code{PianoStaff.followVoice} is set to true:

@lilypond[fragment,relative,verbatim]
  \context PianoStaff <
    \property PianoStaff.followVoice = ##t
    \context Staff \context Voice {
      c1
      \translator Staff=two
      b2 a
    }
    \context Staff=two { \clef bass \skip 1*2 }
  >  
@end lilypond

The associated object is @internalsref{VoiceFollower}.


@node Vocal music
@section Vocal music

For a discussion of how to put lyrics into a score, see section
@code{Printing lyrics} in the tutorial.

[TODO: Move lyrics section from tutorial to here?]

See also the sections on @ref{Slurs} and @ref{Breath marks}.

[TODO: Move slurs / breath marks section to here?]

[TODO: Write subsection upon usage of ChoirStaff.]

For entering quotes in Lyrics mode, use the following
@example
"\"God\"" is "`King'"
@end example

You can use empty syllables, e.g. @code{_4} or @code{" "4} to enter
lyrics. This can confuse the LilyPond -- for example, this might put
(empty) lyrics under rests. To remedy this, use @code{\skip}.


@menu
* Ambitus::                     
@end menu

@node Ambitus
@subsection Ambitus
@cindex ambitus

The term @emph{ambitus} denotes a range of pitches for a given voice in
a part of music.  It also may denote the pitch range that a musical
instrument is capable of playing.  Most musical instruments have their
ambitus standardized (or at least there is agreement upon the minimal
ambitus of a particular type of instrument), such that a composer or
arranger of a piece of music can easily meet the ambitus constraints of
the targeted instrument.  However, the ambitus of the human voice
depends on individual physiological state, including education and
training of the voice.  Therefore, a singer potentially has to check for
each piece of music if the ambitus of that piece meets his individual
capabilities.  This is why the ambitus of a piece may be of particular
value to vocal performers.

The ambitus is typically notated on a per-voice basis at the very
beginning of a piece, e.g. nearby the initial clef or time signature of
each staff.  The range is graphically specified by two noteheads, that
represent the minimum and maximum pitch.  Some publishers use a textual
notation: they put the range in words in front of the corresponding
staff.  Lilypond currently only supports the graphical ambitus notation.

To apply, add the @internalsref{Ambitus_engraver} to the
@internalsref{Voice} context, i.e.

@example
  \paper @{ \translator @{
      \VoiceContext
      \consists Ambitus_engraver
    @} @}
@end example

For example,

@lilypond[singleline]
upper = \notes \relative c {
  \clef "treble"
  \key c \minor
  as'' c e2 bes f cis d4 e f2 g
}
lower = \notes \relative c {
  \clef "treble"
  \key e \major
  e'4 b g a c es fis a cis b a g f e d2
}
\score {
  \context ChoirStaff {
    <
      \context Staff = one { \upper }
      \context Staff = three { \lower }
    >
  }
  \paper {
    \translator {
      \VoiceContext
      \consists Ambitus_engraver
    }
  }
}
@end lilypond


@seealso

@internalsref{Ambitus}, @inputfileref{input/regression/,ambitus.ly}.

@node Tablatures
@section Tablatures

Tablature notation is used for notating music for plucked string
instruments.  It notates pitches not by using note heads, but by
indicating on which string and fret a note must be played.  LilyPond
offers limited support for tablature.

@menu
* Tablatures basic::            
* Non-guitar tablatures::       
@end menu

@node Tablatures basic
@subsection Tablatures basic
@cindex Tablatures basic

The string number associated to a note is given as a backslash
followed by a number, e.g. @code{c4\3} for a C quarter on the third
string. By default, string 1 is the highest one, and the tuning
defaults to the standard guitar tuning (with 6 strings).  The notes
are printed as tablature, by using @internalsref{TabStaff} and
@internalsref{TabVoice} contexts.

@lilypond[fragment,verbatim]
\notes \context TabStaff  {
 a,4\5 c'\2 a\3 e'\1
 e\4 c'\2 a\3 e'\1
}
@end lilypond

If you do not specify a string number then one is selected
automatically: the first string that does not give a fret number less
than @code{minimumFret} is selected. The default value for
@code{minimumFret} is 0.


@example
e8 fis gis a b cis' dis' e'
\property TabStaff.minimumFret = #8
e8 fis gis a b cis' dis' e'
@end example
@lilypond[noindent]
frag = \notes {
    \key e \major
    e8 fis gis a b cis' dis' e'
    \property TabStaff.minimumFret = #8
    e8 fis gis a b cis' dis' e'
}
\score {
  \context StaffGroup <
    \context Staff { \clef "G_8" \frag }
    \context TabStaff { \frag }
  >
}
@end lilypond

@seealso

@internalsref{TabStaff}, @internalsref{TabVoice}

@refbugs

Chords are not handled in a special way, and hence the automatic
string selector may easily select the same string to two notes in a
chord.


@node Non-guitar tablatures
@subsection Non-guitar tablatures
@cindex Non-guitar tablatures

 You can change the number of strings, by setting the number of lines
in the @internalsref{TabStaff} (the @code{line-count} property of
@internalsref{TabStaff} can only be changed using
@code{\outputproperty}, for more information, see @ref{Tuning per
object}.

You can change the tuning of the strings. A string tuning is given as
a Scheme list with one integer number for each string, the number
being the pitch (measured in semitones relative to central C) of an
open string.  The numbers specified for @code{stringTuning} are the
numbers of semitones to subtract or add, starting the specified pitch
by default middle C, in string order: thus the notes are e, a, d, and
g.

@lilypond[fragment,verbatim]
  \context TabStaff <

    \outputproperty #(make-type-checker 'staff-symbol-interface)
                    #'line-count = #4
    \property TabStaff.stringTunings =  #'(-5 -10 -15 -20)
    
    \notes {
      a,4 c' a e' e c' a e'
    }
  > 
@end lilypond

Finally, it is possible to change the Scheme function to format the
tablature note text. The default is
@var{fret-number-tablature-format}, which uses the fret number. For
some instruments that do not use this notation, you can create a
special tablature formatting function. This function takes three
argument: the string number, the string tuning and the note pitch.

@refbugs

As tablature is a recent feature, most of the guitar special effects
such as bend are not yet supported.


@node Chords
@section Chords
@cindex Chords

LilyPond has support for both entering and printing chords. 
@lilypond[verbatim,singleline]
twoWays = \notes \transpose c c' {
  \chords {
    c1 f:sus4 bes/f
  }
  <<c e g>>
  <<f bes c'>>
  <<f bes d'>>
  }

\score {
   < \context ChordNames \twoWays
     \context Voice \twoWays > }
@end lilypond

This example also shows that the chord printing routines do not try to
be intelligent. If you enter @code{f bes d}, it does not interpret
this as an inversion.

Chords are represented as a set of pitches. They are internally
stored as simultaneous music expressions. This means you can enter
chords by name and print them as notes, enter them as notes and print
them as chord names, or (the most common case) enter them by name, and
print them as name.

@menu
* Chords mode::                 
* Printing chord names::       
@end menu


@node Chords mode
@subsection Chords mode
@cindex Chords mode

Chord mode is a mode where you can input sets of pitches using common
names.  It is introduced by the keyword @code{\chords}.
In chords mode,  a  chord is entered by the root, which is entered
like a common pitch, for example,
@lilypond[fragment,verbatim,quote, relative=1]
\chords { es4.  d8 c2 }
@end lilypond
@cindex chord entry
@cindex chord mode

Other chords may be entered by suffixing a colon, and introducing a
modifier, and optionally, a number, for example
@c
@lilypond[fragment,verbatim,quote]
\chords { e1:m e1:7 e1:m7  }
@end lilypond
The first number following the root is taken to be the `type' of the
chord, thirds are added to the root until it reaches the specified
number, for example.
@lilypond[fragment,verbatim]
 \chords { c:3 c:5 c:6 c:7 c:8 c:9 c:10 c:11 }
@end lilypond

@cindex root of chord
@cindex additions, in chords
@cindex removals, in  chords

More complex chords may also be constructed  adding separate steps
to a chord. Additions are added after the  number following
the colon, and are separated by dots. For example
@c
@lilypond[verbatim,fragment,quote]
  \chords { c:5.6 c:3.7.8 c:3.6.13 }
@end lilypond
Chord steps can be  altered by suffixing a @code{-} or @code{+} sign
to the number, for example:
@lilypond[verbatim,fragment,quote]
  \chords { c:7+ c:5+.3-  c:3-.5-.7- }
@end lilypond
Removals are specified similarly, and are introduced by a caret.  They
must come after the additions.
@lilypond[verbatim,fragment]
  \chords { c^3 c:7^5 c:9^3.5 }
@end lilypond

Modifiers can be used to change pitches. The following modifiers are
supported
@table @code
@item m
  is the minor chord. This modifier lowers the 3rd and (if present) the 7th step.
@item dim
  is the   diminished chord. This modifier lowers the 3rd, 5th and (if present)
  the 7th step 
@item aug
  is the augmented chord. This modifier raises the 5th step.
@item maj
  is the major 7th chord. This modifier raises the 7th step if present.  
@item sus
  is the suspended 4th or 2nd. This modifier removes the 3rd
step. Append either @code{2} or @code{4} to add the 2nd or 4th step to
the chord.
@end table
Modifiers can be mixed with additions. 
@lilypond[verbatim,fragment]
  \chords { c:sus4 c:7sus4 c:dim7 c:m6 } 
@end lilypond

@cindex modifiers, in chords. 
@cindex @code{aug}
@cindex @code{dim}
@cindex @code{maj}
@cindex @code{sus}
@cindex @code{m}

Since the unaltered 11 does sound well when combined with the
unaltered 3, the 11 is removed in this case, unless it is added
explicitly). For example,
@lilypond[fragment,verbatim]
  \chords { c:13 c:13.11 c:m13 }
@end lilypond 

@cindex @code{/}

An inversion (putting one pitch of the chord on the bottom), as well
as bass notes, can be specified by appending
@code{/}@var{pitch} to the chord. 
@lilypond[fragment,verbatim,center]
   \chords { c1 c/g c/f }
@end lilypond 
@cindex @code{/+}
If you do not want to remove the bass note from the chord, but rather
add the note, then you can use @code{/+}@var{pitch}.

@lilypond[fragment,verbatim,center]
   \chords { c1 c/+g c/+f }
@end lilypond 

Chords is a mode similar to @code{\lyrics}, @code{\notes} etc.  Most
of the commands continue to work, for example, @code{r} and
@code{\skip} can be used to insert rests and spaces, and
@code{\property} may be used to change various settings.



@refbugs

Each step can only be present in a chord once.  The following
simply produces the augmented chord, since @code{5+} is interpreted
last.
@cindex clusters
@lilypond[verbatim,fragment]
  \chords { c:5.5-.5+ }
@end lilypond

In chord mode, dashes and carets are used to indicate chord additions
and subtractions, so articulation scripts can not be entered.


@node Printing chord names
@subsection Printing chord names

@cindex printing chord names
@cindex chord names
@cindex chords

For displaying printed chord names, use the @internalsref{ChordNames} context.
The chords may be entered either using the notation described above, or
directly using simultaneous music.

@lilypond[verbatim,singleline]
scheme = \notes {
  \chords {a1 b c} <<d f g>>  <<e g b>>
}
\score {
  \notes<
    \context ChordNames \scheme
    \context Staff \transpose c c' \scheme
  >
}
@end lilypond

You can make the chord changes stand out by setting
@internalsref{ChordNames}.@code{chordChanges} to true.  This will only
display chord names when there is a change in the chords scheme and at
the start of a new line.

@lilypond[verbatim]
scheme = \chords {
  c1:m c:m \break c:m c:m d
}
\score {
  \notes <
    \context ChordNames {
        \property ChordNames.chordChanges = ##t
        \scheme }
    \context Staff \transpose c c' \scheme
  >
\paper{linewidth= 9.\cm}
}
@end lilypond

The default chord name layout is a system for Jazz music, proposed by
Klaus Ignatzek (See @ref{Literature}).

[TODO: add description for banter other jazz.]

The Ignatzek chord name formatting can be tuned in a number of ways
through the following properties:
@table @code
@item chordNameExceptions
This is a list that contains the chords that have special formatting.
For an example, see
@inputfileref{input/regression/,chord-name-exceptions.ly}.

@item majorSevenSymbol
This property contains the markup object used for the 7th step, when
it is major. Predefined options are @code{whiteTriangleMarkup},
@code{blackTriangleMarkup}.  See
@inputfileref{input/regression/,chord-name-major7.ly} for an example.

@item chordNameSeparator
Different parts of a chord name are normally separated by a
slash. By setting @code{chordNameSeparator}, you can specify other
separators, e.g.
@lilypond[fragment,verbatim]
\context ChordNames \chords {
      c:7sus4
      \property ChordNames.chordNameSeparator
        = \markup { "|" }
      c:7sus4 }
@end lilypond

@item chordRootNamer
The root of a chord is usually printed as a letter with an optional
alteration. The transformation from pitch to letter is done by this
function.  An application of setting this function, is providing chord
names with german notation for the root.
@end table


@seealso

@inputfileref{input/regression/,chord-name-major7.ly},
@inputfileref{input/regression/,chord-name-exceptions.ly},
@file{scm/chords-ignatzek.scm}, @file{scm/chord-entry.scm}


@refbugs

Chord names are determined solely from the list of pitches. Chord
inversions are not identified, and neither are added bass notes. This
may result in strange chord names when chords are entered with the
@code{<< .. >>} syntax.




@node Writing parts
@section Writing parts

Orchestral music involves some special notation, both in the full score,
as in the individual parts. This section explains how to tackle common
problems in orchestral music.



@menu
* Rehearsal marks::             
* Bar numbers::                 
* Instrument names::            
* Transpose::                   
* Multi measure rests::         
* Automatic part combining::    
* Hara kiri staves::            
* Sound output for transposing instruments::  
@end menu


@node Rehearsal marks
@subsection Rehearsal marks
@cindex Rehearsal marks
@cindex mark
@cindex @code{\mark}

To print a  rehearsal mark, use the @code{\mark} command. 
@lilypond[fragment,verbatim]
\relative c'' {
  c1 \mark "A"
  c1 \mark "B"
  c1 \mark "12"
  c1 \mark "13"
  c1
}
@end lilypond

The mark is incremented automatically if you use @code{\mark
\default}. The value to use is stored in the property
@code{rehearsalMark} is used and automatically incremented.

The @code{\mark} command can also be used to put signs like coda,
segno and fermatas on a barline. Use @code{\markup} to
to access the appropriate symbol.

@lilypond[fragment,verbatim,relative=1]
  c1 \mark \markup { \musicglyph #"scripts-ufermata" }
  c1
@end lilypond

In this case, during line breaks,
marks must also be printed at the end of the line, and not at the
beginning. Use the following to force that behavior
@example
\property Score.RehearsalMark \override
  #'break-visibility = #begin-of-line-invisible
@end example

@cindex fermatas
@cindex coda
@cindex segno
@cindex barlines, putting symbols on 

@seealso

The object is @internalsref{RehearsalMark} in @internalsref{Score}
context. See @inputfileref{input/test,boxed-molecule.ly} for putting
boxes around the marks.


@node Bar numbers
@subsection Bar numbers


@cindex bar numbers
@cindex measure numbers
@cindex currentBarNumber

Bar numbers are printed by default at the start of the line.  The
number itself is stored in the 
@code{currentBarNumber} property,
which is normally updated automatically for every measure.

Bar numbers can be typeset at regular intervals instead of at the
beginning of each line. This is illustrated in the following example,
whose source is available as
@inputfileref{input/test/,bar-number-every-fifth.ly}

@lilypondfile[notexidoc]{bar-number-every-fifth.ly}

The start of that numbering can also be reset, as demonstrated in
@inputfileref{input/test/,bar-number-every-5-reset.ly}.

@lilypondfile[notexidoc]{bar-number-every-5-reset.ly}


@seealso

@internalsref{BarNumber}.
@inputfileref{input/test/,bar-number-every-5-reset.ly}.
@inputfileref{input/test/,bar-number-every-fifth.ly}

@refbugs

Bar numbers can collide with the @internalsref{StaffGroup} bracket, if
there is one at the top. To solve this, You have to twiddle with the
@internalsref{padding} property of @internalsref{BarNumber} if your
score starts with a @internalsref{StaffGroup}.

@node Instrument names
@subsection Instrument names

In an orchestral score, instrument names are printed left of the
staffs.

This can be achieved by setting @internalsref{Staff}.@code{instrument}
and @internalsref{Staff}.@code{instr}. This will print a string before
the start of the staff. For the first start, @code{instrument} is
used, for the next ones @code{instr} is used.

@lilypond[verbatim,singleline]
  \property Staff.instrument = "ploink " { c''4 }  
@end lilypond

You can also use markup texts to construct more complicated instrument
names.

@lilypond[fragment,verbatim,singleline]
  \notes \context Staff = treble {
    \property Staff.instrument = \markup {
        \column << "Clarinetti"
          { "in B"
            \smaller \musicglyph #"accidentals--1"
          }
          >>
     }
     { c''1 }
  }
@end lilypond


@refbugs

When you put a name on a grand staff or piano staff the width of the
brace is not taken into account. You must add extra spaces to the end of
the name to avoid a collision.

@node Transpose
@subsection Transpose
@cindex Transpose
@cindex transposition of pitches
@cindex @code{\transpose}

A music expression can be transposed with @code{\transpose}.  The syntax
is
@example
  \transpose @var{from} @var{to} @var{musicexpr}
@end example

This means that @var{musicexpr} is transposed by the interval
between @var{from} and @var{to}.

@code{\transpose} distinguishes between enharmonic pitches: both
@code{\transpose c cis} or @code{\transpose c des} will transpose up
half a tone.  The first version will print sharps and the second
version will print flats.

@lilypond[singleline, verbatim]
mus =\notes { \key d \major cis d fis g }
\score { \notes \context Staff {
  \clef "F" \mus
  \clef "G"
  \transpose c g' \mus
  \transpose c f' \mus
}}
@end lilypond

@refbugs

If you want to use both @code{\transpose} and @code{\relative}, then
you must put @code{\transpose} outside of @code{\relative}, since
@code{\relative} will have no effect music that appears inside a
@code{\transpose}.


@node  Multi measure rests
@subsection Multi measure rests
@cindex Multi measure rests

@cindex @code{R}

Multi measure rests are entered using `@code{R}'. It is specifically
meant for full bar rests and for entering parts: the rest can expand to
fill a score with rests, or it can be printed as a single multimeasure
rest. This expansion is controlled by the property
@code{Score.skipBars}. If this is set to true, Lily will not expand
empty measures, and the appropriate number is added automatically.

@lilypond[fragment,verbatim]
 \time 4/4 r1 | R1 | R1*2
 \property Score.skipBars = ##t R1*17  R1*4
@end lilypond

The @code{1} in @code{R1} is similar to the duration notation used for
notes. Hence, for time signatures other than 4/4, you must enter other
durations.  This can be done with augmentation dots or fractions:

@lilypond[fragment,verbatim]
 \property Score.skipBars = ##t
 \time 3/4
  R2. | R2.*2
 \time 13/8
 R1*13/8
 R1*13/8*12
@end lilypond

A @code{R} spanning a single measure is printed as a whole rest
centered in the measure (or a breve when the measure lasts longer than
two whole notes), regardless of the time signature.

 

@cindex text on multi-measure rest
@cindex script on multi-measure rest
@cindex fermata on multi-measure rest

Texts can be added to multi-measure rests by using the
@var{note}-@code{markup} syntax.  In this case, the number is
replaced. If you need both texts and the number, you must add the
number by hand. An identifier (@code{fermataMarkup}) is provided for
adding fermatas.


@lilypond[verbatim,fragment]
  \time 3/4
  R2._\markup { "Ad lib" }
  R2.^\fermataMarkup
@end lilypond


@cindex whole rests for a full measure 

@seealso

The object for this object is @internalsref{MultiMeasureRest},
@internalsref{MultiMeasureRestNumber} (for the default number), and
@internalsref{MultiMeasureRestText} (for user specified texts).

@refbugs

It is not possible to use fingerings (e.g. @code{R1-4}) to put numbers
over multi-measure rests.

@cindex condensing rests

There is no way to automatically condense multiple rests into a single
multimeasure rest. Multi measure rests do not take part in rest
collisions.

Be careful when entering multimeasure rests followed by whole notes,
@example
 R1*4 cis cis 
@end example
will enter two notes lasting four measures each. The result will look
ok, but the bar numbering will be off.

@node Automatic part combining
@subsection Automatic part combining
@cindex automatic part combining
@cindex part combiner


Automatic part combining is used to merge two parts of music onto a
staff.  It is aimed at typesetting orchestral scores.  When the two
parts are identical for a period of time, only one is shown.  In
places where the two parts differ, they are typeset as separate
voices, and stem directions are set automatically.  Also, solo and
@emph{a due} parts are identified and can be marked.

@syntax

The syntax for part combining is

@example
  \partcombine @var{context} @var{musicexpr1} @var{musicexpr2}
@end example
where the pieces of music @var{musicexpr1} and @var{musicexpr2} will be
combined into one context of type @var{context}.  The music expressions
must be interpreted by contexts whose names should start with @code{one}
and @code{two}.

The following example demonstrates the basic functionality of the part
combiner: putting parts on one staff, and setting stem directions and
polyphony.

@lilypond[verbatim,singleline,fragment]
  \context Staff <
    \context Voice=one \partcombine Voice
      \context Thread=one \relative c'' {
        g a () b r
      }
      \context Thread=two \relative c'' {
        g r4 r f
      }
  >
@end lilypond

The first @code{g} appears only once, although it was
specified twice (once in each part).  Stem, slur and tie directions are
set automatically, depending whether there is a solo or unisono. The
first part (with context called @code{one}) always gets up stems, and
`solo', while the second (called @code{two}) always gets down stems and
`Solo II'.

If you just want the merging parts, and not the textual markings, you
may set the property @var{soloADue} to false.

@lilypond[verbatim,singleline,fragment]
  \context Staff <
    \property Staff.soloADue = ##f
    \context Voice=one \partcombine Voice
      \context Thread=one \relative c'' {
        b4 a c g
      }
      \context Thread=two \relative c'' {
        d,2 a4 g'
      }
  >
@end lilypond

@seealso

 Look at the documentation of the responsible engravers,
@code{Thread_devnull_engraver}, @code{Voice_devnull_engraver} and
@code{A2_engraver}.

@refbugs

The syntax for naming contexts in inconsistent with the syntax for
combining stanzas.

In @code{soloADue} mode, when the two voices play the same notes on and
off, the part combiner may typeset @code{a2} more than once in a
measure.

@lilypond[fragment,singleline]
  \context Staff <
    \context Voice=one \partcombine Voice
      \context Thread=one \relative c'' {
        c b c b c a c a
      }
      \context Thread=two \relative c'' {
        b b b b f a f a
      }
  >
@end lilypond

The part combiner is slated to be rewritten [TODO: explain why] .

@cindex @code{Thread_devnull_engraver}
@cindex @code{Voice_engraver}
@cindex @code{A2_engraver}

@node Hara kiri staves
@subsection Hara kiri staves

In orchestral scores, staff lines that only have rests are usually removed.
This saves some space. This style is called `French Score'. 

@syntax

This is supported through the hara kiri@footnote{Hara kiri is the
vulgar name for Seppuku, is the ritual suicide of the Japanese
Samourai warriors.} staff. This staff commits suicide when it finds
itself to be empty after the line-breaking process.  It will not
disappear when it contains normal rests, you must use multi measure
rests.

For @internalsref{Lyrics}, @internalsref{LyricsVoice},
@internalsref{ChordNames} and @internalsref{FiguredBass}, hara-kiri is
switched on by default. For normal staffs, hara kiri is available as a
specialized @internalsref{Staff} context, with the name identifier
@code{\HaraKiriStaffContext}.  Observe how the second staff in this
example disappears in the second line.

@lilypond[verbatim]
\score  {
  \notes \relative c' <
    \context Staff = SA { e4 f g a \break c1 }
    \context Staff = SB { c4 d e f \break R1 }
  >
  \paper {
    linewidth = 6.\cm 
    \translator { \HaraKiriStaffContext }
  }
}
@end lilypond


@node Sound output for transposing instruments
@subsection Sound output for transposing instruments

When you want to make a MIDI file from a score containing transposed
and untransposed instruments, you have to instruct LilyPond the pitch
offset (in semitones) for the transposed instruments. This is done
using the @code{transposing} property. It does not affect printed
output.

@cindex @code{transposing}

@example
        \property Staff.instrument = #"Cl. in B-flat"
        \property Staff.transposing = #-2
@end example


@node Ancient notation 
@section Ancient notation

@cindex Vaticana, Editio
@cindex Medicaea, Editio
@cindex hufnagel
@cindex Petrucci
@cindex mensural

[TODO: write introduction on ancient notation]

@menu
* Ancient note heads::          
* Ancient clefs ::              
* Custodes::                    
* Divisiones::                  
* Ligatures::                   
* Figured bass::                
@end menu


@node Ancient note heads
@subsection Ancient note heads

To get a longa note head, you have to use mensural note heads. This
is accomplished by setting the @code{style} property of the
NoteHead object to @code{mensural}. There is also a note head style
@code{baroque} which gives mensural note heads for @code{\longa} and
@code{\breve} but standard note heads for shorter notes.

@lilypond[fragment,singleline,verbatim]
 \property Voice.NoteHead \set #'style = #'mensural
 a'\longa
@end lilypond

@node Ancient clefs 
@subsection Ancient clefs

LilyPond supports a variety of clefs, many of them ancient.

For modern clefs, see section @ref{Clef}.  For the percussion clef, see
section @ref{Percussion staves}.  For the @code{TAB} clef, see section
@ref{Tablatures}.

The following table shows all ancient clefs that are supported via the
@code{\clef} command.  Some of the clefs use the same glyph, but differ
only with respect to the line they are printed on.  In such cases, a
trailing number in the name is used to enumerate these clefs.  Still,
you can manually force a clef glyph to be typeset on an arbitrary line,
as described in section @ref{Clef}.  The note printed to the right side
of each clef denotes the @code{c'} with respect to the clef.

@table @code

@c --- This should go somewhere else: ---
@c @item modern style G clef (glyph: @code{clefs-G})
@c
@c Supported clefs:
@c @code{treble}, @code{violin}, @code{G}, @code{G2}, @code{french}
@c
@c @lilypond[26pt]{\property Staff.TimeSignature \set #'transparent = ##t \clef "G" c'}
@c
@c @item modern style F clef (glyph: @code{clefs-F})
@c
@c Supported clefs:
@c @code{varbaritone}, @code{bass}, @code{F}, @code{subbass}
@c
@c @lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "F" c'}
@c
@c @item modern style C clef (glyph: @code{clefs-C})
@c
@c Supported clefs:
@c @code{soprano}, @code{mezzosoprano}, @code{alto}, @code{C},
@c @code{tenor}, @code{baritone}
@c
@c @lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "C" c'}

@item modern style mensural C clef (glyph: @code{clefs-neo_mensural_c'})

Supported clefs:
@code{neo_mensural_c1}, @code{neo_mensural_c2},
@code{neo_mensural_c3}, @code{neo_mensural_c4}

@lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "neo_mensural_c2" c'}

@item petrucci style mensural C clef (glyph: @code{clefs-petrucci_c1})

Supported clefs:
@code{petrucci_c1}
for 1st staffline

@lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "petrucci_c1" c'}

@item petrucci style mensural C clef (glyph: @code{clefs-petrucci_c2})

Supported clefs:
@code{petrucci_c2}
for 2nd staffline

@lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "petrucci_c2" c'}

@item petrucci style mensural C clef (glyph: @code{clefs-petrucci_c3})

Supported clefs:
@code{petrucci_c3}
for 3rd staffline

@lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "petrucci_c3" c'}

@item petrucci style mensural C clef (glyph: @code{clefs-petrucci_c4})

Supported clefs:
@code{petrucci_c4}
for 4th staffline

@lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "petrucci_c4" c'}

@item petrucci style mensural C clef (glyph: @code{clefs-petrucci_c5})

Supported clefs:
@code{petrucci_c5}
for 5th staffline

@lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "petrucci_c5" c'}

@item petrucci style mensural F clef (glyph: @code{clefs-petrucci_f})

Supported clefs:
@code{petrucci_f}

@lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "petrucci_f" c'}

@item petrucci style mensural G clef (glyph: @code{clefs-petrucci_g})

Supported clefs:
@code{petrucci_g}

@lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "petrucci_g" c'}

@item historic style mensural C clef (glyph: @code{clefs-mensural_c'})

Supported clefs:
@code{mensural_c1}, @code{mensural_c2}, @code{mensural_c3},
@code{mensural_c4}

@lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "mensural_c2" c'}

@item historic style mensural F clef (glyph: @code{clefs-mensural_f})

Supported clefs:
@code{mensural_f}

@lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "mensural_f" c'}

@item historic style mensural G clef (glyph: @code{clefs-mensural_g})

Supported clefs:
@code{mensural_g}

@lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "mensural_g" c'}

@item Editio Vaticana style do clef (glyph: @code{clefs-vaticana_do})

Supported clefs:
@code{vaticana_do1}, @code{vaticana_do2}, @code{vaticana_do3}

@lilypond{\context Staff \outputproperty #(make-type-checker 'staff-symbol-interface) #'line-count = #4 \property Staff.TimeSignature \set #'transparent = ##t \clef "vaticana_do2" c'}

@item Editio Vaticana style fa clef (glyph: @code{clefs-vaticana_fa})

Supported clefs:
@code{vaticana_fa1}, @code{vaticana_fa2}

@lilypond{\context Staff \outputproperty #(make-type-checker 'staff-symbol-interface) #'line-count = #4 \property Staff.TimeSignature \set #'transparent = ##t \clef "vaticana_fa2" c'}

@item Editio Medicaea style do clef (glyph: @code{clefs-medicaea_do})

Supported clefs:
@code{medicaea_do1}, @code{medicaea_do2}, @code{medicaea_do3}

@lilypond{\context Staff \outputproperty #(make-type-checker 'staff-symbol-interface) #'line-count = #4 \property Staff.TimeSignature \set #'transparent = ##t \clef "medicaea_do2" c'}

@item Editio Medicaea style fa clef (glyph: @code{clefs-medicaea_fa})

Supported clefs:
@code{medicaea_fa1}, @code{medicaea_fa2}

@lilypond{\context Staff \outputproperty #(make-type-checker 'staff-symbol-interface) #'line-count = #4 \property Staff.TimeSignature \set #'transparent = ##t \clef "medicaea_fa2" c'}

@item historic style hufnagel do clef (glyph: @code{clefs-hufnagel_do})

Supported clefs:
@code{hufnagel_do1}, @code{hufnagel_do2}, @code{hufnagel_do3}

@lilypond{\context Staff \outputproperty #(make-type-checker 'staff-symbol-interface) #'line-count = #4 \property Staff.TimeSignature \set #'transparent = ##t \clef "hufnagel_do2" c'}

@item historic style hufnagel fa clef (glyph: @code{clefs-hufnagel_fa})

Supported clefs:
@code{hufnagel_fa1}, @code{hufnagel_fa2}

@lilypond{\context Staff \outputproperty #(make-type-checker 'staff-symbol-interface) #'line-count = #4 \property Staff.TimeSignature \set #'transparent = ##t \clef "hufnagel_fa2" c'}

@item historic style hufnagel combined do/fa clef (glyph: @code{clefs-hufnagel_do_fa})

Supported clefs:
@code{hufnagel_do_fa}

@lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "hufnagel_do_fa" c'}

@c --- This should go somewhere else: ---
@c @item modern style percussion clef (glyph: @code{clefs-percussion})
@c
@c Supported clefs:
@c @code{percussion}
@c
@c @lilypond{\property Staff.TimeSignature \set #'transparent = ##t \clef "percussion" c'}
@c
@c @item modern style tab clef (glyph: @code{clefs-tab})
@c
@c Supported clefs:
@c @code{tab}
@c
@c @lilypond{\context Staff \outputproperty #(make-type-checker 'staff-symbol-interface) #'line-count = #6 \property Staff.TimeSignature \set #'transparent = ##t \clef "tab" c'}

@end table

@emph{Modern style} means ``as is typeset in current editions of
transcribed mensural music''.

@emph{Petrucci style} means ``inspired by printings published by the
famous engraver Petrucci (1466-1539)''.

@emph{Historic style} means ``as was typeset or written in contemporary
historic editions (other than those of Petrucci)''.

@emph{Editio XXX style} means ``as is/was printed in Editio XXX''.

Petrucci used C clefs with differently balanced left-side vertical
beams, depending on which staffline it was printed.


@node Custodes
@subsection Custodes

@cindex custos
@cindex custodes

A @emph{custos} (plural: @emph{custodes}; latin word for `guard') is a
staff context symbol that appears at the end of a staff line.  It
anticipates the pitch of the first note(s) of the following line and
thus helps the player or singer to manage line breaks during
performance, thus enhancing readability of a score.

@lilypond[verbatim]
\score {
  \notes { c'1 \break
        \property Staff.Custos \set #'style = #'mensural
        d' }
  \paper {
    \translator {
      \StaffContext
      \consists Custos_engraver
    }
  }
}
@end lilypond

Custodes were frequently used in music notation until the 17th century.
There were different appearances for different notation styles.
Nowadays, they have survived only in special forms of musical notation
such as via the @emph{editio vaticana} dating back to the beginning of
the 20th century.

For typesetting custodes, just put a @code{Custos_engraver} into the
Staff context when declaring the @code{\paper} block, as shown in the
following example.  In the @code{\paper} block, you can also globally
control the appearance of the custos symbol by setting the custos
@code{style} property.

@example
\paper @{
  \translator @{
      \StaffContext
      \consists Custos_engraver
      Custos \override #'style = #'mensural
  @}
@}
@end example

The property can also be set locally, for example in a @code{\notes}
block:

@example
\notes @{
  \property Staff.Custos \override #'style = #'vaticana
  c'1 d' e' d' \break c' d' e' d'
@}
@end example

Currently, the following styles are supported:

@lilypond
\score {
    \notes {
        \fatText
        s
        ^\markup { "vaticana" }
        ^\markup { \musicglyph #"custodes-vaticana-u0" }
        s
        ^\markup { "medicaea" }
        ^\markup { \musicglyph #"custodes-medicaea-u0" }
        s
        ^\markup { "hufnagel" }
        ^\markup { \musicglyph #"custodes-hufnagel-u0" }
        s
        ^\markup { "mensural" }
        ^\markup { \musicglyph #"custodes-mensural-u0" }
    }
    \paper {
        raggedright = ##t
        interscoreline = 1
        \translator {
            \ScoreContext
            \remove "Bar_number_engraver"
            TextScript \override #'extra-X-extent = #'(-1 . 1)
        }
        \translator{
            \StaffContext
            \remove "Clef_engraver"
            \remove "Key_engraver"
            \remove "Time_signature_engraver"
            \remove "Staff_symbol_engraver"
            minimumVerticalExtent = ##f
        }
    }
}
@end lilypond

If the boolean property @code{adjust-if-on-staffline} is set to
@code{#t} (which it is by default), lily typesets slightly different
variants of the custos glyph, depending on the pitch of the custos,
i.e. depending on the glyph being typeset either on a staffline or
between two stafflines.  The idea is that the glyph will optically fit
well into the staff, with the appendage on the right of the custos
always ending at the same vertical position between two stafflines
regardless of the pitch.  If you set @code{adjust-if-on-staffline} to
@code{#f}, then lily takes regardless of the pitch always a glyph that
is a compromise of the former two variants.

Just like stems can be attached to noteheads in two directions
@emph{up} and @emph{down}, each custos glyph is available with its
appendage pointing either up or down.  If the pitch of a custos is
above a selectable position, the appendage will point downwards; if
the pitch is below this position, the appendage will point upwards.
Use property @code{neutral-position} to select this position.  By
default, it is set to @code{0}, such that the neutral position is the
center of the staff.  Use property @code{neutral-direction} to control
what happens if a custos is typeset on the neutral position itself.
By default, this property is set to @code{-1}, such that the appendage
will point downwards.  If set to @code{1}, the appendage will point
upwards.  Other values such as @code{0} are reserved for future
extensions and should not be used.

Example:

@example
\notes @{
    \property Staff.Custos \set #'neutral-position = #4
    \property Staff.Custos \set #'neutral-direction = #-1
    \property Staff.Custos \set #'adjust-if-on-staffline = ##t

    ...

@}
@end example

@node Divisiones
@subsection Divisiones

@cindex divisio
@cindex divisiones
@cindex finalis

A @emph{divisio} (plural: @emph{divisiones}; latin word for
`division') is a staff context symbol that is used to structure
Gregorian music into phrases and sections.  The musical meaning of
@emph{divisio minima}, @emph{divisio maior} and @emph{divisio maxima}
can be characterized as short, medium and long pause, somewhat like
@ref{Breath marks}.  The @emph{finalis} sign not only marks the end of
a chant, but is also frequently used within a single
antiphonal/responsorial chant to mark the end of each section.

To use divisiones, just include the file @code{gregorian-init.ly}.  It
contains definitions that you can apply by just inserting
@code{\divisiominima}, @code{\divisiomaior}, @code{\divisiomaxima},
and @code{\finalis} at proper places into your lilypond files.

@lilypond[verbatim]
\include "gregorian-init.ly"
\score {
    \notes {
	\context Staff = staff \addlyrics \notes \transpose c c' {
	    \property Score.timing = ##f
	    \property Score.barAlways = ##t
	    \property Staff.BarLine \override #'transparent = ##t
	    \property Voice.Stem \override #'transparent = ##t
            g4( )a g e( )f e
            ^\markup { "divisio minima" }
	    \divisiominima
            g4( )a g e( )f e
            ^\markup { "divisio maior" }
	    \divisiomaior
            g4( )a g e( )f e
            ^\markup { "divisio maxima" }
	    \divisiomaxima
            g4( )a g e( )f e
            ^\markup { "finalis" }
	    \finalis
            g4( )a g e( )f e
	}
	\context Lyrics = lyrics \lyrics {
	    Blah blub, blah blam.
	    Blah blub, blah blam.
	    Blah blub, blah blam.
	    Blah blub, blah blam.
	    Blah blub, blah blam.
	}
    }
}
@end lilypond

Some editions use @emph{virgula} or @emph{caesura} instead of divisio
minima.  Therefore, @code{gregorian-init.ly} also defines
@code{\virgula} and @code{\caesura}.

@lilypond[verbatim]
\include "gregorian-init.ly"
\score {
    \notes {
	\context Staff = staff \addlyrics \notes \transpose c c' {
	    \property Score.timing = ##f
	    \property Score.barAlways = ##t
	    \property Staff.BarLine \override #'transparent = ##t
	    \property Voice.Stem \override #'transparent = ##t
            g4( )a g e( )f e
            ^\markup { "virgula" }
	    \virgula
            g4( )a g e( )f e
            ^\markup { "caesura" }
	    \caesura
            g4( )a g e( )f e
	}
	\context Lyrics = lyrics \lyrics {
	    Blah blub, blah blam.
	    Blah blub, blah blam.
	    Blah blub, blah blam.
	}
    }
}
@end lilypond

@node Ligatures
@subsection Ligatures

@cindex Ligatures

@c TODO: Should double check if I recalled things correctly when I wrote
@c down the following paragraph by heart.
In musical terminology, a ligature is a coherent graphical symbol that
represents at least two different notes.  Ligatures originally appeared
in the manuscripts of Gregorian chant notation roughly since the 9th
century as an allusion to the accent symbols of greek lyric poetry to
denote ascending or descending sequences of notes.  Both, the shape and
the exact meaning of ligatures changed tremendously during the following
centuries: In early notation, ligatures where used for monophonic tunes
(Gregorian chant) and very soon denoted also the way of performance in
the sense of articulation.  With upcoming multiphony, the need for a
metric system arised, since multiple voices of a piece have to be
synchronized some way.  New notation systems were invented, that used
the manifold shapes of ligatures to now denote rhythmical patterns
(e.g. black mensural notation, mannered notation, ars nova).  With the
invention of the metric system of the white mensural notation, the need
for ligatures to denote such patterns disappeared.  Nevertheless,
ligatures were still in use in the mensural system for a couple of
decades until they finally disappeared during the late 16th / early 17th
century.  Still, ligatures have survived in contemporary editions of
Gregorian chant such as the Editio Vaticana from 1905/08.

Syntactically, ligatures are simply enclosed by @code{\[} and @code{\]}.
Some ligature styles (such as Editio Vaticana) may need additional input
syntax specific for this particular type of ligature.  By default, the
@internalsref{LigatureBracket} engraver just marks the start and end of
a ligature by small square angles:

@lilypond[singleline,verbatim]
\score {
    \notes \transpose c c' {
	\[ g c a f d' \]
	a g f
	\[ e f a g \]
    }
}
@end lilypond

To select a specific style of ligatures, a proper ligature engraver has
to be added to the @internalsref{Voice} context, as explained in the
following subsections.  Currently, Lilypond only supports white mensural
ligatures with certain limitations.  Support for Editio Vaticana will be
added in the future.

@menu
* White mensural ligatures::    
@end menu

@node White mensural ligatures
@subsubsection White mensural ligatures

@cindex Mensural ligatures
@cindex White mensural ligatures

Lilypond has limited support for white mensural ligatures.  The
implementation is still experimental; it currently may output strange
warnings or even crash in some cases or produce weird results on more
complex ligatures.  To engrave white mensural ligatures, in the paper
block the @internalsref{MensuralLigature} engraver has to be put into
the @internalsref{Voice} context (and you probably want to remove the
@internalsref{LigatureBracket} engraver).  There is no additional input
language to describe the shape of a white mensural ligature.  The shape
is rather determined solely from the pitch and duration of the enclosed
notes.  While this approach may take a new user quite a while to get
accustomed, it has a great advantage: this way, lily has full musical
information about the ligature.  This is not only required for correct
MIDI output, but also allows for automatic transcription of the
ligatures.

Example:

@lilypond[singleline,verbatim]
\score {
    \notes \transpose c c' {
	\property Score.timing = ##f
	\property Score.defaultBarType = "empty"
	\property Voice.NoteHead \set #'style = #'neo_mensural
	\property Staff.TimeSignature \set #'style = #'neo_mensural
	\clef "petrucci_g"
	\[ g\longa c\breve a\breve f\breve d'\longa \]
	s4
	\[ e1 f1 a\breve g\longa \]
    }
    \paper {
	\translator {
	    \VoiceContext
	    \remove Ligature_bracket_engraver
	    \consists Mensural_ligature_engraver
	}
    }
}
@end lilypond

Without replacing @code{Ligature_bracket_engraver} with
@code{Mensural_ligature_engraver}, the same music transcribes to the
following:

@lilypond[singleline,verbatim]
\score {
    \notes \transpose c c' {
	\property Score.timing = ##f
	\property Score.defaultBarType = "empty"
	\property Voice.NoteHead \set #'style = #'neo_mensural
	\property Staff.TimeSignature \set #'style = #'neo_mensural
	\clef "petrucci_g"
	\[ g\longa c\breve a\breve f\breve d'\longa \]
	s4
	\[ e1 f1 a\breve g\longa \]
    }
}
@end lilypond

@node Figured bass
@subsection Figured bass

@cindex Basso continuo

LilyPond has limited support for figured bass:

@lilypond[verbatim,fragment]
<
 \context Voice \notes { \clef bass dis4  c d ais}
 \context FiguredBass
   \figures {
    < 6 >4 < 7 >8 < 6+ [_!] >
    < 6 >4 <6 5 [3+] >
   }
 >
@end lilypond

The support for figured bass consists of two parts: there is an input
mode, introduced by @code{\figures}, where you can enter bass figures
as numbers, and there is a context called @internalsref{FiguredBass}
that takes care of making @internalsref{BassFigure} objects.

In figures input mode, a group of bass figures is delimited by
@code{<} and @code{>}. The duration is entered after the @code{>}.
@example
	<4 6>
@end example
@lilypond[fragment]
\context FiguredBass
\figures { <4 6> }
@end lilypond

Accidentals are added to the numbers if you alterate them by
appending @code{-}, @code{!}  and @code{+}.

@example
  <4- 6+ 7!>
@end example
@lilypond[fragment]
  \context FiguredBass
\figures { <4- 6+ 7!> }
@end lilypond

Spaces or dashes may be inserted by using @code{_}. Brackets are
introduced with @code{[} and @code{]}.

@example
	< [4 6] 8 [_ 12]>
@end example
@lilypond[fragment]
 \context FiguredBass
\figures { < [4 6] 8 [_ 12]> }
@end lilypond

Although the support for figured bass may superficially resemble chord
support, it works much simpler: in figured bass simply stores the
numbers, and then prints the numbers you entered. There is no
conversion to pitches, and no realizations of the bass are played in
the MIDI file.

Internally, the code produces markup texts internally. You can use any
of the markup text properties to override formatting. For example, the
vertical spacing of the figures may be set with @code{baseline-skip}.


@node Contemporary notation
@section Contemporary notation

@menu
* Clusters::                    
* Fermatas::                    
@end menu

@node Clusters
@subsection Clusters

@cindex cluster

In musical terminology, a @emph{cluster} denotes a range of
simultaneously sounding pitches that may change over time.  The set of
available pitches to apply usually depends on the accoustic source.
Thus, in piano music, a cluster typically consists of a continous range
of the semitones as provided by the piano's fixed set of a chromatic
scale.  In choral music, each singer of the choir typically may sing an
arbitrary pitch within the cluster's range that is not bound to any
diatonic, chromatic or other scale.  In electronic music, a cluster
(theoretically) may even cover a continuous range of pitches, thus
resulting in coloured noise, such as pink noise.

Clusters can be notated in the context of ordinary staff notation by
engraving simple geometrical shapes that replace ordinary notation of
notes.  Ordinary notes as musical events specify starting time and
duration of pitches; however, the duration of a note is expressed by the
shape of the note head rather than by the horizontal graphical extent of
the note symbol.  In contrast, the shape of a cluster geometrically
describes the development of a range of pitches (vertical extent) over
time (horizontal extent).  Still, the geometrical shape of a cluster
covers the area in wich any single pitch contained in the cluster would
be notated as an ordinary note.  From this point of view, it is
reasonable to specify a cluster as the envelope of a set of notes.  This
is exactly how to construct a cluster with lilypond.

@lilypond[singleline,verbatim]
\score {
    \context PianoStaff <
        \context Voice = voiceI { % same as voiceII, but with ordinary notes
            \notes \relative c' {
                c4 f4
                a4 <e4 d'4> | \break
                < g8 a8 > < e8 a8 > a4 c1 < d4 b4 > e4 |
                c4 a4 f4 g4 a4
            }
        }
        \context Voice = voiceII { % same as voiceI, but with cluster notation
            \notes \relative c' {

                % hide notes, accidentals, etc.
                \property Thread.NoteHead \set #'transparent = ##t
                \property Voice.Stem \set #'transparent = ##t
                \property Voice.Beam \set #'transparent = ##t
                \property Staff.Accidental \set #'transparent = ##t

                \property Voice.Cluster \set #'padding = #0.01
                \property Voice.Cluster \set #'shape = #'ramp

                c4 f4
                \startCluster
                a4 <e4 d'4> | \break
                < g8 a8 > < e8 a8 > a4 c1 < d4 b4 > e4 |
                c4 \stopCluster a4 f4 g4 a4
            }
        }
    >
}
@end lilypond

Note that the second voice differs from the first one only by the
additional keywords @code{\startCluster} and @code{\stopCluster} and the
fact that notes, accidentals, etc. are hidden.  A future version of
lilypond may automatically hide notes, accidentals, etc. within the
scope of clusters.

Also note that a music expression like @code{< @{ g8 e8 @} a4 >} is
illegal; in such a case, you can instead use the expression @code{< g8
a8 > < e8 a8 >}.

By default, cluster engraver is in the voice context.  This allows
putting ordinary notes and clusters together in the same staff, even
simultaneously.  However, in such a case no attempt is made to
automatically avoid collisions between ordinary notes and clusters.

The geometrical shape can be further controlled with grob properties
@code{padding} and @code{shape}.  @code{padding} adds to the vertical
extent of the shape (top and bottom) and is expressed in units of
staffspace.  Since the pitch range of a single pitch is infinitely
small, if padding is set to @code{0.0}, this possibly results in an
invisible shape, if you,for example, say @code{ \startCluster c d e
\endCluster}.  The default value for @code{padding} therefore is
@code{0.25}, such that a single pitch roughly shows the same height as a
note head.  Property @code{shape} controls how the overall shape of the
cluster is constructed from the set of notes.  Currently supported
values are @code{leftsided-stairs}, @code{rightsided-stairs},
@code{centered-stairs}, and @code{ramp}.

@node Fermatas
@subsection Fermatas

@cindex fermatas

Currently, lilypond supports the following fermata symbols that are
frequently used in contemporary music notation:

@lilypond[singleline,verbatim]
\score {
    \notes {
        \fatText
        b'
        ^\shortfermata
        _\shortfermata
        ^\markup { short fermata }
        r
        b'
        ^\fermata
        _\fermata
        ^\markup { fermata }
        r
        b'
        ^\longfermata
        _\longfermata
        ^\markup { long fermata }
        r
        b'
        ^\verylongfermata
        _\verylongfermata
        ^\markup { very long fermata }
        r
    }
}
@end lilypond

See @ref{Articulations} for general instructions how to apply scripts
such as fermatas to a @code{\notes@{@}} block.


@node Tuning output
@section Tuning output

LilyPond tries to take as much formatting as possible out of your
hands. Nevertheless, there are situations where it needs some help, or
where you want to override its decisions. In this section we discuss
ways to do just that.

Formatting is internally done by manipulating so called objects (graphic
objects). Each object carries with it a set of properties (object
properties) specific to that object.  For example, a stem object has
properties that specify its direction, length and thickness.

The most direct way of tuning the output is by altering the values of
these properties. There are two ways of doing that: first, you can
temporarily change the definition of a certain type of object, thus
affecting a whole set of objects.  Second, you can select one specific
object, and set a object property in that object.

@menu
* Tuning groups of objects ::   
* Tuning per object ::          
* Font selection::              
* Text markup::                 
@end menu

@node Tuning groups of objects 
@subsection Tuning groups of objects 

@cindex object description

A object definition is a Scheme association list, that is stored in a
context property.  By assigning to that property (using plain
@code{\property}), you can change the resulting objects.

@lilypond[verbatim, fragment,quote]
c'4 \property Voice.NoteHead  = #'() c'4
@end lilypond
This mechanism is fairly crude, since you can only set, but not modify,
the definition of an object. Also, it will thoroughly confuse LilyPond.

The definition of an object is actually a list of default object
properties. For example, the definition of the Stem object (available
in @file{scm/grob-description.scm}), includes the following definitions for
@internalsref{Stem}

@example
        (thickness . 0.8)
        (beamed-lengths . (0.0 2.5 2.0 1.5))
        (Y-extent-callback . ,Stem::height)
        @var{...}
@end example

You can add a property on top of the existing definition, or remove a
property, thus overriding the system defaults:
@lilypond[verbatim,quote]
c'4 \property Voice.Stem \override #'thickness = #4.0
c'4 \property Voice.Stem \revert #'thickness
c'4
@end lilypond
You should balance @code{\override} and @code{\revert}. If that is too
much work, you can use the @code{\set} shorthand. It performs a revert
followed by an override. The following example gives exactly the same
result as the previous one. 
@lilypond[verbatim,quote]
c'4 \property Voice.Stem \set #'thickness = #4.0
c'4 \property Voice.Stem \set #'thickness = #0.8
c'4
@end lilypond
If you use @code{\set}, you must explicitly restore the default.


Formally the syntax for these constructions is
@example
\property @var{context}.@var{grobname} \override @var{symbol} = @var{value}
\property @var{context}.@var{grobname} \set @var{symbol} = @var{value}
\property @var{context}.@var{grobname} \revert @var{symbol}
@end example
Here @var{symbol} is a Scheme expression of symbol type, @var{context}
and @var{grobname} are strings and @var{value} is a Scheme expression.


If you revert a setting which was not set in the first place, then it
has no effect. However, if the setting was set as a system default, it
may remove the default value, and this may give surprising results,
including crashes.  In other words, @code{\override} and @code{\revert},
must be carefully balanced.

These are examples of correct nesting of @code{\override}, @code{\set},
@code{\revert}. 

A clumsy but correct form:
@example
  \override \revert \override \revert \override \revert
@end example

Shorter version of the same:
@example 
  \override \set \set  \revert
@end example

A short form, using only @code{\set}. This requires you to know the
default value:
@example
  \set \set \set \set @var{to default value}
@end example

If there is no default (i.e. by default, the object property is unset),
then you can use
@example
  \set \set \set \revert
@end example

For the digirati, the object description is an Scheme association
list. Since a Scheme list is a singly linked list, we can treat it as a
stack, and @code{\override} and @code{\revert} are just push and pop
operations. This pushing and popping is also used for overriding
automatic beaming settings.

@refbugs

LilyPond will hang or crash if @var{value} contains cyclic references.
The backend is not very strict in type-checking object properties. If you
@code{\revert} properties that are expected to be set by default,
LilyPond may crash.




@node Tuning per object 
@subsection Tuning per object 

@cindex \once
Tuning a single object is most often done with @code{\property}. The
form,
@example
        \once \property @dots{}
@end example
@c
applies a setting only during one moment in the score:  the
original setting for stem thickness is restored automatically in the
following example
@c
@lilypond[verbatim, fragment, relative=1]
  c4 
  \once \property Voice.Stem \set #'thickness = #4
  c4
  c4
@end lilypond

@cindex \once
@cindex \outputproperty

A second way of tuning objects is the more arcane @code{\outputproperty}
feature.  The syntax is as follows:
@example
\outputproperty @var{predicate} @var{symbol} = @var{value}
@end example
Here @code{predicate} is a Scheme function taking a object argument, and
returning a boolean.  This statement is processed by the
@code{Output_property_engraver}.  It instructs the engraver to feed all
objects that it sees to @var{predicate}. Whenever the predicate returns
true, the object property @var{symbol} will be set to @var{value}.

This command is only single shot, in contrast to @code{\override} and
@code{\set}.

You will need to combine this statement with @code{\context} to select
the appropriate context to apply this to.

In the following example, all note heads occurring at current staff
level, are shifted up and right by setting their @code{extra-offset}
property.

@lilypond[fragment,verbatim,singleline]
\relative c'' { c4
  \context Staff \outputproperty
  #(make-type-checker 'note-head-interface)
  #'extra-offset = #'(0.5 . 0.75)
  <<c e g>>8 }
@end lilypond

@cindex @code{extra-offset}

In this example, the predicate checks the @code{text} object property, to
shift only the `m.d.' text,  but not the fingering instruction "2".
@lilypond[verbatim,singleline]
#(define (make-text-checker text)
   (lambda (grob) (equal? text (ly:get-grob-property grob 'text))))

\score {    
  \notes\relative c''' {
    \property Voice.Stem \set #'direction = #1
    \outputproperty #(make-text-checker "m.d.")
      #'extra-offset = #'(-3.5 . -4.5)
    a^2^"m.d."    
  }
}
@end lilypond

@refbugs

If possible, avoid this feature: the semantics are not very clean, and
the syntax and semantics are up for rewrite.




@node Font selection
@subsection Font selection

The most common thing to change about the appearance of fonts is
their size. The font size of a @internalsref{Voice},
@internalsref{Staff} or @internalsref{Thread} context, can be easily
changed by setting the @code{fontSize} property for that context:
@lilypond[fragment,relative=1,verbatim,quote]
  c4 c4 \property Voice.fontSize = #-1
  f4 g4
@end lilypond
 This command will not change the size of variable symbols, such as
beams or slurs.  You can use this command to get smaller symbol for
cue notes, but that involves some more subtleties. An elaborate
example of those is in @inputfileref{input/test,cue-notes.ly}.

@cindex cue notes
@cindex font size
@cindex size
@cindex symbol size
@cindex glyph size

The font used for printing a object can be selected by setting
@code{font-name}, e.g.
@example
  \property Staff.TimeSignature
    \set #'font-name = #"cmr17"
@end example
You may use any font which is available to @TeX{}, such as foreign
fonts or fonts that do not belong to the Computer Modern font family.
Font selection for the standard fonts, @TeX{}'s Computer Modern fonts,
can also be adjusted with a more fine-grained mechanism.  By setting
the object properties described below, you can select a different font.
All three mechanisms work for every object that supports
@code{font-interface}.

@table @code
@item font-family
 A symbol indicating the general class of the typeface.  Supported are
@code{roman} (Computer Modern), @code{braces} (for piano staff
braces), @code{music} (the standard music font), @code{ancient} (the
ancient notation font) @code{dynamic} (font for dynamic signs) and
@code{typewriter}. 
  
@item font-shape
  A symbol indicating the shape of the font, there are typically several
  font shapes available for each font family. Choices are @code{italic},
  @code{caps} and @code{upright} 

@item font-series
A  symbol indicating the series of the font. There are typically several
font series for each font family and shape. Choices are @code{medium}
and @code{bold}. 

@item font-relative-size
  A number indicating the size relative the standard size.  For example,
  with 20pt staff height, relative size -1  corresponds to 16pt staff
  height, and relative size +1 corresponds to 23 pt staff height.

@item font-design-size
A number indicating  the design size of the font. 

This is a feature of the Computer Modern Font: each point size has a
slightly different design. Smaller design sizes are relatively wider,
which enhances readability.
@end table

For any of these properties, the value @code{*} (i.e. the @emph{symbol},
@code{*}, entered as @code{#'*}), acts as a wildcard. This can be used
to override default setting, which are always present. For example:
@example
  \property Lyrics.LyricText \override #'font-series = #'bold
  \property Lyrics.LyricText \override #'font-family = #'typewriter
  \property Lyrics.LyricText \override #'font-shape  = #'*
@end example

@cindex @code{font-style}

There are also pre-cooked font selection qualifiers. These are
selected through the object property @code{font-style}.  For example,
the style @code{finger} selects family @code{number} and relative size
@code{-3}.  Styles available include @code{volta}, @code{finger},
@code{tuplet}, @code{timesig}, @code{mmrest}, @code{script},
@code{large}, @code{Large} and @code{dynamic}. The style sheets and
tables for selecting fonts are located in @file{scm/font.scm}. Refer
to this file for more information.

@cindex magnification

The size of the font may be scaled with the object property
@code{font-magnification}.  For example, @code{2.0} blows up all
letters by a factor 2 in both directions.

@refbugs

Relative size is not linked to any real size.

There is no style sheet provided for other fonts besides the @TeX{}
family, and the style sheet can not be modified easily.

@cindex font selection
@cindex font magnification
@cindex @code{font-interface}


@node Text markup
@subsection Text markup
@cindex text markup
@cindex markup text


@cindex typeset text

LilyPond has an internal mechanism to typeset texts. You can access it
with the keyword @code{\markup}. Within markup mode, you can enter texts
similar to lyrics: simply enter them, surrounded by spaces. 
@cindex markup

@lilypond[verbatim,fragment,relative=1]
 c1^\markup { hello }
 c1_\markup { hi there }
 c1^\markup { hi \bold there, is \italic anyone home? }
@end lilypond

@cindex font switching

The line of the example demonstrates font switching commands.  The
command only apply to the first following word; enclose a set of texts
with braces to apply a command to more words.
@example
  \markup @{ \bold @{ hi there @} @}
@end example
For clarity, you can also do this for single arguments, e.g.
@example
  \markup @{ is \italic @{ anyone @} home @}
@end example

@cindex font size, texts

The following size commands set abolute sizes

@cindex \teeny
@cindex \tiny
@cindex \small
@cindex \large
@cindex \huge

@table @code
@item \teeny
@item \tiny
@item \small
@item \large
@item \huge
@end table

You can also make letter larger or smaller relative to their neighbors,
with the commands @code{\larger} and @code{\smaller}.
@cindex smaller
@cindex larger

@cindex font style, for texts
@cindex \bold
@cindex \dynamic
@cindex \number
@cindex \italic

The following font change commands are defined:
@table @code
@item \dynamic
This changes to the font used for dynamic signs. Note that this font
does not contain all characters of the alphabet.
@item \number
This changes to the font used for time signatures. It only contains
numbers and a few punctuation marks.
@item \italic
@item \bold
@end table

@cindex raising text
@cindex lowering text
@cindex moving text
@cindex translating text

@cindex \sub
@cindex \super

Raising and lowering texts can be done with @code{\super} and
@code{\sub}.

@lilypond[verbatim,fragment,relative=1]
 c1^\markup { E "=" mc \super "2" }
@end lilypond

@cindex \raise

If you want to give an explicit amount for lowering or raising, use
@code{\raise}.  This command takes a Scheme valued argument,
@lilypond[verbatim,fragment,relative=1,quote]
 c1^\markup { C \small \raise #1.0 { "9/7+" }}
@end lilypond
The argument to @code{\raise} is the vertical displacement amount,
measured in (global) staff spaces.

Other commands taking  single arguments include
@table @code

@item \bracket, \hbracket
 Bracket the argument markup.

@item \musicglyph
@cindex \musicglyph
  This is converted to a musical symbol, e.g. @code{\musicglyph
#"accidentals-0"} will select the natural sign from the music font.
See @ref{The Feta font} for  a complete listing of the possible glyphs.
@item \char
This produces a single character, e.g. @code{\char #65} produces the 
letter 'A'.

@item \hspace #@var{amount}
@cindex \hspace
This produces a invisible object taking horizontal space.
@example 
\markup @{ A \hspace #2.0 B @} 
@end example
will put extra space between A and B. Note that lilypond 
inserts space before and after @code{\hspace}. 

@item \fontsize #@var{size}
@cindex \fontsize
This sets the relative font size, eg.
@example
A \fontsize #2 @{ B C @} D
@end example


This will enlarge the B and the C by two steps.
@item  \translate #(cons @var{x} @var{y})
@cindex  \translate
This translates an object. Its first argument is a cons of numbers
@example
A \translate #(cons 2 -3) @{ B C @} D
@end example
This moves `B C' 2 spaces to the right, and 3 down.

@item \magnify  #@var{mag}
@cindex \magnify
This sets the font magnification for the its argument. In the following
example, the middle A will be 10% larger.
@example
A \magnify #1.1 @{ A @} A
@end example


@item \override #(@var{key} . @var{value})
@cindex \override
This overrides a  formatting property for its argument. The argument
should be a key/value pair, e.g.
@example
m \override #'(font-family . math) m m
@end example
@end table

In markup mode you can compose expressions, similar to mathematical
expressions, XML documents and music expressions.  The braces group
notes into horizontal lines. Other types of lists also exist: you can
stack expressions grouped with @code{<<}, and @code{>>} vertically with
the command @code{\column}. Similarly, @code{\center} aligns texts by
their center lines. 

@lilypond[verbatim,fragment,relative=1]
 c1^\markup { \column << a bbbb c >> }
 c1^\markup { \center << a bbbb c >> }
 c1^\markup { \line << a b c >> }
@end lilypond



The markup mechanism is very flexible and extensible.  Refer to
@file{scm/new-markup.scm} for more information on extending the markup
mode.


@cindex metronome mark

One practical application of complicated markup is to fake a metronome
marking:

@lilypond[verbatim]
eighthStem = \markup \combine
	\musicglyph #"flags-stem"
	\translate #'(0.0 . 3.5) \musicglyph #"flags-u3"
eighthNote = \markup
	\override #'(word-space . 0.0)
	{ \musicglyph #"noteheads-2"
	  \translate #'(-0.05 . 0.1) \eighthStem }

\score {
  \notes\relative c'' {
    a1^\markup { \magnify #0.9 \eighthNote " = 64" }
  }
}
@end lilypond

@refbugs

@cindex kerning

LilyPond does not account for kerning in its text formatting, so it
spaces texts slightly too wide.

Syntax errors for markup mode are confusing.


@node Global layout
@section Global layout

The global layout determined by three factors: the page layout, the
line breaks and the spacing. These all influence each other: The
choice of spacing determines how densely each system of music is set,
where line breaks breaks are chosen, and thus ultimately how many
pages a piece of music takes. In this section we will explain how the
lilypond spacing engine works, and how you can tune its results.

Globally spoken, this procedure happens in three steps: first,
flexible distances (``springs'') are chosen, based on durations. All
possible line breaking combination are tried, and the one with the
best results---a layout that has uniform density and requires as
little stretching or cramping as possible---is chosen. When the score
is processed by @TeX{}, page are filled with systems, and page breaks
are chosen whenever the page gets full.

@menu
* Vertical spacing::            
* Horizontal spacing::          
* Font Size::                   
* Line breaking::               
* Page layout::                 
@end menu


@node Vertical spacing
@subsection Vertical spacing

@cindex vertical spacing
@cindex distance between staves
@cindex staff distance
@cindex between staves, distance
@cindex staffs per page


The height of each system is determined automatically by lilypond, to
keep systems from bumping into each other, some minimum distances are
set.  By changing these, you can put staves closer together, and thus
put more  systems onto one page.

Normally staves are stacked vertically. To make
staves maintain a distance, their vertical size is padded. This is
done with the property @code{minimumVerticalExtent}. It takes a pair
of numbers, so if you want to make it smaller from its, then you could
set
@example
  \property Staff.minimumVerticalExtent = #'(-4 . 4)
@end example
This sets the vertical size of the current staff to 4 staff-space on
either side of the center staff line.  The argument of
@code{minimumVerticalExtent} is interpreted as an interval, where the
center line is the 0, so the first number is generally negative.  you
could also make the staff larger at the bottom by setting it to
@code{(-6 . 4)}. The default value is @code{(-6 . 6)}.

Vertical aligment of staves is handled by the
@internalsref{VerticalAlignment} object, which lives at
@internalsref{Score} level.

The piano staves are handled a little differently: to make cross-staff
beaming work correctly, it necessary that the distance between staves
is fixed.  This is also done with a @internalsref{VerticalAlignment}
object, created in @internalsref{PianoStaff}, but a forced distance is
set. This is done with the object property #'forced-distance. If you
want to override this, use a @code{\translator} block as follows:
@example
  \translator @{
    \PianoStaffContext
    VerticalAlignment \override #'forced-distance = #9
  @}
@end example
This would bring the staves together at a distance of 9 staff spaces,
and again this is measured from the center line of each staff.



@node Horizontal spacing
@subsection Horizontal Spacing

The spacing engine translates differences in durations into
stretchable distances (``springs'') of differing lengths. Longer
durations get more space, shorter durations get less.  The basis for
assigning spaces to durations, is that the shortest durations get a
fixed amount of space, and the longer durations get more: doubling a
duration adds a fixed amount of space to the note.

For example, the following piece contains lots of half, quarter and
8th notes, the eighth note is followed by 1 note head width. The The
quarter note is followed by 2 NHW, the half by 3 NHW, etc.
@lilypond[fragment, verbatim, relative=1]
 c2 c4. c8 c4. c8 c4. c8 c8 c8 c4 c4 c4
@end lilypond

These two amounts of space are @code{shortest-duration-space}
@code{spacing-increment}, object properties of
@internalsref{SpacingSpanner}. Normally @code{spacing-increment} is
set to 1.2, which is the width of a note head, and
@code{shortest-duration-space} is set to 2.0, meaning that the
shortest note gets 2 noteheads of space. For normal notes, this space
is always counted from the left edge of the symbol, so the short notes
in a score is generally followed by one note head width of space.

If one would follow the above procedure exactly, then adding a single
32th note to a score that uses 8th and 16th notes, would widen up the
entire score a lot. The shortest note is no longer a 16th, but a 64th,
thus adding 2 noteheads of space to every note. To prevent this, the
shortest duration for spacing is not the shortest note in the score,
but the most commonly found shortest note.  Notes that are even
shorter this are followed by a space that is proportonial to their
duration relative to the common shortest note.  So if we were to add
only a few 16th notes to the example above, they would be followed by
half a NHW:

@lilypond[fragment, verbatim, relative=1]
 c2 c4. c8 c4. [c16 c] c4. c8 c8 c8 c4 c4 c4
@end lilypond

The most common shortest duration is determined as follows: in every
measure, the shortest duration is determined. The most common short
duration, is taken as the basis for the spacing, with the stipulation
that this shortest duration should always be equal to or shorter than
1/8th note. The shortest duration is printed when you run lilypond
with @code{--verbose}.  These durations may also be customized. If you
set the @code{common-shortest-duration} in
@internalsref{SpacingSpanner}, then this sets the base duration for
spacing. The maximum duration for this base (normally 1/8th), is set
through @code{base-shortest-duration}.

@cindex @code{common-shortest-duration}
@cindex @code{base-shortest-duration}
@cindex @code{stem-spacing-correction}
@cindex @code{spacing}

In the introduction it was explained that stem directions influence
spacing. This is controlled with @code{stem-spacing-correction} in
@internalsref{NoteSpacing}. The @code{StaffSpacing} object contains the
same property for controlling the stem/barline spacing. In the
following example shows these corrections, once with default settings,
and once with exaggerated corrections.  

@lilypond
    \score { \notes {
      c'4 e''4 e'4 b'4 |
      b'4 e''4 b'4 e''4|
      \property Staff.NoteSpacing \override #'stem-spacing-correction
      = #1.5
      \property Staff.StaffSpacing \override #'stem-spacing-correction
      = #1.5
      c'4 e''4 e'4 b'4 |
      b'4 e''4 b'4 e''4|      
    }
    \paper { raggedright = ##t } }
@end lilypond

@cindex SpacingSpanner, overriding properties

The @internalsref{SpacingSpanner}, is score wide, so its properties
must be overriden from the @code{\paper} block, e.g.
@example
\paper @{ \translator  @{
  \ScoreContext
  SpacingSpanner \override #'spacing-increment = #3.0
@} @}
@end example


@refbugs

Spacing is determined on a score wide basis. If you have a score that
changes its character (measured in durations) halfway during the
score, the part containing the longer durations will be spaced too
widely.

Generating optically pleasing spacing is black magic. LilyPond tries
to deal with a number of frequent cases. Here is an example that is
not handled correctly, due to the combination of chord collisions and
kneed stems.

@lilypond
\score {
     \context PianoStaff \notes \transpose c c'' <
     \context Staff = up { s1 }
     \context Staff = down { [c8 c \translator Staff=up <<c d>> c 
\translator Staff=down c c c] }
     >
     \paper { raggedright = ##t }
}
@end lilypond



@node Font Size
@subsection Font size
@cindex font size, setting
@cindex staff size, setting
@cindex @code{paper} file

The Feta font provides musical symbols at seven different sizes.
These fonts are 11 point, 13 point, 16 point, 19 pt, 20 point, 23
point, and 26 point.  The point size of a font is the height of the
five lines in a staff when displayed in the font.

Definitions for these sizes are the files @file{paperSZ.ly}, where
@code{SZ} is one of 11, 13, 16, 19, 20, 23 and 26.  If you include any
of these files, the identifiers @code{paperEleven},
@code{paperThirteen}, @code{paperSixteen}, @code{paperNineteen},
@code{paperTwenty}, @code{paperTwentythree}, and @code{paperTwentysix}
are defined respectively.  The default @code{\paper} block is also
set. These files should be imported at toplevel, i.e.
@example
	\include "paper26.ly"
	\score @{  ... @}
@end example

The font definitions are generated using a Scheme function. For more
details, see the file @file{scm/font.scm}.



@node Line breaking
@subsection Line breaking

@cindex line breaks
@cindex breaking lines

Line breaks are normally computed automatically. They are chosen such
that it looks neither cramped nor loose, and that consecutive lines have
similar density.

Occasionally you might want to override the automatic breaks; you can
do this by  specifying @code{\break}. This will force a line break at
this point.  Line breaks can only occur at places where there are bar
lines.  If you want to have a line break where there is no bar line,
you can force an invisible bar line by entering @code{\bar
""}. Similarly, @code{\noBreak} forbids a line break at a certain
point.


@cindex regular line breaks
@cindex four bar music. 

If you want linebreaks at regular intervals, you can use the following:
@example
<  \repeat 7 unfold @{ s1 * 4 \break  @}
   @emph{real music}
> 
@end  example
This makes the following 28 measures (assuming 4/4 time) be broken every
4 measures.

@node Page layout
@subsection Page layout

@cindex page breaks
@cindex breaking pages

@cindex @code{indent}
@cindex @code{linewidth}

The most basic settings influencing the spacing are @code{indent} and
@code{linewidth}. They are set in the @code{\paper} block. They
control the indentation of the first line of music, and the lengths of
the lines.

If  @code{raggedright} is set to true in the @code{\paper}
block, then the lines are justified at their natural length. This
useful for short fragments, and for checking how tight the natural
spacing is.

@cindex page layout
@cindex vertical spacing

The page layout process happens outside lilypond. Ly2dvi sets page
layout instructions. Ly2dvi responds to the following variables in the
@code{\paper} block.  The variable @code{textheight} sets the total
height of the music on each page.  The spacing between systems is
controlled with @code{interscoreline}, its default is 16pt.
The distance between the score lines will stretch in order to fill the
full page @code{interscorelinefill} is set to a positive number.  In
that case @code{interscoreline} specifies the minimum spacing.

@cindex @code{textheight}
@cindex @code{interscoreline}
@cindex @code{interscorelinefill}

If the variable @code{lastpagefill} is defined (that is, it gets any
value assigned in the @code{\paper} block), systems are evenly
distributed vertically on the last page.  This might produce ugly
results in case there are not enough systems on the last page.  Note
that @command{lilypond-book} ignores @code{lastpagefill}.  See
@ref{Integrating text and music with lilypond-book} for
more information.

@cindex @code{lastpagefill}

Page breaks are normally computed by @TeX{}, so they are not under
direct control of LilyPond.  However, you can insert a commands into
the @file{.tex} output to instruct @TeX{} where to break pages. You
can insert a @code{\newpage} from within lilypond. This is done by
setting the @code{between-systems-strings} on the
@internalsref{NonMusicalPaperColumn} where the system is broken.

@cindex paper size
@cindex page size
@cindex @code{papersize}

To change the paper size, you must first set the
@code{papersize} paper variable variable.  Set it to
the strings @code{a4}, @code{letter}, or @code{legal}.  After this
specification, you must set the font as described above.  If you want
the default font, then use the 20 point font.

@example
        \paper@{ papersize = "a4" @}
        \include "paper16.ly"
@end example

The file @code{paper16.ly}  will now include a file named @file{a4.ly}, which
will set the paper variables @code{hsize} and @code{vsize} (used by
Lilypond and @code{ly2dvi})





@node Sound
@section Sound
@cindex Sound

LilyPond can produce MIDI output.  The performance lacks lots of
interesting effects, such as swing, articulation, slurring, etc., but it
is good enough for proof-hearing the music you have entered.  Ties,
dynamics and tempo changes are interpreted.

Dynamic marks, crescendi and decrescendi translate into MIDI volume
levels.  Dynamic marks translate to a fixed fraction of the available
MIDI volume range, crescendi and decrescendi make the the volume vary
linearly between their two extremities.  The fractions be adjusted by
overriding the @code{absolute-volume-alist} defined in
@file{scm/midi.scm}.

For each type of musical instrument (that MIDI supports), a volume range
can be defined.  This gives you basic equalizer control, which can
enhance the quality of the MIDI output remarkably.  You can add
instruments and ranges or change the default settings by overriding the
@code{instrument-equalizer-alist} defined in @file{scm/midi.scm}.

Both loudness controls are combined to produce the final  MIDI volume. 

@menu
* MIDI block::                  
* MIDI instrument names::       
@end menu


@node MIDI block
@subsection MIDI block
@cindex MIDI block


The MIDI block is analogous to the paper block, but it is somewhat
simpler.  The @code{\midi} block can contain:
@cindex MIDI block

@itemize @bullet
  @item  a @code{\tempo} definition
  @item  context definitions
@end itemize

Assignments in the @code{\midi} block are not allowed.



@cindex context definition

Context definitions follow precisely the same syntax as within the
\paper block.  Translation modules for sound are called performers.
The contexts for MIDI output are defined in @file{ly/performer-init.ly}.


@node MIDI instrument names
@subsection MIDI instrument names

@cindex instrument names
@cindex @code{Staff.midiInstrument}
@cindex @code{Staff.instrument}

The MIDI instrument name is set by the @code{Staff.midiInstrument}
property or, if that property is not set, the @code{Staff.instrument}
property.  The instrument name should be chosen from the list in
@ref{MIDI instruments}.

@refbugs

If the selected string does not exactly match, then LilyPond uses the
default (Grand Piano). It is not possible to select an instrument by
number.


