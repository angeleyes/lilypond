
article(MANIFESTO -- Rationale behind the GNU LilyPond project)(HWN
and JCN)()

sect(Goals for LilyPond)


GNU LilyPond was written with some considerations in mind:


itemize(
it() Describing a well-defined language for defining music. We call
    this language (rather arrogantly) The Musical Definition Language
    (mudela for short). GNU LilyPond reads a mudela sourcefile and outputs a
    TeX file.  
it() Providing an easy-to-use interface for typesetting music in
    its broadest sense. This interface should be intuitive from a musical
    point of view. By broadest sense we mean: it is designed for music
    printed left to right in staffs, using notes to designate rythm and
    pitch.
it()Generating high-quality output. Ideally it should be of a professional
    quality. We'd like to render Herbert Chlapiks words, "Fine music
    setting is not possible without a knowledgeable printer,"  untrue.
it()Making a system which is fully tweakable. It should be possible to
    typeset a book on how not to typeset music.
)

sect(Development constraints)


Further considerations while doing the programming

itemize(
it()GNU LilyPond uses TeX for its output. This is not a key issue: in a
    future version, GNU LilyPond might bypass TeX, but at the moment TeX
    is convenient for producing output.
it()GNU LilyPond does not display notes directly, nor will it be rehacked
    to be used interactively. GNU LilyPond writes output to a file.  It
    will not be extended to play music, or to recognize music.
it()GNU LilyPond is intended to run on Unix platforms, but it should
    be portable to any platform which can run TeX and the GNU tools
it()GNU LilyPond is free. Commercial windows packages for setting music are
    abundant. Free musicprinting software is scarce. For more thoughts on
    this, please consult the file(gnu-music) documentation.
it()GNU LilyPond is written in GNU C++. It will not be downgraded/ported to fit
    broken systems.
)

sect(Goals for mudela)

The design of Mudela has been (perfect past tense, hopefully) an
ongoing process, the most important criteria being:

itemize(
it()define the (musical) message of the composer as unambiguously as possible.
    This means that, given a piece Mudela, it should be possible for a
    program to play a reasonable interpretation of the piece.

    It also means that, given a piece of Mudela, it should be possible for a
    program to print a score of the piece.
it()be intuitive, and easily readable (compared to, say, Musi*TeX input,
    or MIDI :-),
it()be easily writable in ASCII with a simple texteditor
)

Other considerations were (and will be):

itemize(
it()be able to edit the layout without danger of changing the original
    music (Urtext),
it()allow for adding different interpretations, again, 
    without danger of changing the original,
it()easy to create a conductor's score, 
    as well as the scores for all individual instruments,
it()provide simple musical manipulations, such as em(i) extracting a
    slice of music from a previously defined piece, em(ii) extracting
    only the rhythm from a piece of music, em(iii) transposing, etc.,
it()easy to comprehend to both programmers and others.
)

One of the things that (might) be here would be: feasible to use in a
graphic editor. We don't have experience with these beasts, so we
don't know how to do this. Comments appreciated.

Musical pieces could be

itemize(
it()Orchestral scores, (eg Mahler)
it()piano pieces (eg. Schubert, Rachmaninov),
it()pop songs (lyrics and chords),
it()Gregorian chants,
it()Bach multivoice organ pieces,
it()Short excerpts to be used in musicological publications.
)

