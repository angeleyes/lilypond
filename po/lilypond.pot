# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2004-03-28 17:42+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. ###############################################################
#. lilylib.py -- options and stuff
#.
#. source file of the GNU LilyPond music typesetter
#.
#. (c)  1998--2003  Han-Wen Nienhuys <hanwen@cs.uu.nl>
#. Jan Nieuwenhuizen <janneke@gnu.org>
#. ##  subst:\(^\|[^._a-z]\)\(abspath\|identify\|warranty\|progress\|warning\|error\|exit\|getopt_args\|option_help_str\|options_help_str\|help\|setup_temp\|read_pipe\|system\|cleanup_temp\|strip_extension\|cp_to_dir\|mkdir_p\|init\) *(
#. ##  replace:\1ly.\2 (
#. ## subst: \(help_summary\|keep_temp_dir_p\|option_definitions\|original_dir\|program_name\|pseudo_filter_p\|temp_dir\|verbose_p\)
#. ###############################################################
#. Users of python modules should include this snippet
#. and customize variables below.
#. We'll suffer this path init stuff as long as we don't install our
#. python packages in <prefix>/lib/pythonx.y (and don't kludge around
#. it as we do with teTeX on Red Hat Linux: set some environment var
#. (PYTHONPATH) in profile)
#. If set, LILYPONDPREFIX must take prevalence
#. if datadir is not set, we're doing a build and LILYPONDPREFIX
#. Customize these
#. lilylib globals
#: lilylib.py:60
msgid "lilylib module"
msgstr ""

#: lilylib.py:63 lilypond-book.py:83 lilypond.py:127 midi2ly.py:100
#: mup2ly.py:75 old-lilypond-book.py:129 main.cc:140
msgid "print this help"
msgstr ""

#. ###############################################################
#. Handle bug in Python 1.6-2.1
#.
#. there are recursion limits for some patterns in Python 1.6 til 2.1.
#. fix this by importing pre instead. Fix by Mats.
#. Attempt to fix problems with limited stack size set by Python!
#. Sets unlimited stack size. Note that the resource module only
#. is available on UNIX.
#: lilylib.py:110 midi2ly.py:136 mup2ly.py:130
#, python-format
msgid "Copyright (c) %s by"
msgstr ""

#: lilylib.py:110
msgid " 1998--2003"
msgstr ""

#: lilylib.py:114
msgid "Distributed under terms of the GNU General Public License."
msgstr ""

#: lilylib.py:116
msgid "It comes with NO WARRANTY."
msgstr ""

#: lilylib.py:123 midi2ly.py:150 mup2ly.py:144 input.cc:88
msgid "warning: "
msgstr ""

#. lots of midi files use plain text for lyric events
#. FIXME: read from stdin when files[0] = '-'
#: lilylib.py:126 midi2ly.py:165 midi2ly.py:1018 midi2ly.py:1083 mup2ly.py:147
#: mup2ly.py:161 input.cc:93
msgid "error: "
msgstr ""

#: lilylib.py:130
#, python-format
msgid "Exiting (%d)..."
msgstr ""

#: lilylib.py:190 midi2ly.py:224 mup2ly.py:220
#, python-format
msgid "Usage: %s [OPTIONS]... FILE"
msgstr ""

#: lilylib.py:194 midi2ly.py:228 mup2ly.py:224 main.cc:205
msgid "Options:"
msgstr ""

#: lilylib.py:198 midi2ly.py:232 mup2ly.py:228 main.cc:209
#, c-format, python-format
msgid "Report bugs to %s."
msgstr ""

#: lilylib.py:218
#, python-format
msgid "Binary %s has version %s, looking for version %s"
msgstr ""

#. deal with "((latex ) >& 1 ) .." too
#: lilylib.py:252
#, python-format
msgid "Opening pipe `%s'"
msgstr ""

#. successful pipe close returns 'None'
#: lilylib.py:267 lilypond-book.py:724
#, python-format
msgid "`%s' failed (%d)"
msgstr ""

#: lilylib.py:272 lilylib.py:331 lilypond-book.py:725 lilypond.py:530
#: old-lilypond-book.py:228
msgid "The error log is as follows:"
msgstr ""

#. Ugh. code dup
#: lilylib.py:303 midi2ly.py:260 mup2ly.py:256
#, python-format
msgid "Invoking `%s'"
msgstr ""

#: lilylib.py:305
#, python-format
msgid "Running %s..."
msgstr ""

#: lilylib.py:324
#, python-format
msgid "`%s' failed (%s)"
msgstr ""

#: lilylib.py:327 midi2ly.py:266 mup2ly.py:264
msgid "(ignored)"
msgstr ""

#: lilylib.py:345 midi2ly.py:276 mup2ly.py:274
#, python-format
msgid "Cleaning %s..."
msgstr ""

#. Duh.  Python style portable: cp *.EXT OUTDIR
#. system ('cp *.%s %s' % (ext, outdir), 1)
#. Python < 1.5.2 compatibility
#.
#. On most platforms, this is equivalent to
#. `normpath(join(os.getcwd()), PATH)'.  *Added in Python version 1.5.2*
#. tex needs lots of memory, more than it gets by default on Debian
#. TODO: * prevent multiple addition.
#. * clean TEXINPUTS, MFINPUTS, TFMFONTS,
#. as these take prevalence over $TEXMF
#. and thus may break tex run?
#. $TEXMF is special, previous value is already taken care of
#. # -sOutputFile does not work with bbox?
#. # todo:
#. # have better algorithm for deciding when to crop page,
#. # and when to show full page
#. need to have margin, otherwise edges of letters will
#. be cropped off.
#: lilylib.py:508
msgid "Removing output file"
msgstr ""

#. !@PYTHON@
#. once upon a rainy monday afternoon.
#.
#. ...
#.
#. (not finished.)
#. ABC standard v1.6:  http://www.gre.ac.uk/~c.walshaw/abc2mtex/abc.txt
#.
#. Enhancements  (Roy R. Rankin)
#.
#. Header section moved to top of lilypond file
#. handle treble, treble-8, alto, and bass clef
#. Handle voices (V: headers) with clef and part names, multiple voices
#. Handle w: lyrics with multiple verses
#. Handle key mode names for minor, major, phrygian, ionian, locrian, aeolian,
#. mixolydian, lydian, dorian
#. Handle part names from V: header
#. Tuplets handling fixed up
#. Lines starting with |: not discarded as header lines
#. Multiple T: and C: header entries handled
#. Accidental maintained until next bar check
#. Silent rests supported
#. articulations fermata, upbow, downbow, ltoe, accent, tenuto supported
#. Chord strings([-^]"string") can contain a '#'
#. Header fields enclosed by [] in notes string processed
#. W: words output after tune as abc2ps does it (they failed before)
#. Enhancements (Laura Conrad)
#.
#. Barring now preserved between ABC and lilypond
#. the default placement for text in abc is above the staff.
#. %%LY now supported.
#. \breve and \longa supported.
#. M:none doesn't crash lily.
#. Limitations
#.
#. Multiple tunes in single file not supported
#. Blank T: header lines should write score and open a new score
#. Not all header fields supported
#. ABC line breaks are ignored
#. Block comments generate error and are ignored
#. Postscript commands are ignored
#. lyrics not resynchronized by line breaks (lyrics must fully match notes)
#. %%LY slyrics can't be directly before a w: line.
#. ???
#. TODO:
#.
#. Convert to new chord styles.
#.
#. UNDEF -> None
#.
#. uGUHGUHGHGUGH
#. UGH
#. treble8 is used by abctab2ps; -8va is used by barfly,
#. and by my patch to abc2ps. If there's ever a standard
#. about this we'll support that.
#. find keywork
#. assume that Q takes the form "Q:1/4=120"
#. There are other possibilities, but they are deprecated
#. outf.write ("\t\t\\consists Staff_margin_engraver\n")
#. pitch manipulation. Tuples are (name, alteration).
#. 0 is (central) C. Alteration -1 is a flat, Alteration +1 is a sharp
#. pitch in semitones.
#. abc to lilypond key mode names
#. semitone shifts for key mode names
#. latex does not like naked #'s
#. latex does not like naked "'s
#. break lyrics to words and put "'s around words containing numbers and '"'s
#. escape "
#. _ causes probs inside ""
#. _ to ' _ '
#. split words with -
#. unless \-
#. ~ to space('_')
#. * to to space
#. latex does not like naked #'s
#. put numbers and " and ( into quoted string
#. insure space between lines
#. title
#. strip trailing blanks
#. Meter
#. KEY
#. seperate clef info
#. there may or may not be a space
#. between the key letter and the mode
#. ugh.
#. ugh.
#. Notes
#. Origin
#. Reference Number
#. Area
#. History
#. Book
#. Composer
#. Default note length
#. Voice
#. Words
#. vocals
#. tempo
#. we use in this order specified accidental, active accidental for bar,
#. active accidental for key
#. (num /  den)  / defaultlen < 1/base
#. return (str, num,den,dots)
#. ignore slide
#. ignore roll
#. s7m2 input doesnt care about spaces
#.
#. remember accidental for rest of bar
#.
#. get accidental set in this bar or UNDEF if not set
#. WAT IS ABC EEN ONTZETTENDE PROGRAMMEERPOEP  !
#. failed; not a note!
#. escape '#'s
#.
#. |] thin-thick double bar line
#. || thin-thin double bar line
#. [| thick-thin double bar line
#. :| left repeat
#. |: right repeat
#. :: left-right repeat
#. |1 volta 1
#. |2 volta 2
#. first try the longer one
#. bracket escape
#. the nobarlines option is necessary for an abc to lilypond translator for
#. exactly the same reason abc2midi needs it: abc requires the user to enter
#. the note that will be printed, and MIDI and lilypond expect entry of the
#. pitch that will be played.
#.
#. In standard 19th century musical notation, the algorithm for translating
#. between printed note and pitch involves using the barlines to determine
#. the scope of the accidentals.
#.
#. Since ABC is frequently used for music in styles that do not use this
#. convention, such as most music written before 1700, or ethnic music in
#. non-western scales, it is necessary to be able to tell a translator that
#. the barlines should not affect its interpretation of the pitch.
#. write other kinds of appending  if we ever need them.
#. add comments to current voice
#. Try nibbling characters off until the line doesn't change.
#. dump_global (outf)
#. !@PYTHON@
#.
#. convert-ly.py -- Update old LilyPond input files (fix name?)
#.
#. source file of the GNU LilyPond music typesetter
#.
#. (c) 1998--2004  Han-Wen Nienhuys <hanwen@cs.uu.nl>
#. Jan Nieuwenhuizen <janneke@gnu.org>
#. TODO
#. use -f and -t for -s output
#. NEWS
#. 0.2
#. - rewrite in python
#. Did we ever have \mudela-version?  I doubt it.
#. lilypond_version_re_str = '\\\\version *\"(.*)\"'
#. ###########################
#. need new a namespace
#. raise FatalConversionError()
#. need new a namespace
#. harmful to current .lys
#. str = re.sub ('\\\\key([^;]+);', '\\\\accidentals \\1;', str)
#. raise FatalConversionError()
#. raise FatalConversionError()
#. raise FatalConversionError()
#. TODO: lots of other syntax change should be done here as well
#. Ugh, but meaning of \stemup changed too
#. maybe we should do \stemup -> \stemUp\slurUp\tieUp ?
#. I don't know exactly when these happened...
#. ugh, we loose context setting here...
#. (lacks capitalisation slur -> Slur)
#. # dynamic..
#. TODO: add lots of these
#. ugh
#. old fix
#. Make sure groups of more than one ; have space before
#. them, so that non of them gets removed by next rule
#. Only remove ; that are not after spaces, # or ;
#. Otherwise  we interfere with Scheme comments,
#. which is badbadbad.
#. 40 ?
#. # end of while <>
#. add dash: -[, so that [<<a b>> c d] becomes
#. <<a b>>-[ c d]
#. and gets skipped by articulation_substitute
#. this rule doesn't really work,
#. too lazy to figure out why.
#. str = re.sub (r'molecule', 'collage', str)
#. molecule -> collage
#. -1: remove .
#. ###############################
#. END OF CONVERSIONS
#. ###############################
#. !@PYTHON@
#. info mostly taken from looking at files. See also
#. http://lilypond.org/wiki/?EnigmaTransportFormat
#. This supports
#.
#. * notes
#. * rests
#. * ties
#. * slurs
#. * lyrics
#. * articulation
#. * grace notes
#. * tuplets
#.
#. todo:
#. * slur/stem directions
#. * voices (2nd half of frame?)
#. * more intelligent lyrics
#. * beams (better use autobeam?)
#. * more robust: try entertainer.etf (freenote)
#. * dynamics
#. * empty measures (eg. twopt03.etf from freenote)
#.
#. uGUHGUHGHGUGH
#. notename 0 == central C
#. represent pitches as (notename, alteration), relative to C-major scale
#. a fifth up
#. minor scale
#. should cache this.
#. flag1 isn't all that interesting.
#. 3: '>',
#. 18: '\arpeggio' ,
#. really only for 0, but we only know about 0 and 1
#. do grace notes.
#. ugh.
#. we don't attempt voltas since they fail easily.
#. and g.repeat_bar == '|:' or g.repeat_bar == ':|:' or g.bracket:
#. 4 layers.
#. let's not do this: this really confuses when eE happens to be before  a ^text.
#. if last_tag and last_indices:
#. etf_file_dict[last_tag][last_indices].append (l)
#. # do it
#. staff-spec
#. should use \addlyrics ?
#. !@PYTHON@
#. ###############################################################
#. Users of python modules should include this snippet
#. and customize variables below.
#. We'll suffer this path init stuff as long as we don't install our
#. python packages in <prefix>/lib/pythonx.y (and don't kludge around
#. it as we do with teTeX on Red Hat Linux: set some environment var
#. (PYTHONPATH) in profile)
#. If set, LILYPONDPREFIX must take prevalence
#. if datadir is not set, we're doing a build and LILYPONDPREFIX
#. Customize these
#. if __name__ == '__main__':
#. lilylib globals
#: lilypond-book.py:69
msgid ""
"Process LilyPond snippets in hybrid HTML, LaTeX or texinfo document.  "
"Example usage:\n"
"\n"
"   lilypond-book --filter=\"tr '[a-z]' '[A-Z]'\" BOOK\n"
"   lilypond-book --filter=\"convert-ly --no-version --from=2.0.0 -\" BOOK\n"
"   lilypond-book --process='lilypond-bin -I include' BOOK\n"
"\n"
msgstr ""

#. Bug in option parser: --output=foe is taken as an abbreviation
#. for --output-format.
#: lilypond-book.py:81 old-lilypond-book.py:123 main.cc:139
msgid "EXT"
msgstr ""

#: lilypond-book.py:81 old-lilypond-book.py:123
msgid "use output format EXT (texi [default], texi-html, latex, html)"
msgstr ""

#: lilypond-book.py:82
msgid "FILTER"
msgstr ""

#: lilypond-book.py:82
msgid "pipe snippets through FILTER [convert-ly -n -]"
msgstr ""

#: lilypond-book.py:84 lilypond-book.py:86 lilypond.py:131
#: old-lilypond-book.py:130 main.cc:142 main.cc:147
msgid "DIR"
msgstr ""

#: lilypond-book.py:84
msgid "add DIR to include path"
msgstr ""

#: lilypond-book.py:85
msgid "COMMAND"
msgstr ""

#: lilypond-book.py:85
msgid "process ly_files using COMMAND FILE..."
msgstr ""

#: lilypond-book.py:86
msgid "write output to DIR"
msgstr ""

#: lilypond-book.py:87 lilypond.py:149 midi2ly.py:105 mup2ly.py:78
#: old-lilypond-book.py:140 main.cc:150
msgid "be verbose"
msgstr ""

#: lilypond-book.py:88 old-lilypond-book.py:141
msgid "print version information"
msgstr ""

#: lilypond-book.py:89 lilypond.py:151 midi2ly.py:107 mup2ly.py:80
#: old-lilypond-book.py:142 main.cc:151
msgid "show warranty and copyright"
msgstr ""

#. only use installed binary  when we're installed too.
#. Recognize special sequences in the input
#.
#. (?P<name>regex) -- assign result of REGEX to NAME
#. *? -- match non-greedily.
#. (?m) -- multiline regex: make ^ and $ match at each line
#. (?s) -- make the dot match all characters including newline
#. don't do this: fucks up with @code{@{}
#. 'verb': r'''(?P<code>@code{.*?})''',
#. Hmm
#. defaults
#: lilypond-book.py:341
#, python-format
msgid "deprecated ly-option used: %s"
msgstr ""

#: lilypond-book.py:342
#, python-format
msgid "compatibility mode translation: %s"
msgstr ""

#: lilypond-book.py:362
#, python-format
msgid "ignoring unknown ly option: %s"
msgstr ""

#. URGS
#. 1 = central C
#. BARF
#. use lilypond-bin for latex (.lytex) books,
#. and lilypond --preview for html, texinfo books?
#. Ugh.  (La)TeX writes progress and error messages on stdout
#. Redirect to stderr
#. check if it really is EPS.
#. Otherwise music glyphs disappear from 2nd and following pages.
#. TODO: should run dvips -pp -E per page, then we get proper
#. cropping as well.
#. make non EPS.
#: lilypond-book.py:416
#, python-format
msgid "file not found: %s\n"
msgstr ""

#. TODO: something smart with target formats
#. (ps, png) and m/ctimes
#. TODO
#. URGUGHUGHUGUGHU
#. URG, makeinfo implicitely prepends dot to ext
#. specifying no extension is most robust
#. self.output_print_filename (TEXINFO)
#. need par after image
#. #  found = dict (map (lambda x: (x, None), types))
#. # urg python2.1
#. We want to search for multiple regexes, without searching
#. the string multiple times for one regex.
#. Hence, we use earlier results to limit the string portion
#. where we search.
#. Since every part of the string is traversed at most once for
#. every type of snippet, this is linear.
#. FIXME.
#. Limiting the search space is a cute
#. idea, but this *requires* to search
#. for possible containing blocks
#. first, at least long as we do not
#. search for the start of blocks, but
#. always/directly for the entire
#. @block ... @end block.
#: lilypond-book.py:707
#, python-format
msgid "Opening filter `%s'"
msgstr ""

#. need anything else besides textwidth?
#. TEXINFO: '.texinfo',
#. ugh
#. FIXME
#: lilypond-book.py:819
#, python-format
msgid "cannot determine format for: %s"
msgstr ""

#. urg python interface to libkpathsea?
#. only default to stdout when filtering
#: lilypond-book.py:860
msgid "Output would overwrite input file; use --output."
msgstr ""

#: lilypond-book.py:867
#, python-format
msgid "Reading %s..."
msgstr ""

#. FIXME: containing blocks must be first, see find_toplevel_snippets
#. 'verb',
#: lilypond-book.py:881
msgid "Dissecting..."
msgstr ""

#. FIXME: @paper is usually not in chunk #0:
#. \input texinfo @c -*-texinfo-*-
#. bluntly search first K of source
#. s = chunks[0].replacement_text ()
#: lilypond-book.py:909
msgid "Writing snippets..."
msgstr ""

#: lilypond-book.py:914
msgid "Processing..."
msgstr ""

#: lilypond-book.py:917
msgid "All snippets are up to date..."
msgstr ""

#: lilypond-book.py:920
#, python-format
msgid "Compiling %s..."
msgstr ""

#: lilypond-book.py:928
#, python-format
msgid "Processing include: %s"
msgstr ""

#. ###############################################################
#. # MAIN
#. ###############################################################
#: lilypond-book.py:944 lilypond.py:693 midi2ly.py:1018
#: old-lilypond-book.py:1570
#, python-format
msgid "getopt says: `%s'"
msgstr ""

#. !@PYTHON@
#.
#. lilypond.py -- Run LilyPond, add titles to bare score, generate printable
#. document
#. Invokes: lilypond-bin, latex (or pdflatex), dvips, ps2pdf, gs
#.
#. source file of the GNU LilyPond music typesetter
#.
#. (c) 1998--2004  Han-Wen Nienhuys <hanwen@cs.uu.nl>
#. Jan Nieuwenhuizen <janneke@gnu.org>
#. This is the third incarnation of ly2dvi, now renamed lilypond.
#.
#. Earlier incarnations of lilypond were written by
#. Jeffrey B. Reed<daboys@austin.rr.com> (Python version)
#. Jan Arne Fagertun <Jan.A.Fagertun@@energy.sintef.no> (Bourne shell script)
#.
#. Note: gettext work best if we use ' for program/docstrings and "
#. for gettextable strings.
#. USE ''' for docstrings.
#. ###############################################################
#. Users of python modules should include this snippet
#. and customize variables below.
#. We'll suffer this path init stuff as long as we don't install our
#. python packages in <prefix>/lib/pythonx.y (and don't kludge around
#. it as we do with teTeX on Red Hat Linux: set some environment var
#. (PYTHONPATH) in profile)
#. If set, LILYPONDPREFIX must take prevalence
#. if datadir is not set, we're doing a build and LILYPONDPREFIX
#. Customize these
#. if __name__ == '__main__':
#. lilylib globals
#. # FIXME
#. # do -P or -p by default?
#. #help_summary = _ ("Run LilyPond using LaTeX for titling")
#: lilypond.py:120
msgid "Run LilyPond, add titles, generate printable document."
msgstr ""

#: lilypond.py:126
msgid "write Makefile dependencies for every input file"
msgstr ""

#: lilypond.py:128
msgid "print even more output"
msgstr ""

#: lilypond.py:129 lilypond.py:136 midi2ly.py:102 old-lilypond-book.py:136
#: old-lilypond-book.py:137 main.cc:143 main.cc:146
msgid "FILE"
msgstr ""

#: lilypond.py:129
msgid "find pfa fonts used in FILE"
msgstr ""

#: lilypond.py:130
msgid "make HTML file with links to all output"
msgstr ""

#: lilypond.py:131
msgid "add DIR to LilyPond's search path"
msgstr ""

#: lilypond.py:133
#, python-format
msgid "keep all output, output to directory %s.dir"
msgstr ""

#: lilypond.py:134
msgid "don't run LilyPond"
msgstr ""

#: lilypond.py:135 main.cc:145
msgid "produce MIDI output only"
msgstr ""

#: lilypond.py:136 midi2ly.py:102 mup2ly.py:76 main.cc:146
msgid "write output to FILE"
msgstr ""

#: lilypond.py:137 old-lilypond-book.py:138
msgid "RES"
msgstr ""

#: lilypond.py:138 old-lilypond-book.py:139
msgid "set the resolution of the preview to RES"
msgstr ""

#: lilypond.py:139
msgid "do not generate PDF output"
msgstr ""

#: lilypond.py:140
msgid "do not generate PostScript output"
msgstr ""

#: lilypond.py:141
msgid "generate PDF output"
msgstr ""

#: lilypond.py:142
msgid "generate PostScript output"
msgstr ""

#: lilypond.py:143
msgid "use pdflatex to generate a PDF output"
msgstr ""

#: lilypond.py:144
msgid "generate PNG page images"
msgstr ""

#: lilypond.py:145
msgid "make a picture of the first system"
msgstr ""

#: lilypond.py:146
msgid "generate PS.GZ"
msgstr ""

#: lilypond.py:147
msgid "run in safe-mode"
msgstr ""

#: lilypond.py:148
msgid "KEY=VAL"
msgstr ""

#: lilypond.py:148
msgid "change global setting KEY to VAL"
msgstr ""

#: lilypond.py:150 midi2ly.py:106 mup2ly.py:79 main.cc:149
msgid "print version number"
msgstr ""

#. other globals
#. Pdftex support
#. # yuk.
#. lilypond_binary = 'valgrind --suppressions=%(home)s/usr/src/guile-1.6.supp --num-callers=10 %(home)s/usr/src/lilypond/lily/out/lilypond '% { 'home' : '/home/hanwen' }
#. only use installed binary  when we're installed too.
#. init to empty; values here take precedence over values in the file
#. # TODO: change name.
#. for geometry v3
#. Output formats that lilypond should create
#. what a name.
#. ly.warning (_ ("invalid value: %s") % `val`)
#. ly.warning (_ ("invalid value: %s") % `val`)
#: lilypond.py:234
#, python-format
msgid "no such setting: `%s'"
msgstr ""

#. 2 == user interrupt.
#: lilypond.py:284
#, python-format
msgid "LilyPond crashed (signal %d)."
msgstr ""

#: lilypond.py:285
msgid "Please submit a bug report to bug-lilypond@gnu.org"
msgstr ""

#: lilypond.py:291
#, python-format
msgid "LilyPond failed on input file %s (exit status %d)"
msgstr ""

#: lilypond.py:294
#, python-format
msgid "LilyPond failed on an input file (exit status %d)"
msgstr ""

#: lilypond.py:295
msgid "Continuing..."
msgstr ""

#. urg
#: lilypond.py:306
#, python-format
msgid "Analyzing %s..."
msgstr ""

#. search only the first 10k
#: lilypond.py:364
#, python-format
msgid "no LilyPond output found for `%s'"
msgstr ""

#. The final \n seems important here. It ensures that the footers and taglines end up on the right page.
#. TODO: should set textheight (enlarge) depending on papersize.
#: lilypond.py:431
#, python-format
msgid "invalid value: `%s'"
msgstr ""

#. set sane geometry width (a4-width) for linewidth = -1.
#. who the hell is 597 ?
#. Ugh.  (La)TeX writes progress and error messages on stdout
#. Redirect to stderr
#: lilypond.py:529
msgid "LaTeX failed on the output file."
msgstr ""

#. make a preview by rendering only the 1st line
#. of each score
#: lilypond.py:586
msgid ""
"Trying create PDF, but no PFA fonts found.\n"
"Using bitmap fonts instead. This will look bad."
msgstr ""

#. ugh. Different targets?
#. Added as functionality to lilypond, because lilypond may well need to do this
#. in future too.
#. no ps header?
#: lilypond.py:635
#, python-format
msgid "not a PostScript file: `%s'"
msgstr ""

#. todo
#: lilypond.py:680
#, python-format
msgid "Writing HTML menu `%s'"
msgstr ""

#. signal programming error
#. Don't convert input files to abspath, rather prepend '.' to include
#. path.
#. As a neat trick, add directory part of first input file
#. to include path.  That way you can do without the clumsy -I in:
#. lilypond -I foe/bar/baz foo/bar/baz/baz.ly
#: lilypond.py:800
msgid "pseudo filter"
msgstr ""

#: lilypond.py:803
msgid "pseudo filter only for single input file"
msgstr ""

#. HACK
#. status = os.system ('lilypond -w')
#: lilypond.py:808 old-lilypond-book.py:1643
msgid "no files specified on command line"
msgstr ""

#. Ugh, maybe make a setup () function
#. hmmm. Wish I'd 've written comments when I wrote this.
#. now it looks complicated.
#: lilypond.py:840
#, python-format
msgid "filename should not contain spaces: `%s'"
msgstr ""

#. to be sure, add tmpdir *in front* of inclusion path.
#. os.environ['TEXINPUTS'] =  tmpdir + ':' + os.environ['TEXINPUTS']
#. We catch all exceptions, because we need to do stuff at exit:
#. * copy any successfully generated stuff from tempdir and
#. notify user of that
#. * cleanout tempdir
#. ## ARGH. This also catches python programming errors.
#. ## this should only catch lilypond nonzero exit  status
#. ## --hwn
#. TODO: friendly message about LilyPond setup/failing?
#.
#: lilypond.py:880
msgid "Running LilyPond failed. Rerun with --verbose for a trace."
msgstr ""

#. Our LilyPond pseudo filter always outputs to 'lelie'
#. have subsequent stages and use 'lelie' output.
#. unless: add --tex, or --latex?
#. TODO: friendly message about TeX/LaTeX setup,
#. trying to run tex/latex by hand
#: lilypond.py:921
msgid "Failed to make PS file. Rerun with --verbose for a trace."
msgstr ""

#. unless: add --tex, or --latex?
#. TODO: friendly message about TeX/LaTeX setup,
#. trying to run tex/latex by hand
#: lilypond.py:951
msgid "Running LaTeX failed. Rerun with --verbose for a trace."
msgstr ""

#. add DEP to targets?
#: lilypond.py:963 input-file-results.cc:74
#, c-format, python-format
msgid "dependencies output to `%s'..."
msgstr ""

#: lilypond.py:974
#, python-format
msgid "%s output to <stdout>..."
msgstr ""

#: lilypond.py:979 includable-lexer.cc:57 input-file-results.cc:217
#: input-file-results.cc:224 lily-guile.cc:86
#, c-format, python-format
msgid "can't find file: `%s'"
msgstr ""

#. Hmm, if this were a function, we could call it the except: clauses
#: lilypond.py:1002
#, python-format
msgid "%s output to %s..."
msgstr ""

#: lilypond.py:1005
#, python-format
msgid "can't find file: `%s.%s'"
msgstr ""

#. !@PYTHON@
#.
#. midi2ly.py -- LilyPond midi import script
#.
#. source file of the GNU LilyPond music typesetter
#.
#. (c) 1998--2004  Han-Wen Nienhuys <hanwen@cs.uu.nl>
#. Jan Nieuwenhuizen <janneke@gnu.org>
#. ###############################################################
#. Users of python modules should include this snippet.
#.
#. This soon to be removed for: import lilypond.lilylib as ly
#. ###############################################################
#. ###############################################################
#. ############### CONSTANTS
#. ###############################################################
#. temp_dir = os.path.join (original_dir,  '%s.dir' % program_name)
#. original_dir = os.getcwd ()
#. keep_temp_dir_p = 0
#: midi2ly.py:94
msgid "Convert MIDI to LilyPond source."
msgstr ""

#: midi2ly.py:97
msgid "print absolute pitches"
msgstr ""

#: midi2ly.py:98 midi2ly.py:103
msgid "DUR"
msgstr ""

#: midi2ly.py:98
msgid "quantise note durations on DUR"
msgstr ""

#: midi2ly.py:99
msgid "print explicit durations"
msgstr ""

#: midi2ly.py:101
msgid "ALT[:MINOR]"
msgstr ""

#: midi2ly.py:101
msgid "set key: ALT=+sharps|-flats; MINOR=1"
msgstr ""

#: midi2ly.py:103
msgid "quantise note starts on DUR"
msgstr ""

#: midi2ly.py:104
msgid "DUR*NUM/DEN"
msgstr ""

#: midi2ly.py:104
msgid "allow tuplet durations DUR*NUM/DEN"
msgstr ""

#: midi2ly.py:108
msgid "treat every text as a lyric"
msgstr ""

#: midi2ly.py:136 mup2ly.py:130
msgid " 2001--2004"
msgstr ""

#: midi2ly.py:141 mup2ly.py:135
msgid ""
"\n"
"Distributed under terms of the GNU General Public License. It comes with\n"
"NO WARRANTY."
msgstr ""

#: midi2ly.py:166 mup2ly.py:162
msgid "Exiting ... "
msgstr ""

#: midi2ly.py:264 mup2ly.py:261
#, python-format
msgid "command exited with value %d"
msgstr ""

#. ###############################################################
#. END Library
#. ###############################################################
#. hmm
#. major scale: do-do
#. minor scale: la-la  (= + 5) '''
#. By tradition, all scales now consist of a sequence
#. of 7 notes each with a distinct name, from amongst
#. a b c d e f g.  But, minor scales have a wide
#. second interval at the top - the 'leading note' is
#. sharped. (Why? it just works that way! Anything
#. else doesn't sound as good and isn't as flexible at
#. saying things. In medieval times, scales only had 6
#. notes to avoid this problem - the hexachords.)
#. So, the d minor scale is d e f g a b-flat c-sharp d
#. - using d-flat for the leading note would skip the
#. name c and duplicate the name d.  Why isn't c-sharp
#. put in the key signature? Tradition. (It's also
#. supposedly based on the Pythagorean theory of the
#. cycle of fifths, but that really only applies to
#. major scales...)  Anyway, g minor is g a b-flat c d
#. e-flat f-sharp g, and all the other flat minor keys
#. end up with a natural leading note. And there you
#. have it.
#. John Sankey <bf250@freenet.carleton.ca>
#.
#. Let's also do a-minor: a b c d e f gis a
#.
#. --jcn
#. as -> gis
#. des -> cis
#. ges -> fis
#. g -> fisis
#. d -> cisis
#. a -> gisis
#. b -> ces
#. e -> fes
#. f -> eis
#. c -> bis
#. # FIXME: compile fix --jcn
#. TODO: move space
#. fis cis gis dis ais eis bis
#. bes es as des ges ces fes
#. urg, we should be sure that we're in a lyrics staff
#. all include ALL_NOTES_OFF
#. ugh, must set key while parsing
#. because Note init uses key
#. Better do Note.calc () at dump time?
#. last_lyric.clocks = t - last_time
#. hmm
#. urg, this will barf at meter changes
#. urg LilyPond doesn't start at c4, but
#. remembers from previous tracks!
#. reference_note = Note (clocks_per_4, 4*12, 0)
#. must be in \notes mode for parsing \skip
#: midi2ly.py:1002
#, python-format
msgid "%s output to `%s'..."
msgstr ""

#: midi2ly.py:1033
msgid "Example:"
msgstr ""

#: midi2ly.py:1083
msgid "no files specified on command line."
msgstr ""

#. !@PYTHON@
#. mup2ly.py -- mup input converter
#.
#. source file of the GNU LilyPond music typesetter
#.
#. (c) 2001
#. if set, LILYPONDPREFIX must take prevalence
#. if datadir is not set, we're doing a build and LILYPONDPREFIX
#: mup2ly.py:70
msgid "Convert mup to LilyPond source."
msgstr ""

#: mup2ly.py:73
msgid "debug"
msgstr ""

#: mup2ly.py:74
msgid "define macro NAME [optional expansion EXP]"
msgstr ""

#: mup2ly.py:77
msgid "only pre-process"
msgstr ""

#. Duh.  Python style portable: cp *.EXT OUTDIR
#. system ('cp *.%s %s' % (ext, outdir), 1)
#. Python < 1.5.2 compatibility
#.
#. On most platforms, this is equivalent to
#. `normpath(join(os.getcwd()), PATH)'.  *Added in Python version 1.5.2*
#. if set, LILYPONDPREFIX must take prevalence
#. if datadir is not set, we're doing a build and LILYPONDPREFIX
#. ###############################################################
#. END Library
#.
#. PMX cut and paste
#.
#. if not self.entries:
#. #return '\n'
#. #ugh ugh
#. return '\n%s = {}\n\n' % self.idstring ()
#. ugh
#. def set_clef (self, letter):
#. clstr = clef_table[letter]
#. self.voices[0].add_nonchord (Clef (clstr))
#. urg
#. maybe use import copy?
#. for i in self.pitches:
#. ch.pitches.append (i)
#. for i in self.scripts:
#. ch.scripts.append (i)
#. http://www.arkkra.com/doc/uguide/contexts.html
#. #self.current_staffs = []
#. duh
#. FIXME: 1?
#. FIXME: does key play any role in this?
#. ch = self.current_voices[0].last_chord ()
#. ch.basic_duration = self.current_voices[0].last_chord ().basic_duration
#. ugh
#. ch = self.current_voices[0].last_chord ()
#. `;' is not a separator, chords end with ';'
#. mup resets default duration and pitch each bar
#. ugh: these (and lots more) should also be parsed in
#. context staff.  we should have a class Staff_properties
#. and parse/set all those.
#. shortcut: set to official mup maximum (duh)
#. self.set_staffs (40)
#: mup2ly.py:1076
#, python-format
msgid "no such context: %s"
msgstr ""

#. hmm
#. dig this: mup allows ifdefs inside macro bodies
#. don't do nested multi-line defines
#. duh: mup is strictly line-based, except for `define',
#. which is `@' terminated and may span several lines
#. don't define new macros in unactive areas
#. To support nested multi-line define's
#. process_function and macro_name, macro_body
#. should become lists (stacks)
#. The mup manual is undetermined on this
#. and I haven't seen examples doing it.
#.
#. don't do nested multi-line define's
#. writes to stdout for help2man
#. don't call
#. identify ()
#. sys.stdout.flush ()
#. handy emacs testing
#. if not files:
#. files = ['template.mup']
#: mup2ly.py:1300
#, python-format
msgid "Processing `%s'..."
msgstr ""

#: mup2ly.py:1319
#, python-format
msgid "Writing `%s'..."
msgstr ""

#. duh
#. !@PYTHON@
#. musedata = musedata.stanford.edu
#. musedata = COBOL for musicians.
#. TODO
#.
#. * clefs,
#. * keys,
#. * staffs,
#. * multiple voices (they use `Backspace' (shudder)
#. * tuplets
#.
#.
#. I completely forgot how this was supposed to work --hwn 5/2002
#.
#.
#. uGUHGUHGHGUGH
#. musedata license (argh)
#. ignore sound & print
#. !@PYTHON@
#. vim: set noexpandtab:
#. This is was the idea for handling of comments:
#. Multiline comments, @ignore .. @end ignore is scanned for
#. in read_doc_file, and the chunks are marked as 'ignore', so
#. lilypond-book will not touch them any more. The content of the
#. chunks are written to the output file. Also 'include' and 'input'
#. regex has to check if they are commented out.
#.
#. Then it is scanned for 'lilypond', 'lilypond-file' and 'lilypond-block'.
#. These three regex's has to check if they are on a commented line,
#. % for latex, @c for texinfo.
#.
#. Then lines that are commented out with % (latex) and @c (Texinfo)
#. are put into chunks marked 'ignore'. This cannot be done before
#. searching for the lilypond-blocks because % is also the comment character
#. for lilypond.
#.
#. The the rest of the rexeces are searched for. They don't have to test
#. if they are on a commented out line.
#. ###############################################################
#. Users of python modules should include this snippet
#. and customize variables below.
#. We'll suffer this path init stuff as long as we don't install our
#. python packages in <prefix>/lib/pythonx.y (and don't kludge around
#. it as we do with teTeX on Red Hat Linux: set some environment var
#. (PYTHONPATH) in profile)
#. If set, LILYPONDPREFIX must take prevalence
#. if datadir is not set, we're doing a build and LILYPONDPREFIX
#. Customize these
#. if __name__ == '__main__':
#. lilylib globals
#. # FIXME
#. # do -P or -p by default?
#. #help_summary = _ ("Run LilyPond using LaTeX for titling")
#: old-lilypond-book.py:118
msgid "Process LilyPond snippets in hybrid html, LaTeX or texinfo document"
msgstr ""

#: old-lilypond-book.py:124 old-lilypond-book.py:125 old-lilypond-book.py:127
#: old-lilypond-book.py:128
msgid "DIM"
msgstr ""

#: old-lilypond-book.py:124
msgid "default fontsize for music.  DIM is assumed to be in points"
msgstr ""

#: old-lilypond-book.py:125
msgid "deprecated, use --default-music-fontsize"
msgstr ""

#: old-lilypond-book.py:126
msgid "OPT"
msgstr ""

#: old-lilypond-book.py:126
msgid "pass OPT quoted to the lilypond command line"
msgstr ""

#: old-lilypond-book.py:127
msgid "force fontsize for all inline lilypond. DIM is assumed to be in points"
msgstr ""

#: old-lilypond-book.py:128
msgid "deprecated, use --force-music-fontsize"
msgstr ""

#: old-lilypond-book.py:130
msgid "include path"
msgstr ""

#: old-lilypond-book.py:131
msgid "write dependencies"
msgstr ""

#: old-lilypond-book.py:132
msgid "PREF"
msgstr ""

#: old-lilypond-book.py:132
msgid "prepend PREF before each -M dependency"
msgstr ""

#: old-lilypond-book.py:133
msgid "don't run lilypond"
msgstr ""

#: old-lilypond-book.py:134
msgid "don't generate pictures"
msgstr ""

#: old-lilypond-book.py:135
msgid "strip all lilypond blocks from output"
msgstr ""

#: old-lilypond-book.py:136
msgid "filename main output file"
msgstr ""

#: old-lilypond-book.py:137
msgid "where to place generated files"
msgstr ""

#. format specific strings, ie. regex-es for input, and % strings for output
#. global variables
#. lilypond_binary = 'valgrind --suppressions=/home/hanwen/usr/src/guile-1.6.supp  --num-callers=10 /home/hanwen/usr/src/lilypond/lily/out/lilypond'
#. only use installed binary  when we're installed too.
#. only use installed binary  when we're installed too.
#. ###############################################################
#. Dimension handling for LaTeX.
#.
#. Ugh.  (La)TeX writes progress and error messages on stdout
#. Redirect to stderr
#: old-lilypond-book.py:227
msgid "LaTeX failed."
msgstr ""

#: getopt-long.cc:146
#, c-format
msgid "option `%s' requires an argument"
msgstr ""

#: getopt-long.cc:150
#, c-format
msgid "option `%s' doesn't allow an argument"
msgstr ""

#: getopt-long.cc:154
#, c-format
msgid "unrecognized option: `%s'"
msgstr ""

#: getopt-long.cc:161
#, c-format
msgid "invalid argument `%s' to option `%s'"
msgstr ""

#: warn.cc:25
#, c-format
msgid "warning: %s\n"
msgstr ""

#: warn.cc:31
#, c-format
msgid "error: %s\n"
msgstr ""

#: warn.cc:44
#, c-format
msgid "programming error: %s (Continuing; crossing fingers)\n"
msgstr ""

#: accidental.cc:219 key-signature-interface.cc:139
#, c-format
msgid "accidental `%s' not found"
msgstr ""

#: accidental-engraver.cc:167
#, c-format
msgid "Accidental typesetting list must begin with context-name: %s"
msgstr ""

#: accidental-engraver.cc:194
#, c-format
msgid "unknown accidental typesetting: %s. Ignored"
msgstr ""

#: accidental-engraver.cc:211
#, c-format
msgid "Accidental rule must be pair or context-name; Found %s"
msgstr ""

#: afm.cc:145
#, c-format
msgid "Error parsing AFM file: `%s'"
msgstr ""

#: all-font-metrics.cc:100
#, c-format
msgid "checksum mismatch for font file: `%s'"
msgstr ""

#: all-font-metrics.cc:102
#, c-format
msgid "does not match: `%s'"
msgstr ""

#: all-font-metrics.cc:107
msgid ""
" Rebuild all .afm files, and remove all .pk and .tfm files.\n"
"Rerun with -V to show font paths.\n"
msgstr ""

#: all-font-metrics.cc:108
msgid ""
"A script for removing font-files is delivered with the source-code,\n"
"in buildscripts/clean-fonts.sh"
msgstr ""

#: all-font-metrics.cc:188
#, c-format
msgid "can't find font: `%s'"
msgstr ""

#: all-font-metrics.cc:189
msgid "Loading default font"
msgstr ""

#: all-font-metrics.cc:204
#, c-format
msgid "can't find default font: `%s'"
msgstr ""

#: all-font-metrics.cc:205 includable-lexer.cc:59 input-file-results.cc:218
#, c-format
msgid "(search path: `%s')"
msgstr ""

#: all-font-metrics.cc:206
msgid "Giving up"
msgstr ""

#: auto-change-iterator.cc:62 change-iterator.cc:61
msgid "Can't switch translators, I'm there already"
msgstr ""

#: bar-check-iterator.cc:68
#, c-format
msgid "barcheck failed at: %s"
msgstr ""

#: beam.cc:151
msgid "beam has less than two visible stems"
msgstr ""

#: beam.cc:156
msgid "Beam has less than two stems. Removing beam."
msgstr ""

#: beam.cc:1041
msgid ""
"Not sure that we can find a nice beam slope (no viable initial configuration "
"found)."
msgstr ""

#: beam-engraver.cc:139
msgid "already have a beam"
msgstr ""

#: beam-engraver.cc:212
msgid "unterminated beam"
msgstr ""

#: beam-engraver.cc:245 chord-tremolo-engraver.cc:191
msgid "stem must have Rhythmic structure"
msgstr ""

#: beam-engraver.cc:259
msgid "stem doesn't fit in beam"
msgstr ""

#: beam-engraver.cc:260
msgid "beam was started here"
msgstr ""

#: break-align-interface.cc:214
#, c-format
msgid "No spacing entry from %s to `%s'"
msgstr ""

#: change-iterator.cc:22
#, c-format
msgid "can't change `%s' to `%s'"
msgstr ""

#.
#. We could change the current translator's id, but that would make
#. errors hard to catch
#.
#. last->translator_id_string_  = get_change ()->change_to_id_string_;
#.
#: change-iterator.cc:80
msgid "I'm one myself"
msgstr ""

#: change-iterator.cc:83
msgid "none of these in my family"
msgstr ""

#: chord-tremolo-engraver.cc:100
#, c-format
msgid "Chord tremolo with %d elements. Must have two elements."
msgstr ""

#: chord-tremolo-engraver.cc:153
msgid "unterminated chord tremolo"
msgstr ""

#: chord-tremolo-iterator.cc:64
msgid "no one to print a tremolos"
msgstr ""

#: clef.cc:64
#, c-format
msgid "clef `%s' not found"
msgstr ""

#: cluster.cc:123
#, c-format
msgid "unknown cluster style `%s'"
msgstr ""

#: coherent-ligature-engraver.cc:84
#, c-format
msgid "gotcha: ptr=%ul"
msgstr ""

#: coherent-ligature-engraver.cc:96
#, c-format
msgid "distance=%f"
msgstr ""

#: coherent-ligature-engraver.cc:139
#, c-format
msgid "Coherent_ligature_engraver: setting `spacing-increment = 0.01': ptr=%ul"
msgstr ""

#: context.cc:180
#, c-format
msgid "Cannot find or create `%s' called `%s'"
msgstr ""

#: context.cc:217
#, c-format
msgid "can't find or create: `%s'"
msgstr ""

#: context-def.cc:115
#, c-format
msgid "Program has no such type: `%s'"
msgstr ""

#: custos.cc:85
#, c-format
msgid "custos `%s' not found"
msgstr ""

#: dimensions.cc:13
msgid "NaN"
msgstr ""

#: dynamic-engraver.cc:183 span-dynamic-performer.cc:86
msgid "can't find start of (de)crescendo"
msgstr ""

#: dynamic-engraver.cc:193
msgid "already have a decrescendo"
msgstr ""

#: dynamic-engraver.cc:195
msgid "already have a crescendo"
msgstr ""

#: dynamic-engraver.cc:198
msgid "Cresc started here"
msgstr ""

#: dynamic-engraver.cc:305
msgid "unterminated (de)crescendo"
msgstr ""

#: event.cc:49
#, c-format
msgid "Transposition by %s makes alteration larger than two"
msgstr ""

#: event.cc:69 relative-octave-check.cc:25
msgid "Failed octave check, got: "
msgstr ""

#: event-chord-iterator.cc:56 output-property-music-iterator.cc:29
#, c-format
msgid "Junking event: `%s'"
msgstr ""

#: extender-engraver.cc:143 extender-engraver.cc:153
msgid "unterminated extender"
msgstr ""

#: folded-repeat-iterator.cc:65
msgid "no one to print a repeat brace"
msgstr ""

#: glissando-engraver.cc:102
msgid "Unterminated glissando."
msgstr ""

#: global-context.cc:151
#, c-format
msgid "can't find `%s' context"
msgstr ""

#: gourlay-breaking.cc:195
#, c-format
msgid "Optimal demerits: %f"
msgstr ""

#: gourlay-breaking.cc:200
msgid "No feasible line breaking found"
msgstr ""

#: gregorian-ligature-engraver.cc:59
#, c-format
msgid "\\%s ignored"
msgstr ""

#: gregorian-ligature-engraver.cc:64
#, c-format
msgid "implied \\%s added"
msgstr ""

#: hairpin.cc:98
msgid "decrescendo too small"
msgstr ""

#: hairpin.cc:99
msgid "crescendo too small"
msgstr ""

#: horizontal-bracket-engraver.cc:57
msgid "Don't have that many brackets."
msgstr ""

#: horizontal-bracket-engraver.cc:66
msgid "Conflicting note group events."
msgstr ""

#: hyphen-engraver.cc:96 hyphen-engraver.cc:110
msgid "unterminated hyphen; removing"
msgstr ""

#: includable-lexer.cc:50
msgid "include files are not allowed"
msgstr ""

#: input.cc:99
msgid "non fatal error: "
msgstr ""

#: input.cc:107 source-file.cc:147 source-file.cc:240
msgid "position unknown"
msgstr ""

#: input-file-results.cc:78 source-file.cc:55
#, c-format
msgid "can't open file: `%s'"
msgstr ""

#: input-file-results.cc:142
#, c-format
msgid "Now processing `%s'"
msgstr ""

#: key-performer.cc:90
msgid "FIXME: key change merge"
msgstr ""

#: kpath.cc:76
#, c-format
msgid "Kpathsea couldn't find TFM file `%s'"
msgstr ""

#: ligature-engraver.cc:152
msgid "can't find start of ligature"
msgstr ""

#: ligature-engraver.cc:158
msgid "no right bound"
msgstr ""

#: ligature-engraver.cc:184
msgid "already have a ligature"
msgstr ""

#: ligature-engraver.cc:200
msgid "no left bound"
msgstr ""

#: ligature-engraver.cc:255
msgid "unterminated ligature"
msgstr ""

#: ligature-engraver.cc:279
msgid "ligature may not contain rest; ignoring rest"
msgstr ""

#: ligature-engraver.cc:280
msgid "ligature was started here"
msgstr ""

#: lily-guile.cc:88
#, c-format
msgid "(load path: `%s')"
msgstr ""

#: lily-guile.cc:584
#, c-format
msgid "Can't find property type-check for `%s' (%s)."
msgstr ""

#: lily-guile.cc:587
msgid "Perhaps you made a typing error?"
msgstr ""

#: lily-guile.cc:593
msgid "Doing assignment anyway."
msgstr ""

#: lily-guile.cc:607
#, c-format
msgid "Type check for `%s' failed; value `%s' must be of type `%s'"
msgstr ""

#: lookup.cc:169
msgid "round filled box horizontal extent smaller than blot; decreasing blot"
msgstr ""

#: lookup.cc:174
msgid "round filled box vertical extent smaller than blot; decreasing blot"
msgstr ""

#: main.cc:100
msgid ""
"This program is free software.  It is covered by the GNU General Public\n"
"License and you are welcome to change it and/or distribute copies of it\n"
"under certain conditions.  Invoke as `lilypond-bin --warranty' for more\n"
"information.\n"
msgstr ""

#: main.cc:106
msgid ""
"    This program is free software; you can redistribute it and/or\n"
"modify it under the terms of the GNU General Public License version 2\n"
"as published by the Free Software Foundation.\n"
"\n"
"    This program is distributed in the hope that it will be useful,\n"
"but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n"
"General Public License for more details.\n"
"\n"
"    You should have received a copy (refer to the file COPYING) of the\n"
"GNU General Public License along with this program; if not, write to\n"
"the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n"
"Boston, MA 02111-1307, USA.\n"
msgstr ""

#: main.cc:135
msgid "EXPR"
msgstr ""

#: main.cc:136
msgid "set options, use -e '(ly-option-usage)' for help"
msgstr ""

#: main.cc:139
msgid "use output format EXT"
msgstr ""

#: main.cc:141
msgid "FIELD"
msgstr ""

#: main.cc:141
msgid "write header field to BASENAME.FIELD"
msgstr ""

#: main.cc:142
msgid "add DIR to search path"
msgstr ""

#: main.cc:143
msgid "use FILE as init file"
msgstr ""

#: main.cc:144
msgid "write Makefile dependencies"
msgstr ""

#: main.cc:147
msgid "prepend DIR to dependencies"
msgstr ""

#: main.cc:148
msgid "run in safe mode"
msgstr ""

#: main.cc:171
#, c-format
msgid ""
"Copyright (c) %s by\n"
"%s  and others."
msgstr ""

#. No version number or newline here.  It confuses help2man.
#: main.cc:197
#, c-format
msgid "Usage: %s [OPTIONS]... FILE..."
msgstr ""

#: main.cc:199
msgid "Typeset music and/or produce MIDI from FILE."
msgstr ""

#: main.cc:201
msgid "LilyPond produces beautiful music notation."
msgstr ""

#: main.cc:203
#, c-format
msgid "For more information, see %s,"
msgstr ""

#: main.cc:369
msgid "This option is for developers only."
msgstr ""

#: main.cc:370
msgid "Read the sources for more information."
msgstr ""

#: mensural-ligature.cc:183
msgid "Mensural_ligature:unexpected case fall-through"
msgstr ""

#: mensural-ligature.cc:193
msgid "Mensural_ligature: (join_left == 0)"
msgstr ""

#: mensural-ligature-engraver.cc:248 mensural-ligature-engraver.cc:383
msgid "unexpected case fall-through"
msgstr ""

#: mensural-ligature-engraver.cc:259
msgid "ligature with less than 2 heads -> skipping"
msgstr ""

#: mensural-ligature-engraver.cc:279
msgid "can not determine pitch of ligature primitive -> skipping"
msgstr ""

#: mensural-ligature-engraver.cc:302
msgid "prime interval within ligature -> skipping"
msgstr ""

#: mensural-ligature-engraver.cc:312
msgid "mensural ligature: duration none of L, B, S -> skipping"
msgstr ""

#: midi-item.cc:153
#, c-format
msgid "no such MIDI instrument: `%s'"
msgstr ""

#: midi-item.cc:257
msgid "silly pitch"
msgstr ""

#: midi-item.cc:273
#, c-format
msgid "Experimental: temporarily fine tuning (of %d cents) a channel."
msgstr ""

#: midi-stream.cc:40
msgid "Could not write file. Disk full?"
msgstr ""

#: my-lily-lexer.cc:185
#, c-format
msgid "Identifier name is a keyword: `%s'"
msgstr ""

#: my-lily-lexer.cc:207
#, c-format
msgid "error at EOF: %s"
msgstr ""

#: my-lily-parser.cc:45
msgid "Parsing..."
msgstr ""

#: my-lily-parser.cc:57
msgid "Braces don't match"
msgstr ""

#.
#. music for the softenon children?
#.
#: new-fingering-engraver.cc:155
msgid "music for the martians."
msgstr ""

#: new-fingering-engraver.cc:235
msgid "Fingerings are also not down?! Putting them down anyway."
msgstr ""

#: new-lyric-combine-music-iterator.cc:172
#, c-format
msgid "cannot find Voice: %s\n"
msgstr ""

#: note-collision.cc:384
msgid "Too many clashing notecolumns.  Ignoring them."
msgstr ""

#: note-head.cc:139
#, c-format
msgid "note head `%s' not found"
msgstr ""

#: paper-def.cc:73
#, c-format
msgid "paper output to `%s'..."
msgstr ""

#: paper-score.cc:72
#, c-format
msgid "Element count %d (spanners %d) "
msgstr ""

#: paper-score.cc:76
msgid "Preprocessing graphical objects..."
msgstr ""

#: parse-scm.cc:81
msgid "GUILE signaled an error for the expression beginning here"
msgstr ""

#: percent-repeat-engraver.cc:110
msgid "Don't know how to handle a percent repeat of this length."
msgstr ""

#: percent-repeat-engraver.cc:164
msgid "unterminated percent repeat"
msgstr ""

#: percent-repeat-iterator.cc:53
msgid "no one to print a percent"
msgstr ""

#: performance.cc:51
msgid "Track ... "
msgstr ""

#: performance.cc:94
msgid "Creator: "
msgstr ""

#: performance.cc:114
msgid "at "
msgstr ""

#: performance.cc:172
#, c-format
msgid "MIDI output to `%s'..."
msgstr ""

#: phrasing-slur-engraver.cc:105
msgid "unterminated phrasing slur"
msgstr ""

#: phrasing-slur-engraver.cc:123
msgid "can't find start of phrasing slur"
msgstr ""

#: piano-pedal-engraver.cc:238
msgid "Need 3 strings for piano pedals. No pedal made. "
msgstr ""

#: piano-pedal-engraver.cc:253 piano-pedal-engraver.cc:268
#: piano-pedal-performer.cc:82
#, c-format
msgid "can't find start of piano pedal: `%s'"
msgstr ""

#: piano-pedal-engraver.cc:321
#, c-format
msgid "can't find start of piano pedal bracket: `%s'"
msgstr ""

#: property-iterator.cc:94
#, c-format
msgid "Not a grob name, `%s'."
msgstr ""

#: quote-iterator.cc:181
#, c-format
msgid "In quotation: junking event %s"
msgstr ""

#: rest.cc:140
#, c-format
msgid "rest `%s' not found, "
msgstr ""

#: rest-collision.cc:145
msgid "rest direction not set.  Cannot resolve collision."
msgstr ""

#: rest-collision.cc:193
msgid "too many colliding rests"
msgstr ""

#: scm-option.cc:52
msgid "lilypond -e EXPR means:"
msgstr ""

#: scm-option.cc:54
msgid "  Evalute the Scheme EXPR before parsing any .ly files."
msgstr ""

#: scm-option.cc:56
msgid ""
"  Multiple -e options may be given, they will be evaluated sequentially."
msgstr ""

#: scm-option.cc:58
msgid ""
"  The function ly-set-option allows for access to some internal variables."
msgstr ""

#: scm-option.cc:60
msgid "Usage: lilypond -e \"(ly-set-option SYMBOL VAL)\""
msgstr ""

#: scm-option.cc:62
msgid "Where SYMBOL VAL pair is any of:"
msgstr ""

#: scm-option.cc:143 scm-option.cc:176
msgid "Unknown internal option!"
msgstr ""

#: score.cc:125
msgid "Interpreting music... "
msgstr ""

#: score.cc:135
msgid "Need music in a score"
msgstr ""

#: score.cc:145
#, c-format
msgid "elapsed time: %.2f seconds"
msgstr ""

#: score-engraver.cc:103
#, c-format
msgid "can't find `%s'"
msgstr ""

#: score-engraver.cc:104
msgid "Fonts have not been installed properly.  Aborting"
msgstr ""

#: score-engraver.cc:189
#, c-format
msgid "unbound spanner `%s'"
msgstr ""

#: script-engraver.cc:96
msgid "Don't know how to interpret articulation:"
msgstr ""

#: script-engraver.cc:97
msgid "Scheme encoding: "
msgstr ""

#. this shouldn't happen, but let's continue anyway.
#: separation-item.cc:53 separation-item.cc:97
msgid "Separation_item:  I've been drinking too much"
msgstr ""

#: simple-spacer.cc:248
#, c-format
msgid "No spring between column %d and next one"
msgstr ""

#: slur-engraver.cc:121
msgid "unterminated slur"
msgstr ""

#. How to shut up this warning, when Voice_devnull_engraver has
#. eaten start event?
#: slur-engraver.cc:139
msgid "can't find start of slur"
msgstr ""

#: source-file.cc:68
#, c-format
msgid "Huh?  Got %d, expected %d characters"
msgstr ""

#: spacing-spanner.cc:386
#, c-format
msgid "Global shortest duration is %s\n"
msgstr ""

#: spring-smob.cc:32
#, c-format
msgid "#<spring smob d= %f>"
msgstr ""

#: stem.cc:119
msgid "Weird stem size; check for narrow beams"
msgstr ""

#: stem.cc:648
#, c-format
msgid "flag `%s' not found"
msgstr ""

#: stem.cc:661
#, c-format
msgid "flag stroke `%s' not found"
msgstr ""

#: stem-engraver.cc:97
msgid "tremolo duration is too long"
msgstr ""

#: stem-engraver.cc:126
#, c-format
msgid "Adding note head to incompatible stem (type = %d)"
msgstr ""

#: stem-engraver.cc:127
msgid "Don't you want polyphonic voices instead?"
msgstr ""

#: system.cc:181
#, c-format
msgid "Element count %d."
msgstr ""

#: system.cc:335
#, c-format
msgid "Grob count %d "
msgstr ""

#: system.cc:349
msgid "Calculating line breaks..."
msgstr ""

#: text-spanner-engraver.cc:65
msgid "can't find start of text spanner"
msgstr ""

#: text-spanner-engraver.cc:79
msgid "already have a text spanner"
msgstr ""

#: text-spanner-engraver.cc:143
msgid "unterminated text spanner"
msgstr ""

#: tfm.cc:83
#, c-format
msgid "can't find ascii character: %d"
msgstr ""

#. Not using ngettext's plural feature here, as this message is
#. more of a programming error.
#: tfm-reader.cc:108
#, c-format
msgid "TFM header of `%s' has only %u word (s)"
msgstr ""

#: tfm-reader.cc:142
#, c-format
msgid "%s: TFM file has %u parameters, which is more than the %u I can handle"
msgstr ""

#: tie-engraver.cc:164
msgid "lonely tie"
msgstr ""

#: time-scaled-music-iterator.cc:24
msgid "no one to print a tuplet start bracket"
msgstr ""

#. If there is no such symbol, we default to the numbered style.
#. (Here really with a warning!)
#: time-signature.cc:95
#, c-format
msgid "time signature symbol `%s' not found; reverting to numbered style"
msgstr ""

#.
#. Todo: should make typecheck?
#.
#. OTOH, Tristan Keuris writes 8/20 in his Intermezzi.
#.
#: time-signature-engraver.cc:57
#, c-format
msgid "Found strange time signature %d/%d."
msgstr ""

#: translator-ctors.cc:53
#, c-format
msgid "unknown translator: `%s'"
msgstr ""

#: translator-group.cc:108
#, c-format
msgid "can't find: `%s'"
msgstr ""

#: tuplet-bracket.cc:448
msgid "Killing tuplet bracket across linebreak."
msgstr ""

#: vaticana-ligature.cc:92
msgid "ascending vaticana style flexa"
msgstr ""

#: vaticana-ligature.cc:181
msgid "Vaticana_ligature: zero join (delta_pitch == 0)"
msgstr ""

#: vaticana-ligature-engraver.cc:342
#, c-format
msgid ""
"ignored prefix (es) `%s' of this head according to restrictions of the "
"selected ligature style"
msgstr ""

#: vaticana-ligature-engraver.cc:572
#, c-format
msgid "Vaticana_ligature_engraver: setting `spacing-increment = %f': ptr=%ul"
msgstr ""

#: volta-engraver.cc:140
msgid "No volta spanner to end"
msgstr ""

#: volta-engraver.cc:151
msgid "Already have a volta spanner.  Stopping that one prematurely."
msgstr ""

#: volta-engraver.cc:155
msgid "Also have a stopped spanner.  Giving up."
msgstr ""

#: parser.yy:114
msgid "Tag must be symbol or list of symbols."
msgstr ""

#: parser.yy:513
msgid "Identifier should have alphabetic characters only"
msgstr ""

#: parser.yy:776
msgid "More alternatives than repeats.  Junking excess alternatives."
msgstr ""

#: parser.yy:856 parser.yy:863
msgid "\\applycontext takes function argument"
msgstr ""

#: parser.yy:1013
msgid "\\apply takes function argument"
msgstr ""

#: parser.yy:1376
msgid "Can't find music"
msgstr ""

#: parser.yy:1494
msgid "Second argument must be pitch list."
msgstr ""

#: parser.yy:1531 parser.yy:1536 parser.yy:2069
msgid "Have to be in Lyric mode for lyrics"
msgstr ""

#: parser.yy:1621
msgid "Expecting string as script definition"
msgstr ""

#: parser.yy:1828 parser.yy:1883
#, c-format
msgid "not a duration: %d"
msgstr ""

#: parser.yy:1979
msgid "Have to be in Note mode for notes"
msgstr ""

#: parser.yy:2084
msgid "Have to be in Chord mode for chords"
msgstr ""

#: parser.yy:2231
msgid "need integer number arg"
msgstr ""

#: parser.yy:2382
msgid "Suspect duration found following this beam"
msgstr ""

#: lexer.ll:183
#, c-format
msgid ""
"\n"
"Renamed input to `%s'\n"
msgstr ""

#: lexer.ll:208
msgid "EOF found inside a comment"
msgstr ""

#: lexer.ll:223
msgid "\\maininput not allowed outside init files"
msgstr ""

#: lexer.ll:247
#, c-format
msgid "wrong or undefined identifier: `%s'"
msgstr ""

#. backup rule
#: lexer.ll:256
msgid "Missing end quote"
msgstr ""

#: lexer.ll:398
msgid "Brace found at end of lyric.  Did you forget a space?"
msgstr ""

#: lexer.ll:499
msgid "Brace found at end of markup.  Did you forget a space?"
msgstr ""

#: lexer.ll:582
#, c-format
msgid "invalid character: `%c'"
msgstr ""

#: lexer.ll:654
#, c-format
msgid "unknown escaped string: `\\%s'"
msgstr ""

#: lexer.ll:752
#, c-format
msgid "Incorrect lilypond version: %s (%s, %s)"
msgstr ""

#: lexer.ll:753
msgid "Consider updating the input with the convert-ly script"
msgstr ""
