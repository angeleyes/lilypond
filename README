THE LILYPOND.ORG WEBSITE

SOURCES

The HTML sources live in a GIT repository.  To get a fresh version run

   mkdir web ; cd web 
   git init-db

   ## not necessary for 1.4.4.1 or newer
   touch empty ; git add empty ; git commit  -m 'empty' empty
   git pull git://git.sv.gnu.org/lilypond.git/ web/master:
   git repack

The command can

   git pull git://git.sv.gnu.org/lilypond.git/ web/master:

also be used to update a repository



BUILDING THE WEBSITE

To generate the main web site, run

    make

The scripts/format-page.py script merges the pages in the
site/template.ihtml template and handles @AT-VARIABLE@ substitutions,
and leaves the result in

    ./out/site

To generate the web site for language LANG (available: LANG), run

    make LANG  # for example:  make nl


REQUIREMENTS

    * python
    * make
    * gettext


AT-VARIABLEs

    @DEPTH@: home url prefix
    @IMAGES@: image url prefix
    @DOC@: doc url prefix

See scripts/format-page.py for full overview.


STATIC ENTRY URLS

   GNU LilyPond:       http://lilypond.org/
   Essay               http://lilypond.org/web/about/automated-engraving
   Documentation       http://lilypond.org/documentation
   (of latest stable)
   Tutorial            http://lilypond.org/tutorial
   (of latest stable)
   Glossary            http://lilypond.org/music-glossary
   of musical terms  
   (of latest stable)


DISTRIBUTION

* The format-page.py script is GPL

* Verbatim redistribution of the .html files and images is allowed and
  encouraged.


AUTOMATIC LANGUAGE SELECTION

Apache can be configured to append .LANG.html to an url, where LANG is
the user's browser preferred language.

The format-page.py script strips the .HTML from file names, but for
directory urls, that does not work.  This could be fixed by adding
'/index' to directory urls, but easier is to add an .htaccess (used on
lilypond.org):

    #.htaccess
    DirectoryIndex index



TRANSLATION

Get or update the sources.  See the top of README.


STARTING A NEW LANGUAGE

Type

    make new LANG=<MY-LANGUAGE>

eg. <MY-LANGUAGE> "nl" is Dutch, "de" German and "fr" French.

This will copy all orininal files from site/ to <MY-LANGUAGE>/, eg

    site/about/index.html -> <MY-LANGUAGE>/about/index.html

so you can start translating the file <MY-LANGUAGE>/about/index.html
by typing over the original English text.

See TRANSLATION for details on what pages to translate first.

When you have translated a page, add that page to repository

    git add <MY-LANGUAGE>/about/index.html
    git commit -m 'add file' <MY-LANGUAGE>/about/index.html

Add <MY-LANGUAGE> to

  * scripts/translate.py
  * scripts/format-page.py


UPDATE A TRANSLATION

Open the HTML source file and translate all plain text, leaving markup
and URLs in tact.  Tracking changes is much easier, that way.

The best choice for non-destructive editing of HTML source is probably
a simple text editor with syntax coloring such as jEdit or Gedit.  You
may view and check the result in your favorite browser.  Do not use a
word processor, that will probably mess with the markup.

If you think the original text should be changed or fixed, share your
suggestion before pushing any changes.  Typos may be fixed right away.

Do not use mozilla composer, at least until it is clear how to
let it really preserve markup.

After updating a translation, also update the GIT committish of the
original page, eg for site/about/index.html do

    make show-committish site/about/index.html 

which prints the string

    Translation of GIT committish: eb39846c61c0f3bd22d5b4d4fb12c0d7f9a381a8

that you can use to update your translated page.

Another trick is to use the `start a new translation' mechanism, and
copy committishes from the new tree

    make new LANG=committish
    head -2 committish/about/index.html 

shows

<!--
    Translation of GIT committish: afb547faee2179383f32d636554df32d11ab878e  


CHECK STATE OF TRANSLATION

Running

    make LANG=<MY-LANGUAGE> check-translation

presents a diff of the original pages since the most recent revision
of the translation.  To check a single page, run

    scripts/check-translation.py <MY-LANGUAGE>/index.html


SUBMIT 

Run

    git log

This shows something like

    commit 527d87fa35f419e292e6beb5233ded7268b0110b
    Author: Han-Wen Nienhuys <hanwen@lilypond.org>
    Date: ... 

    ...description...

For every patch.

The number 527d87fa35f419e292e6beb5233ded7268b0110b is called
"committish".  Cut & paste the number for the first change you want to
submit, eg. 

     git format-patch 527d87fa35f419e292e6beb5233ded7268b0110b^..

(the .. and ^ need to be entered literally).  This will create patches
named

    0001-summary-of-patch1.txt 
    0002-summary-of-patch2.txt 
    0003-summary-of-patch3.txt 

Send each of them to lilypond-devel@gnu.org.
