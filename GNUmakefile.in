# -*-Makefile-*-
# title	   specific top level makefile for LilyPond  

# subdir level:
#
depth = .
#

# descent order into subdirectories
# 
SUBDIRS = buildscripts scripts flower lily \
	mf ly tex ps scm \
	python po make \
	cygwin debian $(builddir)/stepmake \
	Documentation input
#

SCRIPTS = configure aclocal.m4 autogen.sh
README_FILES =  ChangeLog CHANGES COPYING DEDICATION NEWS README.mandrake ROADMAP
README_TXT_FILES = AUTHORS.txt README.txt INSTALL.txt FAQ.txt
IN_FILES := $(wildcard *.in)
EXTRA_DIST_FILES = $(wildcard *.el) vimrc VERSION $(README_FILES)  $(SCRIPTS) $(IN_FILES)  emacsclient.patch lexer-gcc-3.0.patch server.el.patch darwin.patch .cvsignore  lexer-gcc-3.1.sh 
NON_ESSENTIAL_DIST_FILES = $(README_TXT_FILES)
INSTALLATION_DIR=$(local_lilypond_datadir)
INSTALLATION_FILES=$(configuration) VERSION

# bootstrap stepmake:
#
STEPMAKE_TEMPLATES=toplevel po install
include $(depth)/make/stepmake.make 
#

footify:
	$(footify) --index=./ `$(FIND) . -maxdepth 1 -name '*.html' -print`
	$(footify-all-command)

fonts:
	$(MAKE) -C $(depth)/mf

run-reqs: builddir-setup fonts lily
web-reqs: run-reqs pfa-fonts

doc: run-reqs
	$(MAKE) -C Documentation

web-doc: web-reqs
	$(MAKE) out=www -C Documentation WWW
	$(MAKE) footify

pfa-fonts:
	$(MAKE) MAKE_PFA_FILES=1 -C mf

docdir = $(prefix)/share/doc/lilypond-$(TOPLEVEL_VERSION)
install-html-doc: html-doc
	$(INSTALL) -d $(docdir)/html 
	tar -C $(docdir)/html -zxf $(outdir)/web.tar.gz

# KPATHSEA=0: Hack for compiling without kpathsea -- not recommended
my_tfm_path = $(TFM_PATH) /tmp /tmp /tmp /tmp /tmp /tmp 


local-install:
	$(INSTALL) -d $(local_lilypond_datadir)
ifeq ($(KPATHSEA),0)
	$(foreach i, 1 2 3 4 5, rm -f $(local_lilypond_datadir)/tfm.$(i); $(LN_S) $(word $(i), $(my_tfm_path)) $(local_lilypond_datadir)/tfm.$(i) ; )
endif


final-install:
	@echo
	@echo " *** Before running, buildscripts/out/lilypond-{profile,login}"
	@echo " *** must be run. You're advised to source these scripts from your "
	@echo " *** login scripts. For more information, see Invoking LilyPond in the manual."
	@echo 

TOP_HTMLS = index.html examples.html

examples: web-reqs
	$(MAKE) out=www -C input WWW
	$(PYTHON) $(buildscript-dir)/mutopia-index.py -o $(builddir)/$@.html input/

lily: lily/$(outdir)/lilypond

lily/$(outdir)/lilypond:
	$(MAKE) -C lily

local-web: web-doc $(TOP_HTMLS:%.html=%) footify do-top-doc top-web

web-ext = gz html midi pdf png txt
top-web:
	cd $(builddir) && rm -f `find . -name \*.html~ -print`
	cd $(builddir) && find Documentation input \
		$(web-ext:%=-path '*/out-www/*.%' -or) -false \
		> $(outdir)/weblist
	cd $(builddir) && ls *.png *.html >> $(outdir)/weblist
	cat $(outdir)/weblist | (cd $(builddir); GZIP=-9v tar -czf $(outdir)/web.tar.gz  -T -)

src-ext = c cc yy ll hh icc py scm tex ps texi itexi tely itely sh
ALL-TAGS:
	etags $(shell find . $(src-ext:%=-name '*.%' -or) -false | grep -v '/out')

local-WWW:

web: local-web
html-doc: web
index: web

local-WWW-clean: top-WWW-clean

WWW-clean:
	$(MAKE) -C Documentation WWW-clean
	$(MAKE) -C input WWW-clean

top-WWW-clean:
	cd $(builddir) && rm -f $(TOP_HTMLS) lily-[0-9]*.png
	$(SHELL) $(buildscript-dir)/clean-fonts.sh

WWW:

default: $(config_h) builddir-setup

builddir-setup: $(builddir)/share/lilypond-force

$(builddir)/share/lilypond-force:
# Preparing LilyPond tree for builddir exec
	@echo Making $(builddir)/share 
	@cd $(builddir) && rm -rf share
	@mkdir -p $(builddir)/share/lilypond
	@mkdir -p $(builddir)/share/lilypond/fonts
	@mkdir -p $(builddir)/share/lilypond/tex
	@cd $(builddir)/share/lilypond && \
		ln -s $(abs-srcdir)/ly ly && \
		ln -s ../../mf/$(outconfbase) dvips && \
		ln -s ../../mf/$(outconfbase) afm && \
		ln -s ../../mf/$(outconfbase) tfm && \
		ln -s $(abs-srcdir)/mf && \
		ln -s $(abs-srcdir)/ps && \
		ln -s ../../python/out python && \
		ln -s $(abs-srcdir)/scm
	@cd $(builddir)/share/lilypond/tex && \
		ln -s $(abs-srcdir)/tex source && \
		ln -s ../../../mf/$(outconfbase) generate
	@cd $(builddir)/share/lilypond/fonts && \
		ln -s $(abs-srcdir)/mf source && \
		ln -s ../../../mf/$(outconfbase) afm && \
		ln -s ../../../mf/$(outconfbase) tfm && \
		ln -s ../../../mf/$(outconfbase) type1

local-clean: builddir-setup-clean
builddir-setup-clean:
	@cd $(builddir) && rm -rf share

$(config_h): configure.in aclocal.m4
#
# this is to prevent people from getting
# undefined symbols  when we add them to config.h.in,
# and they blindly run "cvs update; make".
#
	@echo
	@echo ' *** config.h is out of date'
	@echo ' *** Remove it and rerun autogen:'
	@echo '         rm config.h; ./autogen.sh'
	@echo
	@false
