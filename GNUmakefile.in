# -*-Makefile-*-

depth = .

SUBDIRS = buildscripts python scripts \
	flower lily \
	mf ly \
	tex ps scm \
	po make \
	elisp vim \
	input \
	cygwin stepmake

ifneq ($(strip $(DOCUMENTATION)),no)
SUBDIRS += Documentation
endif

SCRIPTS = configure aclocal.m4 autogen.sh lexer-gcc-3.1.sh Doxyfile
README_FILES = ChangeLog COPYING DEDICATION ROADMAP THANKS HACKING
README_TXT_FILES = AUTHORS.txt README.txt INSTALL.txt NEWS.txt
IN_FILES := $(call src-wildcard,*.in)
PATCH_FILES = emacsclient.patch server.el.patch darwin.patch
EXTRA_DIST_FILES = VERSION .cvsignore SConstruct \
  $(README_FILES) $(SCRIPTS) $(IN_FILES) $(PATCH_FILES)
NON_ESSENTIAL_DIST_FILES = $(README_TXT_FILES)
INSTALLATION_DIR=$(local_lilypond_datadir)
INSTALLATION_FILES=$(config_make) VERSION

# bootstrap stepmake:
#
STEPMAKE_TEMPLATES=toplevel po install
include $(depth)/make/stepmake.make 

doc: 
	$(MAKE) -C Documentation

install-WWW:
	-$(INSTALL) -m 755 -d $(DESTDIR)$(webdir)
	cp -a $(outdir)/web-root/ $(DESTDIR)$(webdir)/

	$(MAKE) -C Documentation/user local-install-WWW
	$(MAKE) -C Documentation/user install-info

web-install:
	$(MAKE) out=www install-WWW

uninstall-WWW:
	#TODO

web-uninstall:
	$(MAKE) out=www uninstall-WWW=

local-install:
	$(INSTALL) -d $(DESTDIR)$(local_lilypond_datadir)

final-install:
	@true

web-ext = html midi pdf png txt ly

footify = $(PYTHON) $(step-bindir)/add-html-footer.py  --name $(PACKAGE_NAME) --version $(TOPLEVEL_VERSION)
footifymail = MAILADDRESS=bug-lilypond@gnu.org

local-WWW-post:
# need UTF8 setting in case this is hosted on a website. 
	echo -e 'AddDefaultCharset utf-8\nAddCharset utf-8 .html\nAddCharset utf-8 .en\nAddCharset utf-8 .nl\nAddCharset utf-8 .txt\n' > $(top-build-dir)/.htaccess
	$(PYTHON) $(buildscript-dir)/mutopia-index.py -o $(outdir)/examples.html input/
	echo '<META HTTP-EQUIV="refresh" content="0;URL=Documentation/index.html">' > $(outdir)/index.html
	echo '<html><body>Redirecting to the documentation index...</body></html>' >> $(outdir)/index.html

	cd $(top-build-dir) && $(FIND) . -name '*.html' -print | $(footifymail) xargs $(footify)
	cd $(top-build-dir) && find . -name \*.html~ -print | xargs rm -f
	cd $(top-build-dir) && find Documentation input \
		$(web-ext:%=-path '*/out-www/*.%' -or) -type l \
		> $(outdir)/weblist
	ls $(outdir)/*.html >> $(outdir)/weblist

## rewrite file names so we lose out-www
	rm -rf $(outdir)/web-root/
	mkdir $(outdir)/web-root/
	cat $(outdir)/weblist | (cd $(top-build-dir); tar -cf-  -T- ) | \
		tar -C $(outdir)/web-root/ -xf -  
	cd $(outdir)/web-root/ &&  \
		for a in `find . -name out-www`; do \
			mv $$a/* $$a/.. ; \
			rmdir $$a ; \
		done

tree-prefix = $(outdir)
tree-bin = $(tree-prefix)/bin
tree-lib = $(tree-prefix)/lib
tree-share = $(tree-prefix)/share
tree-share-prefix = $(tree-share)/lilypond/$(TOPLEVEL_VERSION)
tree-lib-prefix = $(tree-lib)/lilypond/$(TOPLEVEL_VERSION)

src-ext = c cc yy ll hh icc py scm tex ps texi itexi tely itely sh

web-clean:
	$(MAKE) out=www clean
	$(MAKE) $(tree-share-prefix)/lilypond-force

default: $(config_h) build-dir-setup 

build-dir-setup: $(tree-share-prefix)/lilypond-force

PO_FILES = $(call src-wildcard,$(src-depth)/po/*.po)
HELP_CATALOGS = $(PO_FILES:$(src-depth)/po/%.po=%)
CATALOGS = $(HELP_CATALOGS:lilypond=) 

$(tree-share-prefix)/lilypond-force link-tree: GNUmakefile
# Preparing LilyPond tree for build-dir exec
	cd $(top-build-dir)/$(outbase) && rm -rf bin lib share
	mkdir -p $(tree-bin)
	mkdir -p $(tree-share-prefix)
	mkdir -p $(tree-lib-prefix)
	(cd $(tree-lib)/lilypond/ && ln -sf $(TOPLEVEL_VERSION) current)
	(cd $(tree-share)/lilypond/ && ln -sf $(TOPLEVEL_VERSION) current)
	mkdir -p $(tree-share-prefix)/dvips
	mkdir -p $(tree-share-prefix)/elisp
	mkdir -p $(tree-share-prefix)/fonts
	mkdir -p $(tree-share-prefix)/fonts/otf
	mkdir -p $(tree-share-prefix)/fonts/tfm
	mkdir -p $(tree-share-prefix)/fonts/type1
	mkdir -p $(tree-share-prefix)/fonts/svg
	mkdir -p $(tree-share-prefix)/fonts/map
	mkdir -p $(tree-share-prefix)/fonts/enc
	mkdir -p $(tree-share-prefix)/tex
	cd $(tree-bin) && \
		ln -sf ../../lily/$(outconfbase)/lilypond . && \
		ln -sf ../../scripts/$(outconfbase)/convert-ly . && \
		ln -sf ../../scripts/$(outconfbase)/lilypond-book . && \
		ln -sf ../../scripts/$(outconfbase)/*.ly .
	cd $(tree-lib-prefix) && \
		ln -s ../../../../python/$(outconfbase) python
	cd $(tree-share-prefix) && \
		ln -s $(top-src-dir)/ly ly && \
		ln -s ../../../../mf mf && \
		ln -s $(top-src-dir)/ps && \
		ln -s ../../../../python/$(outconfbase) python && \
		ln -s $(top-src-dir)/scm && \
		ln -s $(top-src-dir)/scripts scripts
	cd $(tree-share-prefix)/dvips && \
		ln -s ./../../../mf/$(outconfbase) mf-out && \
		ln -s $(top-src-dir)/ps
	cd $(tree-share-prefix)/tex && \
		ln -s $(top-src-dir)/tex source && \
		ln -s ../../../../../tex/$(outconfbase) tex-out && \
		ln -s ../../../../../mf/$(outconfbase) mf-out

	cd $(tree-share-prefix)/fonts && \
		ln -s $(top-src-dir)/mf source && \
		true
	-cd $(tree-share-prefix)/elisp && \
		ln -sf ../../../../../../elisp/$(outconfbase)/lilypond-words.el . && \
		ln -s $(top-src-dir)/elisp/*.el .
	$(foreach i,$(CATALOGS), \
		(mkdir -p $(tree-share)/locale/$i/LC_MESSAGES && \
		cd $(tree-share)/locale/$i/LC_MESSAGES && \
		ln -sf ../../../../../po/$(outconfbase)/$i.mo lilypond.mo) &&) true
	touch $(tree-share-prefix)/lilypond-force

$(tree-share-prefix)/mf-link-tree link-mf-tree:
	-rm -f $(tree-share-prefix)/fonts/{otf,svg,tfm,type1}/* &&  \
		cd $(tree-share-prefix)/fonts/otf && \
		ln -s ../../../../../../mf/$(outconfbase)/*.otf .
	-cd $(tree-share-prefix)/fonts/svg && \
		ln -s ../../../../../../mf/$(outconfbase)/*.svg .
	-cd $(tree-share-prefix)/fonts/tfm && \
		ln -s ../../../../../../mf/$(outconfbase)/*.tfm .
	-cd $(tree-share-prefix)/fonts/type1 && \
		ln -s ../../../../../../mf/$(outconfbase)/*.pfa .


local-clean: build-dir-setup-clean
build-dir-setup-clean:
	cd $(top-build-dir) && rm -rf share

$(config_h): config.hh.in
#
# this is to prevent people from getting
# undefined symbols  when we add them to config.h.in,
# and they blindly run "cvs update; make".
#
	@echo
	@echo ' *** $(config_h) is out of date'
	@echo ' *** Remove it and rerun autogen:'
	@echo '         rm $(config_h); ./autogen.sh'
	@echo
	@false
