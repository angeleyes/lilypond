# -*-Makefile-*-
# title	   specific top level makefile for LilyPond  

# subdir level:
#
depth = .
#

# descent order into subdirectories
# 
SUBDIRS = buildscripts python scripts \
	elisp \
	flower kpath-guile ttftool lily \
	mf ly tex ps scm \
	po make \
	cygwin debian stepmake \
	Documentation input \
	vim 
#

include VERSION
package=`echo $PACKAGE_NAME | tr '[A-Z]' '[a-z]'`

SCRIPTS = configure aclocal.m4 autogen.sh lexer-gcc-3.1.sh
README_FILES = ChangeLog  COPYING DEDICATION ROADMAP THANKS 
README_TXT_FILES = AUTHORS.txt README.txt INSTALL.txt NEWS.txt
IN_FILES := $(wildcard *.in)
PATCH_FILES = emacsclient.patch server.el.patch darwin.patch
EXTRA_DIST_FILES = VERSION .cvsignore SConstruct \
  $(README_FILES) $(SCRIPTS) $(IN_FILES) $(PATCH_FILES)
NON_ESSENTIAL_DIST_FILES = $(README_TXT_FILES)
INSTALLATION_DIR=$(local_lilypond_datadir)
INSTALLATION_FILES=$(config_make) VERSION

# bootstrap stepmake:
#
STEPMAKE_TEMPLATES=toplevel po install
include $(depth)/make/stepmake.make 

doc: 
	$(MAKE) -C Documentation

install-WWW:
	-$(INSTALL) -m 755 -d $(DESTDIR)$(webdir) 
	tar -C $(webdir)/ -xzf $(outdir)/web.tar.gz
# install-WWW does not recurse; fake it visiting Documentation/user manually
	$(MAKE) -C Documentation/user local-install-WWW
	$(MAKE) -C Documentation/user install-info

web-install:
	$(MAKE) out=www install-WWW

uninstall-WWW:
	#TODO

web-uninstall:
	$(MAKE) out=www uninstall-WWW=

local-install:
	$(INSTALL) -d $(DESTDIR)$(local_lilypond_datadir)

final-install:
	@echo '*** Before using LilyPond, the contents of one of the login scripts'
	@echo '*** buildscripts/out/lilypond-{profile,login} should be sourced.'
	@echo '*** LilyPond should have been installed to do that automatically'
	@echo '*** when you log in.  So, please log out now and log in again.'
	@echo '*** For more information see Invoking LilyPond in the manual.'

web-ext = html midi pdf png txt ly

footify = $(PYTHON) $(step-bindir)/add-html-footer.py  --name $(PACKAGE_NAME) --version $(TOPLEVEL_VERSION)
footifymail = MAILADDRESS=bug-lilypond@gnu.org

local-WWW-post:
	$(PYTHON) $(buildscript-dir)/mutopia-index.py -o $(builddir)/examples.html ./
	cd $(builddir) && $(FIND) . -name '*.html' -print | $(footifymail) xargs $(footify)
	cd $(builddir) && find . -name \*.html~ -print | xargs rm -f
	cd $(builddir) && find Documentation input \
		$(web-ext:%=-path '*/out-www/*.%' -or) -false \
		> $(outdir)/weblist
	echo '<META HTTP-EQUIV="refresh" content="0;URL=Documentation/out-www/index.html">' > $(builddir)/index.html
	echo '<html><body>Redirecting to the documentation index...</body></html>' >> $(builddir)/index.html
	cd $(builddir) && ls *.html >> $(outdir)/weblist
	cat $(outdir)/weblist | (cd $(builddir); GZIP=-9v tar -czf $(outdir)/web.tar.gz  -T -)


src-ext = c cc yy ll hh icc py scm tex ps texi itexi tely itely sh

web-clean:
	$(MAKE) out=www clean
	$(MAKE) $(builddir)/share/lilypond-force

default: $(config_h) builddir-setup 

builddir-setup: $(builddir)/share/lilypond-force

PO_FILES = $(wildcard $(srcdir)/po/*.po)
HELP_CATALOGS = $(PO_FILES:$(srcdir)/po/%.po=%)
CATALOGS = $(HELP_CATALOGS:lilypond=) 

$(builddir)/share/lilypond-force:
# Preparing LilyPond tree for builddir exec
	cd $(builddir) && rm -rf lib share
	mkdir -p $(builddir)/lib/$(package)
	mkdir -p $(builddir)/share/$(package)
	mkdir -p $(builddir)/share/$(package)/dvips
	mkdir -p $(builddir)/share/$(package)/elisp
	mkdir -p $(builddir)/share/$(package)/fonts
	mkdir -p $(builddir)/share/$(package)/tex
	cd $(builddir)/lib/$(package) && \
		ln -s  ../../python/$(outconfbase) python
	cd $(builddir)/share/$(package) && \
		ln -s $(abs-srcdir)/ly ly && \
		ln -s ../../mf/$(outconfbase) otf && \
		ln -s ../../mf/$(outconfbase) svg && \
		ln -s ../../mf/$(outconfbase) tfm && \
		ln -s $(abs-srcdir)/mf && \
		ln -s $(abs-srcdir)/ps && \
		ln -s ../../python/$(outconfbase) python && \
		ln -s $(abs-srcdir)/scm
	cd $(builddir)/share/$(package)/dvips && \
		ln -s ./../mf/$(outconfbase) mf-out && \
		ln -s $(abs-srcdir)/ps
	cd $(builddir)/share/$(package)/tex && \
		ln -s $(abs-srcdir)/tex source && \
		ln -s ../../../tex/$(outconfbase) tex-out && \
		ln -s ../../../mf/$(outconfbase) mf-out
	cd $(builddir)/share/$(package)/fonts && \
		ln -s $(abs-srcdir)/mf source && \
		ln -s ../../../tex/$(outconfbase) enc && \
		ln -s ../../../mf/$(outconfbase) map && \
		ln -s ../../../mf/$(outconfbase) otf && \
		ln -s ../../../mf/$(outconfbase) tfm && \
		ln -s ../../../mf/$(outconfbase) svg && \
		ln -s ../../../mf/$(outconfbase) type1
	cd $(builddir)/share/$(package)/elisp && \
		ln -sf ../../../elisp/$(outconfbase)/lilypond-words.el . && \
		ln -s $(abs-srcdir)/elisp/*.el .
	$(foreach i,$(CATALOGS), \
		mkdir -p $(builddir)/share/locale/$i/LC_MESSAGES && \
		cd $(builddir)/share/locale/$i/LC_MESSAGES && \
		ln -fs ../../../../po/$(outconfbase)/$i.mo lilypond.mo &&) true
	touch $@

local-clean: builddir-setup-clean
builddir-setup-clean:
	cd $(builddir) && rm -rf share

$(config_h): config.hh.in 
#
# this is to prevent people from getting
# undefined symbols  when we add them to config.h.in,
# and they blindly run "cvs update; make".
#
	@echo
	@echo ' *** $(config_h) is out of date'
	@echo ' *** Remove it and rerun autogen:'
	@echo '         rm $(config_h); ./autogen.sh'
	@echo
	@false


