Features you cannot find in the doco as working, should be mentioned here.
	
This is an assorted collection of stuff that will be done, might be
done, or is an idea that I want to think about

Most of the items are marked in the code as well, with full explanation. 
grep for TODO and ugh/ugr

0.2:
	* add a screenshot to the website.

	* fix stdin input

	* LILYSOURCEDIR
	
	* documentation

	* spurious "Junk beam" warnings

	* standchen: warning: Excentric column (Meter dims?)

	* naming Mozarella, Madeira, Muella?

	* versioning for Feta

	* bf: abbrevs over whole note

STUFF

	* give Items/Spanners access to unbroken originals	

	* scoping for properties

	{	c4
		\multi 2  < { \stemup .. } { \stemdown .. } >
		c2 
	}

	this modifies \stem for the c2

	* use properties for:
	- Text_style
	- default_octave
	- plet?
	- default_duration?
	- default abbreviation
	- Staff_sym size
	- default tempo.
	- font size
	- bartypes (get rid of derived Span_bar_engravers)
	- cadenza mode? 
	- MIDI instrument
	- staff title

	* optimal pagebreaking.

	* put errorlevel in Input class

	* AFM for font input?

3RD PARTY BUGS:

	* Rational infty(HUGE_VAL) on glibc / w32

	* Fix profiling. gprof bugreport?

PROJECTS

	* Unicode support?
	- 16 bit Strings
	- -u switch
		- detect of 16/8 bit files
	- examples to go with it.

	* Spring_spacer:
	- write a faster Spring_spacer (without matrices if possible)
	- use straight QP to find minimal "fitting force"
	- relate energybound to linelen unitspace fontsize etc.
	- used fixed point fp

	* \header
	- write perl script for handling it into databases
	- write TeX macros to generate titles
	- adapt make-website to use \header info.

	* Makefile stuff:
	- Use Automake
	- shared lib on Solaris too.
	- check libtool
	- generate stuff in out/default, out/sun5-irix etc iso out/ 
	and out-sun5/

	* Add mudela-output to Rosegarden.

	* a musical dictionary. See Documentation/vocabulary-*, other
languages:
	- italian
	- german
	- dutch
	- swedish
	 .. ?

	* chords
	- guitar chords
	- chord names
	- basso continuo
	- Syntax/parser
	- MIDI output?
	- typesetting

	* integrate midi-elts from mi2mu and lily?

	* Debug logs:
	- derive lily_stream, Dstream, texstream from ostream?
	- indentable stream as baseclass for TeX stream, lily stream, Dstream.
	- use dstream feature in mi2mu
	- integrate IO checking into stream class

	* input converters
	- NIFF?
	- ABC? 
	- SMDL?

	* add to MIDI output:
	- tempo change
	- repeat
	- slurs
	- dynamics etc.

	* grace notes
	- make separate class for Grace_*_engravers 
	(which is at Voice_gravs level)
	- make encapsulated spacing problems.

	* On-demand loading of simple-engravers?

	* accidentals per Voice_group

	* Convert all ref/bib stuff into BibTeX.

	* Output class, handles : (smallish)
	- help text /(c) notice?
	- version line
	- warning /errors/progress
	- abort on error/warning; exit status
	- quiet/ignore-version options
	- logfile output

	* piano staff

	* elaborate Staff_side baseclass:
	- scripts
	- text
	- slur start/end

	* Output an output format independent (ofi) typeset file; and 
	  make ofi2 TeX, MusixTex, Display PostScript, PostScript,
	  Ascii... interpreters. (difficult)

	- poor man's ascii output possible?
	- MusixTeX output possible? (would have to be done before break calc.)
	- NIFF ?
	- Common Music Notation
	- PostScript output (esp. Beams, Slurs, etc)
	- Move all Score_elems, into libmutype.a
 
	* Documentation
	- Doc Mutopia (Music To The People) 
	- Doc (C) stuff of sheet music
	- a tutorial

	* TeX spanners , use texbeam.cc as an example (smallish)
	- Glissando
	- trill
	- bracket

	* Rewrite Stem, Beam and Rhythmic_grouping (hairy)
	- [c8. c32 c32]
 	- doc on Rhythmic_grouping
	- general shaving on Beam and Stem
	- use plet grouping
	- separate visual from rhythmic info even more
	- beams over bars

	* Redo fonts
	- adapt for multiple font sizes.

	* lines:
	- Ledger lines, should be separate item: Ledger_lines, Ledger_lines
	- set different line sizes / thicknesses
	- beam stem showthrough, inter beam sizes (french vs german style)

	* Collisions
	- left/right note balls should be handled by Collision:
	< \multi 2; { \stem 1; <b c> } { <f as b> } >

	* Keys:
	- merge key{item} & localkey{item}?
	- do conventional keys (C G A, F B E, a e fis, d as des, etc ), 
	  besides lists of flats/sharps, possibly via declaration
	- key transposition. 
	- key undo: \key bes; .. . \key; should print natural	
	- special key: \key bes 'b bis';
	- spacing, national styles?

	* Support for TAB
	- redo Notehead to allow digits as heads
	- add a \tablature {} lexer mode for easy entering

	* should adjust stemlength for flag number.

	* breaking:
	- caching breakpoints
	- saving them
	- allowing users to set them.
	- penalties
	- specify number of lines
	- set linelength per line

	* Rhythmic staff.

	* Baroque superstaff

SEVERELY LACKING:

	* SPEED!

	* multibar rests

	* markers


INPUTLANGUAGE

	* c4 4 4 4 for c4 c4 c4 c4?

	* neatly (and readably) expressing concurrent
	voices

	* <c f a>4 ?

	* Viola mode?

		@c c g e g 
	for
		c g es g, 

		@A c g e g
	for
		cis gis e gis

	* relative mode for pitch entering

	* bracket (bracketplets)

	* configure pitch_byte

	* rest name configurable

	* Raw request syntax

SMALLISH PROJECTS

	* progress when creating MIDI elts.

	* A range for context errors (eg. mark both { and }. )

	* lyric in staff  (sharpsharp in staff, text below)

	* write Dynamic_line (to group dynamics horizontally)

	* use Real for all y positions.
	- use translate_axis( .. ,Y_AXIS) 

	* half-sharps, half-flats

	* adaptive accidental spacing.

	* unix style paths for LILYINCLUDE env

	* handle EOF graciously in error messages.

	* caching Item/spanner dimensions.

	* centered whole rest

        * qtor, btor, mtor-> tor( QUIET_ver ), tor( DEBUG_ver ), etc.
	- use tors feature in lily (?)

	* declare notenametab?

	* midi esp.: use I32 iso int where 32 bits are needed (or assumed...)

	* parshape

	* Flower types:
	- A decent scalar type
	- String hash
	- Pointer hash

	* binsearch/hash for identifiers

	* stafftypes: voice names/ instrument names.

	* TeX stuff:	
	- Decent TeX titledefs (\tempo, \metron, etc. )
	- decent TeX page layout

	* lily \tempo

	* C meter iso 4/4, idem for alla breve, etc.

	* textspanner: center position

	* Brackets
	
	* Scripts:
	- stack scripts in chords:
	  % fingering:        footing:
	    < a-4 c-2 g-1 >   < c-\ltoe e-\lheel >
	- script-spacing
	- slur parts as a script
	- stack parameterised scripts for fingering and footing:

            % toe to bheel   four to five
	    %   ^_u            4_5  
	    %     -                           
	    %  --|x--         --|x--
	    %  --|---         --|---
	    %  --|---         --|---
          (where "to" is a tiny bow)

	* auxilliary file for caching info.

	* Text_crescendo

	* clean solution for staffsize in items.

	* revise calcideal

	* volta

IDEAS

	* Output abstract data structures associated with
Mudela.

	* create libmudela, or liblily_frontend

	* move MIDI stuff (including Quantization) to a ANSI C libmidi library.

	* use an embedded language: Python, Scheme
	for: 
		- Score_elems
		- Engraver
		- Translators
		- Complex mudela?

	* y -dims in internote? Staff-space? X-dimensions?

	* Spacing_request for manually adjusting spacing

	* caching breakpoints

	* #c <-> cis

	* breath marks 

	* used fixedpoint arithmetic for min. energy.

	* move towards incremental algorithms.

	* far fetched language ideas
	- design meta-language like TeX and Metafont
	- programming/macros input

	* Global type registration.

		My_class * p = create_object( My_class )
		Type t = get_type ( *p );
		if ( t <= get_type( q ))
			..

	* naming of Voice_group/Voice

	* benchmark band_matrices.

	* versioning stuff (cvt mudela, mudela, etc.)

	* a real convert-mudela

	* dots into separate item.

	* use String iso Text_def for lyrics.

	* use position 0 for center of staff iso bottom.

	* Klavarskribo?

	* lyrics in chords still fuck up.

	- rewire acknowledge_element() logic with a process_acknowledged()

	* pushgroup/popgroup


	* multi threading?
	  - 1 thread per element/ 1 thread per line
	  - 1 thread per Translator

	* Use hooks/dependency graphs for properties
