before 0.1
	
	* remove spurious/outdated comments in .ly, debug .ly

	* pushgroup, popgroup.

	* basic dynamics

	* decent TeX page layout

	* per-pstaff item-widths
	
	* remove unnecessary or confusing constructs from .ly

This is an assorted collection of stuff that will be done, might be
done, or is an idea that I want to think about

PARSER
	* Duration-> Musical_duration, typedef Rational Duration?

MAKE-STUFF

	* flower config: separate optiflags.

	* sort out headers, see m2m

	* do platform stuff: configure, header(s), targets, build (out?)
	
BUGS

	* key at clef change.

	* key undo

	* key at broken :||:

	* [c8. c32 c32]

	* cis ( | ) cis

	* parser error handling (can you say Segfault?)

SEVERELY LACKING:

	* hairpins

	* grace notes

FURTHER FOR ORCHESTRAL SCORE:

	* multibar rests

	* barnumbers, markers

	* abbreviations c4=16

INPUTLANGUAGE

	* read ENV for include /init path 

	* configure pitch_byte

	* special key.

	* figured bass?

	* transposition

	* rest name configurable

	* uniformate: \clef\violin, \clef"violin", \geometric 1.4, 
	  \meter{ 2/4 }, etc.

SMALLISH PROJECTS

	* key transposition
	
	* caching breakpoints / saving them. 

	* key { C } 
	
	* use dstream feature in mi2mu

        * qtor, btor, mtor-> tor( QUIET_ver ), tor( DEBUG_ver ), etc.

	* use tors feature in lily

	* do conventional keys (C G A, F B E, a e fis, d as des, etc ), 
	  besides lists of flats/sharps

	* midi esp.: use I32 iso int where 32 bits are needed (or assumed...)

	* fix Staff_elem::width() derivs to use offset_

	* parshape

	* read from mmap directly: bugreport to flex developers->
	yy_scan_buffer in C++..

	* binsearch/hash for identifiers

	* stafftypes: voice names/ instrument names.

	* Lookup::tex_glissando, Lookup::tex_bracket,  (use texbeam.cc as an
	example.)

	* Decent TeX titledefs (\tempo, \metron, etc. )

	* command priority into enum
	
	* C meter iso 4/4

	* textspanner: center position

	* script-spacing

	* Brackets

	* caching of Register_group_register hierarchies.


	* use (char *) iso. String for communication between lexer and
	parser.

	* configure idealspacing: arithmetic

	* collision Request_register.

	* add (good guess of) width to lyric items

	* midi output: eat-up dynamic, key/meter/tempo changes, and write them neatly

	* LilyPond .deb

DOC

	* beam generation.

	* all errors

	* a decent webpage

	* a test suite

FUTURE

	* slur parts as a script
	
	* multiple scripst.

	* mixed  fontsizes

	* put scripts on bars

	* glissando

	* guitar chord

	* better beamslope calculation:	QLP for beams?

	* implement better breaking algorithm

	* Text_crescendo

	* clean solution for staffsize in items.

	* merge key{item} & localkey{item}?

	* revise calcideal

	* eentje/tweetje

	* piano staff

IDEAS

	* integrate Register/Midi stuff

	* create libmudela, or liblily_frontend

	* Horizontal_align_item, Vertical_align_item.

	* move MIDI io to a ANSI C libmidi library.

	* itemcolumns: Use dummy items.

	* use an embedded language: scheme, lisp, S-lang, Perl, GUILE, ?

	* y -dims in internote?

	* hack up mf sources for decent spacing info (and then maybe
	read TFM directly)

	* merge Atom and Symbol?

	* merge common code of Item, Atom/Molecule

	* Spacing_request for manually adjusting spacing

	* Staff_group, Score_request_register.

	* SHIT: meters/bars should be aligned, which is difficult if
	we get different keychanges in different staffs.

	* Integrating (objectiveC) MusicKit with LilyPond
	
	* MusixTeX output possible?

	* PostScript output (esp. Beams, Slurs, etc)

	* caching breakpoints

	* use exceptions iso assert?
