Features you cannot find in the doco as working, should be mentioned her.

This is an assorted collection of stuff that will be done, might be
done, or is an idea that I want to think about

Most of the items are marked in the code as well, with full explanation. 
grep for TODO and ugh/ugr


IMPORTANT
	* add mi2mu example output (.midi.ly and .gif) to website

	* piano staff

	* decent spacing
	
	* implement better breaking algorithm

	* update 20 pt table
	
	* use Hungarian throughout code

	* decent TeX page layout

	* per-pstaff item-widths [JCN]

	* script priority

	* a Hands on tutorial [HKN]

PROJECTS
	* Output class, handles : (smallish)
	- help text /(c) notice?
	- version line
	- warning /errors/progress
	- abort on error/warning; exit status
	- quiet/ignore-version options
	- logfile output

	* elaborate Staff_side baseclass:
	- scripts
	- text
	- slur start/end

	* Output an output format independent (ofi) typeset file; and 
	  make ofi2 TeX, MusixTex, PostScript, Ascii... interpreters. (difficult)
	- poor man's ascii output possible?
	- MusixTeX output possible? (would have to be done before break calc.)
	- NIFF ?
	- PostScript output (esp. Beams, Slurs, etc)
	- Move PScore, Items, Spanners etc. into libmutype.a


	* separate Score_elem settings in user-settable (properties
	.. ) and non-user-settable part.

	* TeX spanners , use texbeam.cc as an example (smallish)
	- Glissando
	- trill
	- bracket

	* Rewrite Beam and Rhythmic_grouping (hairy)
	- [c8. c32 c32]
 	- interbeam height
	- doc on Rhythmic_grouping
	- general shaving
	- use plet grouping
	- abbreviations [c2 c2]1/2
	- separate visual from rhythmic info even more
	- beams over bars

	* Redo MIDI output to use Registers: (Difficult)
	- remember more horizontal info than melodics:
	- tempo change
	- repeat
	- slurs
	- dynamics etc.


	* Redo font support 
	- use GSharp fonts?
	- rename mf fonts to avoid conflicts with musixtex
	- check (c) issues
	- use own fonts/update musixtex fonts/find older (c)-less fonts
	- hack up mf sources for decent spacing info (and then 
	read AFM/TFM directly, for text too)


	* lines:
	- Ledger lines, should be separate item: Ledger_lines, Ledger_lines_reg
	- set different line sizes / thicknesses
	- stem down too far right
	- beam stem showthrough, inter beam sizes (french vs german style)

	* Collisions
	- bring Collision::do_pre_processing to haircutter
	- left/right note balls should be handled by Collision:
	< \multivoice { \stem 1; <b c> } { <f as b> } >

	* Keys:
	- merge key{item} & localkey{item}?
	- do conventional keys (C G A, F B E, a e fis, d as des, etc ), 
	  besides lists of flats/sharps, possibly via declaration
	- key transposition. 
	- key undo: \key bes; .. . \key; should print natural	
	- special key: \key 'b bes bis';
	- spacing, national styles?

PARSER
	* Duration -> Musical_duration, typedef Rational Duration?

**********************
HKN buglist:

noten staan vaak te dicht aan de rechterkant van de maatstreep.

tekst staat erg ver van notenbalken af

waarom geen ; achter dingen in \paper? (\textwidth 180\mm)
(sowieso: wanneer wel en geen ; ?)

Onduidelijk wanneer wel en geen \ voor een woord. Maak liever
verplichte regels

****************

BUGS
	* spurious Weird stem size warnings

	* staccato dot positions.

	* stacked scripts.

	* lilypond - -> crash

	* chlapik balk ruimte 

	* standchen triool beam up/down

SEVERELY LACKING:

	* SPEED!

	* grace notes


FURTHER FOR ORCHESTRAL SCORE:

	* multibar rests

	* barnumbers, markers

	* abbreviations c4=16

	* doublebar "||", finishbar "|||" (or "||." ?)

INPUTLANGUAGE

	* should have \require{package.ly} to read req'd packages.

	* relative mode for pitch entering

	* bracket (bracketplets)

	* \duration 8; e*2/3

	* configure pitch_byte

	* figured bass?

	* rest name configurable

	* Raw request syntax

	* subtime with Subtle_reqs

PROJECTS

	* Do RTTI i.s.o. static_name(), name() and request-junk.

	* add remove() methods to all items/spanners.

SMALLISH PROJECTS

	* handle do_substitute_dependency in more derived classes.

	* replace member access by get()/set() methods, to enable
	future embedded code.

	* --fast/--draft: leave out constraints

	* write Dynamic_line (to group dynamics horizontally)

	* write Rest_collision

	* use Real for y positions.

	* shared lib on Solaris too.

	* bugreport to doc++ devel: struct not in class hier; public
	virtual baseclasses

	* cleanup lily-proto.hh and proto.hh

	* half-sharps, half-flats

	* adaptive accidental spacing.

	* Score_elem invible_b_ flag
	
	* unix style paths for LILYINCLUDE env

	* indentable stream as baseclass for TeX stream, lily stream, Dstream.

	* handle EOF graciously in error messages.

	* caching Item/spanner dimensions.

	* centered whole rest

	* caching breakpoints / saving them. 

	* use dstream feature in mi2mu

        * qtor, btor, mtor-> tor( QUIET_ver ), tor( DEBUG_ver ), etc.
	- use tors feature in lily (?)

	* declare symtab

	* declare notenametab?

	* midi esp.: use I32 iso int where 32 bits are needed (or assumed...)

	* parshape

	* read from mmap directly: bugreport to flex developers->
	yy_scan_buffer in C++..

	* binsearch/hash for identifiers

	* stafftypes: voice names/ instrument names.

	* Decent TeX titledefs (\tempo, \metron, etc. )

	* C meter iso 4/4, idem for alla breve, etc.

	* textspanner: center position

	* script-spacing

	* Brackets

	* caching of Register_group_register hierarchies.

	* use (char *) iso. String for communication between lexer and
	parser.

	* configure idealspacing: arithmetic spacing

	* LilyPond .deb. Other packaging methods?

	* detect -pipe


DOC
	* Score_elem structure.

	* all errors
	
	* config of TeX macros

	* a test suite

	* hacking-HOWTO

FUTURE

	* auxilliary file for caching info.

	* Reg_configure_request

	* slur parts as a script
	
	* mixed fontsizes

	* put scripts on bars

	* guitar chord

	* Junk Staff_column, and find the requests while walking the Voices.?

	* better beamslope calculation:	QLP for beams?

	* Text_crescendo

	* clean solution for staffsize in items.

	* revise calcideal

	* volta

	* piano staff

	* vertical spanner

IDEAS
	* derive PCol from Score_elem?

	* scoping in Lexer: do general id- assignments in mudela.

	ID '=' EXPR;

	* create libmudela, or liblily_frontend

	* move MIDI stuff (including Quantization) to a ANSI C libmidi library.

	* use an embedded language: Python
	for: 
		- Score_elems
		- Registers
		- Complex mudela?

	* y -dims in internote?

	* merge Atom and Symbol?

	* merge common code of Item, Atom/Molecule

	* Spacing_request for manually adjusting spacing

	* Staff_group, Score_request_register.

	* Meters/bars should be aligned, which is difficult if
	we get different keychanges in different staffs.

	* Horizontal_align item for meter,bar etc.

	* caching breakpoints

	* #c <-> cis

	* breath marks 

	* used fixedpoint arithmetic for min. energy.

	* default convert mudela-file.ly -> mudela-file.tex
	  - rename {standchen,scsii-menuetto,...}.tex

	* (related with above) --simple-mudela option for lily,
	  to lily input files with one-voice simple mudela 
	  (no red tape)

	* stack scripts in chords:
	  % fingering:        footing:
	    < a-4 c-2 g-1 >   < c-\ltoe e-\lheel >

	* parameterised scripts for fingering and footing:

            % toe to bheel   four to five
	    %   ^_u            4_5  
	    %     -                           
	    %  --|x--         --|x--
	    %  --|---         --|---
	    %  --|---         --|---
          (where "to" is a tiny bow)

	* move towards incremental algorithms.
