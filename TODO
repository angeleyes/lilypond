Features you cannot find in the doco as working, should be mentioned here.
	
This is an assorted collection of stuff that will be done, might be
done, or is an idea that I want to think about

Most of the items are marked in the code as well, with full explanation. 
grep for TODO and ugh/ugr

	* Generate TeX titles from MudelaHeader

	* integrate midi-elts from mi2mu and lily

	* virtualise PCols to make encapsulated spacing problems
 
	* Doc Mutopia (Music To The People) 

	* context in spring-spacer.

	* don't count bars which are not on first beat.

	* generate stuff in out/default, out/sun5-irix etc iso out/ 
	and out-sun5/

	* derive lily_stream, Dstream, texstream from ostream?

	* check libtool, automake

	* have make dist produce tarball in out/ directory.

	* write a faster Spring_spacer ( without matrices if possible )

	* A decent scalar type

	* relate energybound to linelen unitspace fontsize etc.

	* naming of Voice_group/Voice

	* benchmark band_matrices.

	* versioning stuff (cvt mudela, mudela, etc.)

	* get rid of gif files.

	* dots into separate item.

	* use String iso Text_def for lyrics.

	* use position 0 for center of staff iso bottom.

	* Klavarskribo?

	* return status on exit

	* lyrics in chords still fuck up.

	* rewire acknowledge_element() logic with a process_acknowledged()
	
	* Global type registration.

		My_class * p = create_object( My_class )
		Type t = get_type ( *p );
		if ( t <= get_type( q ))
			..

	* progress when creating MIDI elts.

	* pushgroup/popgroup

	* whole head on ledger line

	* piano staff

	* update 20 pt table

	* decent TeX page layout

	* a tutorial

3RD PARTY BUGS:

	* ICE: spring-spacer::calcideal()

	* collision.cc: 138, g++ errors

	* bugreport to doc++ devel: struct not in class hier; public
	virtual baseclasses

	* DOC++ bugs/newer version?

	* Rational infty(HUGE_VAL) on glibc / w32

	* Fix profiling. gprof bugreport?

	* read from mmap directly: bugreport to flex developers->
	yy_scan_buffer in C++..

	* (where are the) gcc compile warnings on linux

LILY BUGS

	\score { < 
		\melodic { \id "Staff" ""; c'4 g'4 }
		\lyric {   \id "Lyric" ""; hello4 bye4 < a chord > }
		\lyric {   \id "Lyric" ""; bye4 hello4 }
		\melodic { \id "Staff" ""; c'4 g'4 }
	> }

PROJECTS

	* emacs-mode for mudela

	* input converters
	- NIFF?
	- ABC? 
	- SMDL?

	* add to MIDI output:
	- tempo change
	- repeat
	- slurs
	- dynamics etc.

	* grace notes
	- adapt for multiple font sizes.
	- make separate class for Grace_*_engravers 
	(which is at Voice_gravs level)
	- move stem, beam, slur into baseclass to adapt for (fixed
	size) grace notes.

	* accidentals per Voice_group

	* Convert all ref/bib stuff into BibTeX.

	* Output class, handles : (smallish)
	- help text /(c) notice?
	- version line
	- warning /errors/progress
	- abort on error/warning; exit status
	- quiet/ignore-version options
	- logfile output

	* elaborate Staff_side baseclass:
	- scripts
	- text
	- slur start/end

	* Output an output format independent (ofi) typeset file; and 
	  make ofi2 TeX, MusixTex, PostScript, Ascii... interpreters. (difficult)
	- poor man's ascii output possible?
	- MusixTeX output possible? (would have to be done before break calc.)
	- NIFF ?
	- Common Music Notation
	- PostScript output (esp. Beams, Slurs, etc)
	- Move PScore, Items, Spanners etc. into libmutype.a

	* separate Score_elem settings in user-settable (properties
	.. ) and non-user-settable part. Maybe use something like X-resources:
	"Staff=oboe*dir: 0", "Staff=*.Voice_group=solo*dir: 1"

	* TeX spanners , use texbeam.cc as an example (smallish)
	- Glissando
	- trill
	- bracket

	* Rewrite Stem, Beam and Rhythmic_grouping (hairy)
	- [c8. c32 c32]
 	- interbeam height
	- doc on Rhythmic_grouping
	- general shaving on Beam and Stem
	- use plet grouping
	- abbreviations [c2 c2]1/2
	- separate visual from rhythmic info even more
	- beams over bars


	* Redo font support 
	- rename mf fonts to avoid conflicts with musixtex
	- use own fonts/update musixtex fonts/find older (c)-less fonts
	- hack up mf sources for decent spacing info (and then 
	read AFM/TFM directly, for text too)
	- use MF to generate rules.
	- rewrite : make a metafont iso font

	* lines:
	- Ledger lines, should be separate item: Ledger_lines, Ledger_lines
	- set different line sizes / thicknesses
	- stem down too far right
	- beam stem showthrough, inter beam sizes (french vs german style)

	* Collisions
	- bring Collision::do_pre_processing to haircutter
	- left/right note balls should be handled by Collision:
	< \multi 2; { \stem 1; <b c> } { <f as b> } >

	* Keys:
	- merge key{item} & localkey{item}?
	- do conventional keys (C G A, F B E, a e fis, d as des, etc ), 
	  besides lists of flats/sharps, possibly via declaration
	- key transposition. 
	- key undo: \key bes; .. . \key; should print natural	
	- special key: \key bes 'b bis';
	- spacing, national styles?

	* Support for TAB
	- redo Notehead to allow digits as heads
	- add a \tablature {} lexer mode for easy entering


	* should adjust stemlength for flag number.

	* breaking:
	- caching breakpoints
	- saving them
	- allowing users to set them.
	- penalties
	- specify number of lines
	- set linelength per line

SEVERELY LACKING:

	* SPEED!

	* multibar rests

	* barnumbers, markers

	* abbreviations c4=16

INPUTLANGUAGE

	* c4 4 4 4 for c4 c4 c4 c4?

	* neatly (and readably) expressing concurrent
	voices

	* <c f a>4 ?

	* should have \require{package.ly} to read req'd packages.

	* Viola mode?

		@c c g e g 
	for
		c g es g, 

		@A c g e g
	for
		cis gis e gis

	* relative mode for pitch entering

	* bracket (bracketplets)

	* \duration 8; e*2/3

	* configure pitch_byte

	* figured bass?

	* rest name configurable

	* Raw request syntax

PROJECTS

	* Do RTTI i.s.o. static_name(), name() and request-junk.

SMALLISH PROJECTS

	* A range for context errors (eg. mark both { and }. )

	* lyric in staff  (sharpsharp in staff, text below)

	* fix Egler definitions ( see tex/eglerdefs.tex )

	* replace Score_elem member access by get()/set() methods, to enable
	future embedded code.

	* --fast/--draft: leave out constraints

	* write Dynamic_line (to group dynamics horizontally)

	* write Rest_collision

	* use Real for y positions.

	* shared lib on Solaris too.

	* cleanup lily-proto.hh and proto.hh

	* half-sharps, half-flats

	* adaptive accidental spacing.

	* unix style paths for LILYINCLUDE env

	* indentable stream as baseclass for TeX stream, lily stream, Dstream.

	* handle EOF graciously in error messages.

	* caching Item/spanner dimensions.

	* centered whole rest

	* use dstream feature in mi2mu

        * qtor, btor, mtor-> tor( QUIET_ver ), tor( DEBUG_ver ), etc.
	- use tors feature in lily (?)

	* declare symtab

	* declare notenametab?

	* midi esp.: use I32 iso int where 32 bits are needed (or assumed...)

	* parshape

	* binsearch/hash for identifiers

	* stafftypes: voice names/ instrument names.

	* Decent TeX titledefs (\tempo, \metron, etc. )

	* lily \tempo

	* C meter iso 4/4, idem for alla breve, etc.

	* textspanner: center position

	* script-spacing

	* Brackets
	
	* use (char *) iso. String for communication between lexer and
	parser.

	* configure idealspacing: arithmetic spacing

DOC
	* Score_elem structure.

	* all errors
	
	* config of TeX macros

	* a test suite

	* hacking-HOWTO

FUTURE

	* auxilliary file for caching info.

	* Reg_configure_request

	* slur parts as a script
	
	* mixed fontsizes

	* put scripts on bars

	* guitar chord

	* Text_crescendo

	* clean solution for staffsize in items.

	* revise calcideal

	* volta

IDEAS

	* derive PCol from Score_elem? More in Score_elems? Spacing?

	* scoping in Lexer: do general id- assignments in mudela.

	ID '=' EXPR;

	* create libmudela, or liblily_frontend

	* move MIDI stuff (including Quantization) to a ANSI C libmidi library.

	* use an embedded language: Python
	for: 
		- Score_elems
		- Engraver
		- Translators
		- Complex mudela?

	* y -dims in internote? Staff-space? X-dimensions?

	* merge Atom and Symbol?

	* merge common code of Item, Atom/Molecule

	* Spacing_request for manually adjusting spacing

	* caching breakpoints

	* #c <-> cis

	* breath marks 

	* used fixedpoint arithmetic for min. energy.

	* default convert mudela-file.ly -> mudela-file.tex
	  - rename {standchen,scsii-menuetto,...}.tex

	* stack scripts in chords:
	  % fingering:        footing:
	    < a-4 c-2 g-1 >   < c-\ltoe e-\lheel >

	* stackparameterised scripts for fingering and footing:

            % toe to bheel   four to five
	    %   ^_u            4_5  
	    %     -                           
	    %  --|x--         --|x--
	    %  --|---         --|---
	    %  --|---         --|---
          (where "to" is a tiny bow)

	* move towards incremental algorithms.

	* design meta-language like TeX and Metafont
